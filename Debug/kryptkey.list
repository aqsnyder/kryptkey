
kryptkey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002188  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001584  08002294  08002294  00003294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003818  08003818  00005030  2**0
                  CONTENTS
  4 .ARM          00000000  08003818  08003818  00005030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003818  08003818  00005030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003818  08003818  00004818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800381c  0800381c  0000481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08003820  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000030  08003850  00005030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08003850  000054b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070bb  00000000  00000000  00005059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d3  00000000  00000000  0000c114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0000d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005da  00000000  00000000  0000dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d73  00000000  00000000  0000e57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1c0  00000000  00000000  000252ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826b5  00000000  00000000  0002f4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1b62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea0  00000000  00000000  000b1ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b3a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800227c 	.word	0x0800227c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800227c 	.word	0x0800227c

0800014c <display_menu>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Display the menu of account names */
void display_menu() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);  // Clear the screen
 8000152:	2000      	movs	r0, #0
 8000154:	f000 fa5e 	bl	8000614 <ssd1306_Fill>

    for (int i = 0; i < sizeof(account_names) / sizeof(account_names[0]); i++) {
 8000158:	2300      	movs	r3, #0
 800015a:	607b      	str	r3, [r7, #4]
 800015c:	e024      	b.n	80001a8 <display_menu+0x5c>
        ssd1306_SetCursor(2, i * 16);  // Set Y position for each line
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	b2db      	uxtb	r3, r3
 8000162:	011b      	lsls	r3, r3, #4
 8000164:	b2db      	uxtb	r3, r3
 8000166:	4619      	mov	r1, r3
 8000168:	2002      	movs	r0, #2
 800016a:	f000 fb9b 	bl	80008a4 <ssd1306_SetCursor>

        if (i == current_selection) {
 800016e:	4b13      	ldr	r3, [pc, #76]	@ (80001bc <display_menu+0x70>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	429a      	cmp	r2, r3
 8000176:	d10a      	bne.n	800018e <display_menu+0x42>
            ssd1306_WriteString(account_names[i], Font_11x18, White);  // Highlight selected item
 8000178:	4a11      	ldr	r2, [pc, #68]	@ (80001c0 <display_menu+0x74>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000180:	4b10      	ldr	r3, [pc, #64]	@ (80001c4 <display_menu+0x78>)
 8000182:	2201      	movs	r2, #1
 8000184:	9200      	str	r2, [sp, #0]
 8000186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000188:	f000 fb66 	bl	8000858 <ssd1306_WriteString>
 800018c:	e009      	b.n	80001a2 <display_menu+0x56>
        } else {
            ssd1306_WriteString(account_names[i], Font_7x10, White);
 800018e:	4a0c      	ldr	r2, [pc, #48]	@ (80001c0 <display_menu+0x74>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000196:	4b0c      	ldr	r3, [pc, #48]	@ (80001c8 <display_menu+0x7c>)
 8000198:	2201      	movs	r2, #1
 800019a:	9200      	str	r2, [sp, #0]
 800019c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800019e:	f000 fb5b 	bl	8000858 <ssd1306_WriteString>
    for (int i = 0; i < sizeof(account_names) / sizeof(account_names[0]); i++) {
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	3301      	adds	r3, #1
 80001a6:	607b      	str	r3, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d9d7      	bls.n	800015e <display_menu+0x12>
        }
    }
    ssd1306_UpdateScreen();  // Send buffer to display
 80001ae:	f000 fa49 	bl	8000644 <ssd1306_UpdateScreen>
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	200000a0 	.word	0x200000a0
 80001c0:	20000000 	.word	0x20000000
 80001c4:	080037e0 	.word	0x080037e0
 80001c8:	080037d4 	.word	0x080037d4

080001cc <navigate_menu>:

/* Handle menu navigation based on button input */
void navigate_menu(int direction) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    int menu_size = sizeof(account_names) / sizeof(account_names[0]);
 80001d4:	2303      	movs	r3, #3
 80001d6:	60fb      	str	r3, [r7, #12]
    current_selection += direction;
 80001d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000214 <navigate_menu+0x48>)
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000214 <navigate_menu+0x48>)
 80001e2:	6013      	str	r3, [r2, #0]
    if (current_selection < 0) {
 80001e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000214 <navigate_menu+0x48>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	da04      	bge.n	80001f6 <navigate_menu+0x2a>
        current_selection = menu_size - 1;  // Wrap to bottom
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a08      	ldr	r2, [pc, #32]	@ (8000214 <navigate_menu+0x48>)
 80001f2:	6013      	str	r3, [r2, #0]
 80001f4:	e007      	b.n	8000206 <navigate_menu+0x3a>
    } else if (current_selection >= menu_size) {
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <navigate_menu+0x48>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68fa      	ldr	r2, [r7, #12]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	dc02      	bgt.n	8000206 <navigate_menu+0x3a>
        current_selection = 0;  // Wrap to top
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <navigate_menu+0x48>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
    }
    display_menu();  // Update the display
 8000206:	f7ff ffa1 	bl	800014c <display_menu>
}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	200000a0 	.word	0x200000a0

08000218 <show_account_details>:

/* Display account details when selected */
void show_account_details(int index) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af02      	add	r7, sp, #8
 800021e:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);  // Clear screen
 8000220:	2000      	movs	r0, #0
 8000222:	f000 f9f7 	bl	8000614 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8000226:	2100      	movs	r1, #0
 8000228:	2002      	movs	r0, #2
 800022a:	f000 fb3b 	bl	80008a4 <ssd1306_SetCursor>
    ssd1306_WriteString("User:", Font_11x18, White);
 800022e:	4b1a      	ldr	r3, [pc, #104]	@ (8000298 <show_account_details+0x80>)
 8000230:	2201      	movs	r2, #1
 8000232:	9200      	str	r2, [sp, #0]
 8000234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000236:	4819      	ldr	r0, [pc, #100]	@ (800029c <show_account_details+0x84>)
 8000238:	f000 fb0e 	bl	8000858 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 20);
 800023c:	2114      	movs	r1, #20
 800023e:	2002      	movs	r0, #2
 8000240:	f000 fb30 	bl	80008a4 <ssd1306_SetCursor>
    ssd1306_WriteString(usernames[index], Font_11x18, White);
 8000244:	4a16      	ldr	r2, [pc, #88]	@ (80002a0 <show_account_details+0x88>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <show_account_details+0x80>)
 800024e:	2201      	movs	r2, #1
 8000250:	9200      	str	r2, [sp, #0]
 8000252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000254:	f000 fb00 	bl	8000858 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 40);
 8000258:	2128      	movs	r1, #40	@ 0x28
 800025a:	2002      	movs	r0, #2
 800025c:	f000 fb22 	bl	80008a4 <ssd1306_SetCursor>
    ssd1306_WriteString("Pass:", Font_11x18, White);
 8000260:	4b0d      	ldr	r3, [pc, #52]	@ (8000298 <show_account_details+0x80>)
 8000262:	2201      	movs	r2, #1
 8000264:	9200      	str	r2, [sp, #0]
 8000266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000268:	480e      	ldr	r0, [pc, #56]	@ (80002a4 <show_account_details+0x8c>)
 800026a:	f000 faf5 	bl	8000858 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 60);
 800026e:	213c      	movs	r1, #60	@ 0x3c
 8000270:	2002      	movs	r0, #2
 8000272:	f000 fb17 	bl	80008a4 <ssd1306_SetCursor>
    ssd1306_WriteString(passwords[index], Font_11x18, White);
 8000276:	4a0c      	ldr	r2, [pc, #48]	@ (80002a8 <show_account_details+0x90>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800027e:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <show_account_details+0x80>)
 8000280:	2201      	movs	r2, #1
 8000282:	9200      	str	r2, [sp, #0]
 8000284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000286:	f000 fae7 	bl	8000858 <ssd1306_WriteString>

    ssd1306_UpdateScreen();  // Send buffer to display
 800028a:	f000 f9db 	bl	8000644 <ssd1306_UpdateScreen>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	080037e0 	.word	0x080037e0
 800029c:	080022fc 	.word	0x080022fc
 80002a0:	2000000c 	.word	0x2000000c
 80002a4:	08002304 	.word	0x08002304
 80002a8:	20000018 	.word	0x20000018

080002ac <debounce_button>:

/* Debounce button presses */
uint8_t debounce_button(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	807b      	strh	r3, [r7, #2]
    if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 80002b8:	887b      	ldrh	r3, [r7, #2]
 80002ba:	4619      	mov	r1, r3
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f000 fef1 	bl	80010a4 <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d10c      	bne.n	80002e2 <debounce_button+0x36>
        HAL_Delay(DEBOUNCE_DELAY);  // Wait for debounce time
 80002c8:	2032      	movs	r0, #50	@ 0x32
 80002ca:	f000 fc5f 	bl	8000b8c <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 80002ce:	887b      	ldrh	r3, [r7, #2]
 80002d0:	4619      	mov	r1, r3
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f000 fee6 	bl	80010a4 <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d101      	bne.n	80002e2 <debounce_button+0x36>
            return 1;  // Button is confirmed pressed
 80002de:	2301      	movs	r3, #1
 80002e0:	e000      	b.n	80002e4 <debounce_button+0x38>
        }
    }
    return 0;  // Button is not pressed
 80002e2:	2300      	movs	r3, #0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <check_buttons>:

/* Check the state of buttons and navigate the menu */
void check_buttons() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
    if (debounce_button(GPIOA, GPIO_PIN_4)) {
 80002f0:	2110      	movs	r1, #16
 80002f2:	4812      	ldr	r0, [pc, #72]	@ (800033c <check_buttons+0x50>)
 80002f4:	f7ff ffda 	bl	80002ac <debounce_button>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d004      	beq.n	8000308 <check_buttons+0x1c>
        navigate_menu(-1);  // Move up in the list
 80002fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000302:	f7ff ff63 	bl	80001cc <navigate_menu>
    } else if (debounce_button(GPIOA, GPIO_PIN_5)) {
        navigate_menu(1);   // Move down in the list
    } else if (debounce_button(GPIOA, GPIO_PIN_6)) {
        show_account_details(current_selection);  // Show details for the selected account
    }
}
 8000306:	e016      	b.n	8000336 <check_buttons+0x4a>
    } else if (debounce_button(GPIOA, GPIO_PIN_5)) {
 8000308:	2120      	movs	r1, #32
 800030a:	480c      	ldr	r0, [pc, #48]	@ (800033c <check_buttons+0x50>)
 800030c:	f7ff ffce 	bl	80002ac <debounce_button>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d003      	beq.n	800031e <check_buttons+0x32>
        navigate_menu(1);   // Move down in the list
 8000316:	2001      	movs	r0, #1
 8000318:	f7ff ff58 	bl	80001cc <navigate_menu>
}
 800031c:	e00b      	b.n	8000336 <check_buttons+0x4a>
    } else if (debounce_button(GPIOA, GPIO_PIN_6)) {
 800031e:	2140      	movs	r1, #64	@ 0x40
 8000320:	4806      	ldr	r0, [pc, #24]	@ (800033c <check_buttons+0x50>)
 8000322:	f7ff ffc3 	bl	80002ac <debounce_button>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d004      	beq.n	8000336 <check_buttons+0x4a>
        show_account_details(current_selection);  // Show details for the selected account
 800032c:	4b04      	ldr	r3, [pc, #16]	@ (8000340 <check_buttons+0x54>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff71 	bl	8000218 <show_account_details>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40010800 	.word	0x40010800
 8000340:	200000a0 	.word	0x200000a0

08000344 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f000 fbbe 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f80f 	bl	800036e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f000 f876 	bl	8000440 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000354:	f000 f846 	bl	80003e4 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  ssd1306_Init();  // Initialize the OLED display
 8000358:	f000 f8f2 	bl	8000540 <ssd1306_Init>
  display_menu();  // Show the initial menu
 800035c:	f7ff fef6 	bl	800014c <display_menu>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    check_buttons();  // Poll buttons for input
 8000360:	f7ff ffc4 	bl	80002ec <check_buttons>
    HAL_Delay(200);   // Add delay to avoid button bouncing
 8000364:	20c8      	movs	r0, #200	@ 0xc8
 8000366:	f000 fc11 	bl	8000b8c <HAL_Delay>
    check_buttons();  // Poll buttons for input
 800036a:	bf00      	nop
 800036c:	e7f8      	b.n	8000360 <main+0x1c>

0800036e <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 800036e:	b580      	push	{r7, lr}
 8000370:	b090      	sub	sp, #64	@ 0x40
 8000372:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	2228      	movs	r2, #40	@ 0x28
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f001 ff51 	bl	8002224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	2302      	movs	r3, #2
 8000392:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	2301      	movs	r3, #1
 8000396:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000398:	2310      	movs	r3, #16
 800039a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800039c:	2300      	movs	r3, #0
 800039e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003a0:	f107 0318 	add.w	r3, r7, #24
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 fb41 	bl	8001a2c <HAL_RCC_OscConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x46>
    Error_Handler();
 80003b0:	f000 f888 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b4:	230f      	movs	r3, #15
 80003b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2100      	movs	r1, #0
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 fdaf 	bl	8001f30 <HAL_RCC_ClockConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x6e>
    Error_Handler();
 80003d8:	f000 f874 	bl	80004c4 <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	3740      	adds	r7, #64	@ 0x40
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80003e8:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003ea:	4a13      	ldr	r2, [pc, #76]	@ (8000438 <MX_I2C1_Init+0x54>)
 80003ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003ee:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003f0:	4a12      	ldr	r2, [pc, #72]	@ (800043c <MX_I2C1_Init+0x58>)
 80003f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000400:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000402:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000408:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <MX_I2C1_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800040e:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000414:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <MX_I2C1_Init+0x50>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000420:	4804      	ldr	r0, [pc, #16]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000422:	f000 fe57 	bl	80010d4 <HAL_I2C_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_I2C1_Init+0x4c>
    Error_Handler();
 800042c:	f000 f84a 	bl	80004c4 <Error_Handler>
  }
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000004c 	.word	0x2000004c
 8000438:	40005400 	.word	0x40005400
 800043c:	00061a80 	.word	0x00061a80

08000440 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000454:	4b19      	ldr	r3, [pc, #100]	@ (80004bc <MX_GPIO_Init+0x7c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a18      	ldr	r2, [pc, #96]	@ (80004bc <MX_GPIO_Init+0x7c>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <MX_GPIO_Init+0x7c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0320 	and.w	r3, r3, #32
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <MX_GPIO_Init+0x7c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <MX_GPIO_Init+0x7c>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <MX_GPIO_Init+0x7c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000484:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <MX_GPIO_Init+0x7c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a0c      	ldr	r2, [pc, #48]	@ (80004bc <MX_GPIO_Init+0x7c>)
 800048a:	f043 0308 	orr.w	r3, r3, #8
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <MX_GPIO_Init+0x7c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0308 	and.w	r3, r3, #8
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800049c:	2370      	movs	r3, #112	@ 0x70
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;  // Enable pull-down resistors to prevent floating pins
 80004a4:	2302      	movs	r3, #2
 80004a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4804      	ldr	r0, [pc, #16]	@ (80004c0 <MX_GPIO_Init+0x80>)
 80004b0:	f000 fc74 	bl	8000d9c <HAL_GPIO_Init>
}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	bf00      	nop
  __disable_irq();
  while (1) {
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <Error_Handler+0x8>

080004d0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	9302      	str	r3, [sp, #8]
 80004ec:	2301      	movs	r3, #1
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2301      	movs	r3, #1
 80004f6:	2200      	movs	r2, #0
 80004f8:	2178      	movs	r1, #120	@ 0x78
 80004fa:	4803      	ldr	r0, [pc, #12]	@ (8000508 <ssd1306_WriteCommand+0x2c>)
 80004fc:	f000 ff2e 	bl	800135c <HAL_I2C_Mem_Write>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000004c 	.word	0x2000004c

0800050c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af04      	add	r7, sp, #16
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	b29b      	uxth	r3, r3
 800051a:	f04f 32ff 	mov.w	r2, #4294967295
 800051e:	9202      	str	r2, [sp, #8]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	2240      	movs	r2, #64	@ 0x40
 800052a:	2178      	movs	r1, #120	@ 0x78
 800052c:	4803      	ldr	r0, [pc, #12]	@ (800053c <ssd1306_WriteData+0x30>)
 800052e:	f000 ff15 	bl	800135c <HAL_I2C_Mem_Write>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000004c 	.word	0x2000004c

08000540 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000544:	f7ff ffc4 	bl	80004d0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000548:	2064      	movs	r0, #100	@ 0x64
 800054a:	f000 fb1f 	bl	8000b8c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f9d4 	bl	80008fc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000554:	2020      	movs	r0, #32
 8000556:	f7ff ffc1 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ffbe 	bl	80004dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000560:	20b0      	movs	r0, #176	@ 0xb0
 8000562:	f7ff ffbb 	bl	80004dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000566:	20c8      	movs	r0, #200	@ 0xc8
 8000568:	f7ff ffb8 	bl	80004dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ffb5 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000572:	2010      	movs	r0, #16
 8000574:	f7ff ffb2 	bl	80004dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000578:	2040      	movs	r0, #64	@ 0x40
 800057a:	f7ff ffaf 	bl	80004dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800057e:	20ff      	movs	r0, #255	@ 0xff
 8000580:	f000 f9a8 	bl	80008d4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000584:	20a1      	movs	r0, #161	@ 0xa1
 8000586:	f7ff ffa9 	bl	80004dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800058a:	20a6      	movs	r0, #166	@ 0xa6
 800058c:	f7ff ffa6 	bl	80004dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000590:	20a8      	movs	r0, #168	@ 0xa8
 8000592:	f7ff ffa3 	bl	80004dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000596:	203f      	movs	r0, #63	@ 0x3f
 8000598:	f7ff ffa0 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800059c:	20a4      	movs	r0, #164	@ 0xa4
 800059e:	f7ff ff9d 	bl	80004dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005a2:	20d3      	movs	r0, #211	@ 0xd3
 80005a4:	f7ff ff9a 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ff97 	bl	80004dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80005ae:	20d5      	movs	r0, #213	@ 0xd5
 80005b0:	f7ff ff94 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80005b4:	20f0      	movs	r0, #240	@ 0xf0
 80005b6:	f7ff ff91 	bl	80004dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80005ba:	20d9      	movs	r0, #217	@ 0xd9
 80005bc:	f7ff ff8e 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80005c0:	2022      	movs	r0, #34	@ 0x22
 80005c2:	f7ff ff8b 	bl	80004dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80005c6:	20da      	movs	r0, #218	@ 0xda
 80005c8:	f7ff ff88 	bl	80004dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80005cc:	2012      	movs	r0, #18
 80005ce:	f7ff ff85 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80005d2:	20db      	movs	r0, #219	@ 0xdb
 80005d4:	f7ff ff82 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80005d8:	2020      	movs	r0, #32
 80005da:	f7ff ff7f 	bl	80004dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80005de:	208d      	movs	r0, #141	@ 0x8d
 80005e0:	f7ff ff7c 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80005e4:	2014      	movs	r0, #20
 80005e6:	f7ff ff79 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 f986 	bl	80008fc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 f80f 	bl	8000614 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80005f6:	f000 f825 	bl	8000644 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80005fa:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <ssd1306_Init+0xd0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000600:	4b03      	ldr	r3, [pc, #12]	@ (8000610 <ssd1306_Init+0xd0>)
 8000602:	2200      	movs	r2, #0
 8000604:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000606:	4b02      	ldr	r3, [pc, #8]	@ (8000610 <ssd1306_Init+0xd0>)
 8000608:	2201      	movs	r2, #1
 800060a:	711a      	strb	r2, [r3, #4]
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200004a4 	.word	0x200004a4

08000614 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <ssd1306_Fill+0x14>
 8000624:	2300      	movs	r3, #0
 8000626:	e000      	b.n	800062a <ssd1306_Fill+0x16>
 8000628:	23ff      	movs	r3, #255	@ 0xff
 800062a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800062e:	4619      	mov	r1, r3
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <ssd1306_Fill+0x2c>)
 8000632:	f001 fdf7 	bl	8002224 <memset>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000a4 	.word	0x200000a4

08000644 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	e016      	b.n	800067e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	3b50      	subs	r3, #80	@ 0x50
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff40 	bl	80004dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ff3d 	bl	80004dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000662:	2010      	movs	r0, #16
 8000664:	f7ff ff3a 	bl	80004dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	01db      	lsls	r3, r3, #7
 800066c:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <ssd1306_UpdateScreen+0x4c>)
 800066e:	4413      	add	r3, r2
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff4a 	bl	800050c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	3301      	adds	r3, #1
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b07      	cmp	r3, #7
 8000682:	d9e5      	bls.n	8000650 <ssd1306_UpdateScreen+0xc>
    }
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000a4 	.word	0x200000a4

08000694 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	460b      	mov	r3, r1
 80006a0:	71bb      	strb	r3, [r7, #6]
 80006a2:	4613      	mov	r3, r2
 80006a4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db3d      	blt.n	800072a <ssd1306_DrawPixel+0x96>
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80006b2:	d83a      	bhi.n	800072a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d11a      	bne.n	80006f0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	79bb      	ldrb	r3, [r7, #6]
 80006be:	08db      	lsrs	r3, r3, #3
 80006c0:	b2d8      	uxtb	r0, r3
 80006c2:	4603      	mov	r3, r0
 80006c4:	01db      	lsls	r3, r3, #7
 80006c6:	4413      	add	r3, r2
 80006c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000734 <ssd1306_DrawPixel+0xa0>)
 80006ca:	5cd3      	ldrb	r3, [r2, r3]
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	f003 0307 	and.w	r3, r3, #7
 80006d4:	2101      	movs	r1, #1
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b259      	sxtb	r1, r3
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	4603      	mov	r3, r0
 80006e4:	01db      	lsls	r3, r3, #7
 80006e6:	4413      	add	r3, r2
 80006e8:	b2c9      	uxtb	r1, r1
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <ssd1306_DrawPixel+0xa0>)
 80006ec:	54d1      	strb	r1, [r2, r3]
 80006ee:	e01d      	b.n	800072c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	08db      	lsrs	r3, r3, #3
 80006f6:	b2d8      	uxtb	r0, r3
 80006f8:	4603      	mov	r3, r0
 80006fa:	01db      	lsls	r3, r3, #7
 80006fc:	4413      	add	r3, r2
 80006fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <ssd1306_DrawPixel+0xa0>)
 8000700:	5cd3      	ldrb	r3, [r2, r3]
 8000702:	b25a      	sxtb	r2, r3
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	b25b      	sxtb	r3, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	b25b      	sxtb	r3, r3
 8000716:	4013      	ands	r3, r2
 8000718:	b259      	sxtb	r1, r3
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	4603      	mov	r3, r0
 800071e:	01db      	lsls	r3, r3, #7
 8000720:	4413      	add	r3, r2
 8000722:	b2c9      	uxtb	r1, r1
 8000724:	4a03      	ldr	r2, [pc, #12]	@ (8000734 <ssd1306_DrawPixel+0xa0>)
 8000726:	54d1      	strb	r1, [r2, r3]
 8000728:	e000      	b.n	800072c <ssd1306_DrawPixel+0x98>
        return;
 800072a:	bf00      	nop
    }
}
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	200000a4 	.word	0x200000a4

08000738 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	4604      	mov	r4, r0
 8000740:	4638      	mov	r0, r7
 8000742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000746:	4623      	mov	r3, r4
 8000748:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	2b1f      	cmp	r3, #31
 800074e:	d902      	bls.n	8000756 <ssd1306_WriteChar+0x1e>
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b7e      	cmp	r3, #126	@ 0x7e
 8000754:	d901      	bls.n	800075a <ssd1306_WriteChar+0x22>
        return 0;
 8000756:	2300      	movs	r3, #0
 8000758:	e077      	b.n	800084a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800075a:	4b3e      	ldr	r3, [pc, #248]	@ (8000854 <ssd1306_WriteChar+0x11c>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	783b      	ldrb	r3, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	2b80      	cmp	r3, #128	@ 0x80
 8000766:	dc06      	bgt.n	8000776 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000768:	4b3a      	ldr	r3, [pc, #232]	@ (8000854 <ssd1306_WriteChar+0x11c>)
 800076a:	885b      	ldrh	r3, [r3, #2]
 800076c:	461a      	mov	r2, r3
 800076e:	787b      	ldrb	r3, [r7, #1]
 8000770:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000772:	2b40      	cmp	r3, #64	@ 0x40
 8000774:	dd01      	ble.n	800077a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000776:	2300      	movs	r3, #0
 8000778:	e067      	b.n	800084a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	e04e      	b.n	800081e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	3b20      	subs	r3, #32
 8000786:	7879      	ldrb	r1, [r7, #1]
 8000788:	fb01 f303 	mul.w	r3, r1, r3
 800078c:	4619      	mov	r1, r3
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	440b      	add	r3, r1
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	e036      	b.n	800080e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d013      	beq.n	80007d8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80007b0:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <ssd1306_WriteChar+0x11c>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4413      	add	r3, r2
 80007bc:	b2d8      	uxtb	r0, r3
 80007be:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <ssd1306_WriteChar+0x11c>)
 80007c0:	885b      	ldrh	r3, [r3, #2]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80007d0:	4619      	mov	r1, r3
 80007d2:	f7ff ff5f 	bl	8000694 <ssd1306_DrawPixel>
 80007d6:	e017      	b.n	8000808 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <ssd1306_WriteChar+0x11c>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4413      	add	r3, r2
 80007e4:	b2d8      	uxtb	r0, r3
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <ssd1306_WriteChar+0x11c>)
 80007e8:	885b      	ldrh	r3, [r3, #2]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4413      	add	r3, r2
 80007f2:	b2d9      	uxtb	r1, r3
 80007f4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf0c      	ite	eq
 80007fc:	2301      	moveq	r3, #1
 80007fe:	2300      	movne	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	f7ff ff46 	bl	8000694 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	3301      	adds	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	783b      	ldrb	r3, [r7, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	4293      	cmp	r3, r2
 8000816:	d3c3      	bcc.n	80007a0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	3301      	adds	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
 800081e:	787b      	ldrb	r3, [r7, #1]
 8000820:	461a      	mov	r2, r3
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	4293      	cmp	r3, r2
 8000826:	d3ab      	bcc.n	8000780 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <ssd1306_WriteChar+0x11c>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	2a00      	cmp	r2, #0
 8000830:	d005      	beq.n	800083e <ssd1306_WriteChar+0x106>
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	7bfa      	ldrb	r2, [r7, #15]
 8000836:	3a20      	subs	r2, #32
 8000838:	440a      	add	r2, r1
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	e000      	b.n	8000840 <ssd1306_WriteChar+0x108>
 800083e:	783a      	ldrb	r2, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <ssd1306_WriteChar+0x11c>)
 8000846:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	@ 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	bf00      	nop
 8000854:	200004a4 	.word	0x200004a4

08000858 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af02      	add	r7, sp, #8
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	4638      	mov	r0, r7
 8000862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000866:	e013      	b.n	8000890 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	7818      	ldrb	r0, [r3, #0]
 800086c:	7e3b      	ldrb	r3, [r7, #24]
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	463b      	mov	r3, r7
 8000872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000874:	f7ff ff60 	bl	8000738 <ssd1306_WriteChar>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d002      	beq.n	800088a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	e008      	b.n	800089c <ssd1306_WriteString+0x44>
        }
        str++;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1e7      	bne.n	8000868 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	781b      	ldrb	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	4613      	mov	r3, r2
 80008b2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <ssd1306_SetCursor+0x2c>)
 80008ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	b29a      	uxth	r2, r3
 80008c0:	4b03      	ldr	r3, [pc, #12]	@ (80008d0 <ssd1306_SetCursor+0x2c>)
 80008c2:	805a      	strh	r2, [r3, #2]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200004a4 	.word	0x200004a4

080008d4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80008de:	2381      	movs	r3, #129	@ 0x81
 80008e0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fdf9 	bl	80004dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fdf5 	bl	80004dc <ssd1306_WriteCommand>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800090c:	23af      	movs	r3, #175	@ 0xaf
 800090e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <ssd1306_SetDisplayOn+0x38>)
 8000912:	2201      	movs	r2, #1
 8000914:	715a      	strb	r2, [r3, #5]
 8000916:	e004      	b.n	8000922 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000918:	23ae      	movs	r3, #174	@ 0xae
 800091a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <ssd1306_SetDisplayOn+0x38>)
 800091e:	2200      	movs	r2, #0
 8000920:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fdd9 	bl	80004dc <ssd1306_WriteCommand>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200004a4 	.word	0x200004a4

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <HAL_MspInit+0x5c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a14      	ldr	r2, [pc, #80]	@ (8000994 <HAL_MspInit+0x5c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <HAL_MspInit+0x5c>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <HAL_MspInit+0x5c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <HAL_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_MspInit+0x60>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_MspInit+0x60>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000
 8000998:	40010000 	.word	0x40010000

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <HAL_I2C_MspInit+0x70>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d123      	bne.n	8000a04 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <HAL_I2C_MspInit+0x74>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a13      	ldr	r2, [pc, #76]	@ (8000a10 <HAL_I2C_MspInit+0x74>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <HAL_I2C_MspInit+0x74>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d4:	23c0      	movs	r3, #192	@ 0xc0
 80009d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d8:	2312      	movs	r3, #18
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4619      	mov	r1, r3
 80009e6:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <HAL_I2C_MspInit+0x78>)
 80009e8:	f000 f9d8 	bl	8000d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_I2C_MspInit+0x74>)
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_I2C_MspInit+0x74>)
 80009f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f6:	61d3      	str	r3, [r2, #28]
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_I2C_MspInit+0x74>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 f874 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff fff8 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a82:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a98:	4c09      	ldr	r4, [pc, #36]	@ (8000ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f001 fbc5 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff fc4b 	bl	8000344 <main>
  bx lr
 8000aae:	4770      	bx	lr
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000ab8:	08003820 	.word	0x08003820
  ldr r2, =_sbss
 8000abc:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000ac0:	200004b0 	.word	0x200004b0

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <HAL_Init+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	@ (8000af0 <HAL_Init+0x28>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f92b 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff ff28 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f935 	bl	8000d82 <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f90b 	bl	8000d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	@ (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000024 	.word	0x20000024
 8000b4c:	2000002c 	.word	0x2000002c
 8000b50:	20000028 	.word	0x20000028

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a03      	ldr	r2, [pc, #12]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	2000002c 	.word	0x2000002c
 8000b74:	200004ac 	.word	0x200004ac

08000b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	@ (8000b88 <HAL_GetTick+0x10>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	200004ac 	.word	0x200004ac

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff fff0 	bl	8000b78 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffe0 	bl	8000b78 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000002c 	.word	0x2000002c

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	@ (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	@ (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	@ 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	@ 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f7ff ff90 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff49 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff5e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff90 	bl	8000c8c <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5f 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffb0 	bl	8000cf0 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b08b      	sub	sp, #44	@ 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	e169      	b.n	8001084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000db0:	2201      	movs	r2, #1
 8000db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f040 8158 	bne.w	800107e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	4a9a      	ldr	r2, [pc, #616]	@ (800103c <HAL_GPIO_Init+0x2a0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d05e      	beq.n	8000e96 <HAL_GPIO_Init+0xfa>
 8000dd8:	4a98      	ldr	r2, [pc, #608]	@ (800103c <HAL_GPIO_Init+0x2a0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d875      	bhi.n	8000eca <HAL_GPIO_Init+0x12e>
 8000dde:	4a98      	ldr	r2, [pc, #608]	@ (8001040 <HAL_GPIO_Init+0x2a4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d058      	beq.n	8000e96 <HAL_GPIO_Init+0xfa>
 8000de4:	4a96      	ldr	r2, [pc, #600]	@ (8001040 <HAL_GPIO_Init+0x2a4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d86f      	bhi.n	8000eca <HAL_GPIO_Init+0x12e>
 8000dea:	4a96      	ldr	r2, [pc, #600]	@ (8001044 <HAL_GPIO_Init+0x2a8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d052      	beq.n	8000e96 <HAL_GPIO_Init+0xfa>
 8000df0:	4a94      	ldr	r2, [pc, #592]	@ (8001044 <HAL_GPIO_Init+0x2a8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d869      	bhi.n	8000eca <HAL_GPIO_Init+0x12e>
 8000df6:	4a94      	ldr	r2, [pc, #592]	@ (8001048 <HAL_GPIO_Init+0x2ac>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d04c      	beq.n	8000e96 <HAL_GPIO_Init+0xfa>
 8000dfc:	4a92      	ldr	r2, [pc, #584]	@ (8001048 <HAL_GPIO_Init+0x2ac>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d863      	bhi.n	8000eca <HAL_GPIO_Init+0x12e>
 8000e02:	4a92      	ldr	r2, [pc, #584]	@ (800104c <HAL_GPIO_Init+0x2b0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d046      	beq.n	8000e96 <HAL_GPIO_Init+0xfa>
 8000e08:	4a90      	ldr	r2, [pc, #576]	@ (800104c <HAL_GPIO_Init+0x2b0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d85d      	bhi.n	8000eca <HAL_GPIO_Init+0x12e>
 8000e0e:	2b12      	cmp	r3, #18
 8000e10:	d82a      	bhi.n	8000e68 <HAL_GPIO_Init+0xcc>
 8000e12:	2b12      	cmp	r3, #18
 8000e14:	d859      	bhi.n	8000eca <HAL_GPIO_Init+0x12e>
 8000e16:	a201      	add	r2, pc, #4	@ (adr r2, 8000e1c <HAL_GPIO_Init+0x80>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e97 	.word	0x08000e97
 8000e20:	08000e71 	.word	0x08000e71
 8000e24:	08000e83 	.word	0x08000e83
 8000e28:	08000ec5 	.word	0x08000ec5
 8000e2c:	08000ecb 	.word	0x08000ecb
 8000e30:	08000ecb 	.word	0x08000ecb
 8000e34:	08000ecb 	.word	0x08000ecb
 8000e38:	08000ecb 	.word	0x08000ecb
 8000e3c:	08000ecb 	.word	0x08000ecb
 8000e40:	08000ecb 	.word	0x08000ecb
 8000e44:	08000ecb 	.word	0x08000ecb
 8000e48:	08000ecb 	.word	0x08000ecb
 8000e4c:	08000ecb 	.word	0x08000ecb
 8000e50:	08000ecb 	.word	0x08000ecb
 8000e54:	08000ecb 	.word	0x08000ecb
 8000e58:	08000ecb 	.word	0x08000ecb
 8000e5c:	08000ecb 	.word	0x08000ecb
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e8d 	.word	0x08000e8d
 8000e68:	4a79      	ldr	r2, [pc, #484]	@ (8001050 <HAL_GPIO_Init+0x2b4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e6e:	e02c      	b.n	8000eca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e029      	b.n	8000ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	623b      	str	r3, [r7, #32]
          break;
 8000e80:	e024      	b.n	8000ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	3308      	adds	r3, #8
 8000e88:	623b      	str	r3, [r7, #32]
          break;
 8000e8a:	e01f      	b.n	8000ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	330c      	adds	r3, #12
 8000e92:	623b      	str	r3, [r7, #32]
          break;
 8000e94:	e01a      	b.n	8000ecc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	623b      	str	r3, [r7, #32]
          break;
 8000ea2:	e013      	b.n	8000ecc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d105      	bne.n	8000eb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eac:	2308      	movs	r3, #8
 8000eae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	611a      	str	r2, [r3, #16]
          break;
 8000eb6:	e009      	b.n	8000ecc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	615a      	str	r2, [r3, #20]
          break;
 8000ec2:	e003      	b.n	8000ecc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
          break;
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x130>
          break;
 8000eca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	2bff      	cmp	r3, #255	@ 0xff
 8000ed0:	d801      	bhi.n	8000ed6 <HAL_GPIO_Init+0x13a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	e001      	b.n	8000eda <HAL_GPIO_Init+0x13e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2bff      	cmp	r3, #255	@ 0xff
 8000ee0:	d802      	bhi.n	8000ee8 <HAL_GPIO_Init+0x14c>
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	e002      	b.n	8000eee <HAL_GPIO_Init+0x152>
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eea:	3b08      	subs	r3, #8
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	6a39      	ldr	r1, [r7, #32]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 80b1 	beq.w	800107e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001054 <HAL_GPIO_Init+0x2b8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a4c      	ldr	r2, [pc, #304]	@ (8001054 <HAL_GPIO_Init+0x2b8>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b4a      	ldr	r3, [pc, #296]	@ (8001054 <HAL_GPIO_Init+0x2b8>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f34:	4a48      	ldr	r2, [pc, #288]	@ (8001058 <HAL_GPIO_Init+0x2bc>)
 8000f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a40      	ldr	r2, [pc, #256]	@ (800105c <HAL_GPIO_Init+0x2c0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d013      	beq.n	8000f88 <HAL_GPIO_Init+0x1ec>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a3f      	ldr	r2, [pc, #252]	@ (8001060 <HAL_GPIO_Init+0x2c4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d00d      	beq.n	8000f84 <HAL_GPIO_Init+0x1e8>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001064 <HAL_GPIO_Init+0x2c8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d007      	beq.n	8000f80 <HAL_GPIO_Init+0x1e4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a3d      	ldr	r2, [pc, #244]	@ (8001068 <HAL_GPIO_Init+0x2cc>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d101      	bne.n	8000f7c <HAL_GPIO_Init+0x1e0>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e006      	b.n	8000f8a <HAL_GPIO_Init+0x1ee>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	e004      	b.n	8000f8a <HAL_GPIO_Init+0x1ee>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e002      	b.n	8000f8a <HAL_GPIO_Init+0x1ee>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <HAL_GPIO_Init+0x1ee>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f8c:	f002 0203 	and.w	r2, r2, #3
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	4093      	lsls	r3, r2
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f9a:	492f      	ldr	r1, [pc, #188]	@ (8001058 <HAL_GPIO_Init+0x2bc>)
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	492c      	ldr	r1, [pc, #176]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	608b      	str	r3, [r1, #8]
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4928      	ldr	r1, [pc, #160]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	4922      	ldr	r1, [pc, #136]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	60cb      	str	r3, [r1, #12]
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fea:	4b20      	ldr	r3, [pc, #128]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	491e      	ldr	r1, [pc, #120]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d006      	beq.n	8001012 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	4918      	ldr	r1, [pc, #96]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	43db      	mvns	r3, r3
 800101a:	4914      	ldr	r1, [pc, #80]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 800101c:	4013      	ands	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d021      	beq.n	8001070 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	490e      	ldr	r1, [pc, #56]	@ (800106c <HAL_GPIO_Init+0x2d0>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	600b      	str	r3, [r1, #0]
 8001038:	e021      	b.n	800107e <HAL_GPIO_Init+0x2e2>
 800103a:	bf00      	nop
 800103c:	10320000 	.word	0x10320000
 8001040:	10310000 	.word	0x10310000
 8001044:	10220000 	.word	0x10220000
 8001048:	10210000 	.word	0x10210000
 800104c:	10120000 	.word	0x10120000
 8001050:	10110000 	.word	0x10110000
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	40010800 	.word	0x40010800
 8001060:	40010c00 	.word	0x40010c00
 8001064:	40011000 	.word	0x40011000
 8001068:	40011400 	.word	0x40011400
 800106c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <HAL_GPIO_Init+0x304>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	43db      	mvns	r3, r3
 8001078:	4909      	ldr	r1, [pc, #36]	@ (80010a0 <HAL_GPIO_Init+0x304>)
 800107a:	4013      	ands	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	3301      	adds	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	fa22 f303 	lsr.w	r3, r2, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	f47f ae8e 	bne.w	8000db0 <HAL_GPIO_Init+0x14>
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	372c      	adds	r7, #44	@ 0x2c
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40010400 	.word	0x40010400

080010a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e001      	b.n	80010c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e12b      	b.n	800133e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d106      	bne.n	8001100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fc4e 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2224      	movs	r2, #36	@ 0x24
 8001104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001138:	f001 f842 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 800113c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a81      	ldr	r2, [pc, #516]	@ (8001348 <HAL_I2C_Init+0x274>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d807      	bhi.n	8001158 <HAL_I2C_Init+0x84>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4a80      	ldr	r2, [pc, #512]	@ (800134c <HAL_I2C_Init+0x278>)
 800114c:	4293      	cmp	r3, r2
 800114e:	bf94      	ite	ls
 8001150:	2301      	movls	r3, #1
 8001152:	2300      	movhi	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	e006      	b.n	8001166 <HAL_I2C_Init+0x92>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4a7d      	ldr	r2, [pc, #500]	@ (8001350 <HAL_I2C_Init+0x27c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	bf94      	ite	ls
 8001160:	2301      	movls	r3, #1
 8001162:	2300      	movhi	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e0e7      	b.n	800133e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4a78      	ldr	r2, [pc, #480]	@ (8001354 <HAL_I2C_Init+0x280>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9b      	lsrs	r3, r3, #18
 8001178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	430a      	orrs	r2, r1
 800118c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a6a      	ldr	r2, [pc, #424]	@ (8001348 <HAL_I2C_Init+0x274>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d802      	bhi.n	80011a8 <HAL_I2C_Init+0xd4>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3301      	adds	r3, #1
 80011a6:	e009      	b.n	80011bc <HAL_I2C_Init+0xe8>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	4a69      	ldr	r2, [pc, #420]	@ (8001358 <HAL_I2C_Init+0x284>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	099b      	lsrs	r3, r3, #6
 80011ba:	3301      	adds	r3, #1
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	495c      	ldr	r1, [pc, #368]	@ (8001348 <HAL_I2C_Init+0x274>)
 80011d8:	428b      	cmp	r3, r1
 80011da:	d819      	bhi.n	8001210 <HAL_I2C_Init+0x13c>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e59      	subs	r1, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ea:	1c59      	adds	r1, r3, #1
 80011ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011f0:	400b      	ands	r3, r1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00a      	beq.n	800120c <HAL_I2C_Init+0x138>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1e59      	subs	r1, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fbb1 f3f3 	udiv	r3, r1, r3
 8001204:	3301      	adds	r3, #1
 8001206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120a:	e051      	b.n	80012b0 <HAL_I2C_Init+0x1dc>
 800120c:	2304      	movs	r3, #4
 800120e:	e04f      	b.n	80012b0 <HAL_I2C_Init+0x1dc>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d111      	bne.n	800123c <HAL_I2C_Init+0x168>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1e58      	subs	r0, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6859      	ldr	r1, [r3, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	440b      	add	r3, r1
 8001226:	fbb0 f3f3 	udiv	r3, r0, r3
 800122a:	3301      	adds	r3, #1
 800122c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	e012      	b.n	8001262 <HAL_I2C_Init+0x18e>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1e58      	subs	r0, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6859      	ldr	r1, [r3, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	0099      	lsls	r1, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001252:	3301      	adds	r3, #1
 8001254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_I2C_Init+0x196>
 8001266:	2301      	movs	r3, #1
 8001268:	e022      	b.n	80012b0 <HAL_I2C_Init+0x1dc>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10e      	bne.n	8001290 <HAL_I2C_Init+0x1bc>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1e58      	subs	r0, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6859      	ldr	r1, [r3, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	440b      	add	r3, r1
 8001280:	fbb0 f3f3 	udiv	r3, r0, r3
 8001284:	3301      	adds	r3, #1
 8001286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800128e:	e00f      	b.n	80012b0 <HAL_I2C_Init+0x1dc>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	0099      	lsls	r1, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	6809      	ldr	r1, [r1, #0]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80012de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6911      	ldr	r1, [r2, #16]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68d2      	ldr	r2, [r2, #12]
 80012ea:	4311      	orrs	r1, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2220      	movs	r2, #32
 800132a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	000186a0 	.word	0x000186a0
 800134c:	001e847f 	.word	0x001e847f
 8001350:	003d08ff 	.word	0x003d08ff
 8001354:	431bde83 	.word	0x431bde83
 8001358:	10624dd3 	.word	0x10624dd3

0800135c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4603      	mov	r3, r0
 800136c:	817b      	strh	r3, [r7, #10]
 800136e:	460b      	mov	r3, r1
 8001370:	813b      	strh	r3, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001376:	f7ff fbff 	bl	8000b78 <HAL_GetTick>
 800137a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b20      	cmp	r3, #32
 8001386:	f040 80d9 	bne.w	800153c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2319      	movs	r3, #25
 8001390:	2201      	movs	r2, #1
 8001392:	496d      	ldr	r1, [pc, #436]	@ (8001548 <HAL_I2C_Mem_Write+0x1ec>)
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f000 f971 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0cc      	b.n	800153e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_I2C_Mem_Write+0x56>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e0c5      	b.n	800153e <HAL_I2C_Mem_Write+0x1e2>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d007      	beq.n	80013d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2221      	movs	r2, #33	@ 0x21
 80013ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2240      	movs	r2, #64	@ 0x40
 80013f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a3a      	ldr	r2, [r7, #32]
 8001402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a4d      	ldr	r2, [pc, #308]	@ (800154c <HAL_I2C_Mem_Write+0x1f0>)
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800141a:	88f8      	ldrh	r0, [r7, #6]
 800141c:	893a      	ldrh	r2, [r7, #8]
 800141e:	8979      	ldrh	r1, [r7, #10]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4603      	mov	r3, r0
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f890 	bl	8001550 <I2C_RequestMemoryWrite>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d052      	beq.n	80014dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e081      	b.n	800153e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 fa36 	bl	80018b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00d      	beq.n	8001466 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	2b04      	cmp	r3, #4
 8001450:	d107      	bne.n	8001462 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e06b      	b.n	800153e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001480:	3b01      	subs	r3, #1
 8001482:	b29a      	uxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800148c:	b29b      	uxth	r3, r3
 800148e:	3b01      	subs	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d11b      	bne.n	80014dc <HAL_I2C_Mem_Write+0x180>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d017      	beq.n	80014dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1aa      	bne.n	800143a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fa29 	bl	8001940 <I2C_WaitOnBTFFlagUntilTimeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00d      	beq.n	8001510 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d107      	bne.n	800150c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800150a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e016      	b.n	800153e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800151e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2220      	movs	r2, #32
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800153c:	2302      	movs	r3, #2
  }
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	00100002 	.word	0x00100002
 800154c:	ffff0000 	.word	0xffff0000

08001550 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af02      	add	r7, sp, #8
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	817b      	strh	r3, [r7, #10]
 8001562:	460b      	mov	r3, r1
 8001564:	813b      	strh	r3, [r7, #8]
 8001566:	4613      	mov	r3, r2
 8001568:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	2200      	movs	r2, #0
 8001582:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f878 	bl	800167c <I2C_WaitOnFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00d      	beq.n	80015ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015a0:	d103      	bne.n	80015aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e05f      	b.n	800166e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80015bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	6a3a      	ldr	r2, [r7, #32]
 80015c2:	492d      	ldr	r1, [pc, #180]	@ (8001678 <I2C_RequestMemoryWrite+0x128>)
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f8d3 	bl	8001770 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e04c      	b.n	800166e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ec:	6a39      	ldr	r1, [r7, #32]
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 f95e 	bl	80018b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00d      	beq.n	8001616 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d107      	bne.n	8001612 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e02b      	b.n	800166e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800161c:	893b      	ldrh	r3, [r7, #8]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	e021      	b.n	800166c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001628:	893b      	ldrh	r3, [r7, #8]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2da      	uxtb	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001638:	6a39      	ldr	r1, [r7, #32]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f938 	bl	80018b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00d      	beq.n	8001662 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	2b04      	cmp	r3, #4
 800164c:	d107      	bne.n	800165e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800165c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e005      	b.n	800166e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001662:	893b      	ldrh	r3, [r7, #8]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	00010002 	.word	0x00010002

0800167c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	4613      	mov	r3, r2
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800168c:	e048      	b.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d044      	beq.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001696:	f7ff fa6f 	bl	8000b78 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d302      	bcc.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d139      	bne.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	0c1b      	lsrs	r3, r3, #16
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10d      	bne.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	43da      	mvns	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4013      	ands	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	e00c      	b.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	43da      	mvns	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4013      	ands	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d116      	bne.n	8001720 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e023      	b.n	8001768 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d10d      	bne.n	8001746 <I2C_WaitOnFlagUntilTimeout+0xca>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	43da      	mvns	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4013      	ands	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	e00c      	b.n	8001760 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	43da      	mvns	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	4013      	ands	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	429a      	cmp	r2, r3
 8001764:	d093      	beq.n	800168e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800177e:	e071      	b.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800178e:	d123      	bne.n	80017d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e067      	b.n	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017de:	d041      	beq.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e0:	f7ff f9ca 	bl	8000b78 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d302      	bcc.n	80017f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d136      	bne.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0c1b      	lsrs	r3, r3, #16
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10c      	bne.n	800181a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4013      	ands	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	e00b      	b.n	8001832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	43da      	mvns	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	4013      	ands	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d016      	beq.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2220      	movs	r2, #32
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	f043 0220 	orr.w	r2, r3, #32
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e021      	b.n	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d10c      	bne.n	8001888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	43da      	mvns	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4013      	ands	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e00b      	b.n	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4013      	ands	r3, r2
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f af6d 	bne.w	8001780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018bc:	e034      	b.n	8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f886 	bl	80019d0 <I2C_IsAcknowledgeFailed>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e034      	b.n	8001938 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d028      	beq.n	8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d6:	f7ff f94f 	bl	8000b78 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d302      	bcc.n	80018ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d11d      	bne.n	8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f6:	2b80      	cmp	r3, #128	@ 0x80
 80018f8:	d016      	beq.n	8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e007      	b.n	8001938 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001932:	2b80      	cmp	r3, #128	@ 0x80
 8001934:	d1c3      	bne.n	80018be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800194c:	e034      	b.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f83e 	bl	80019d0 <I2C_IsAcknowledgeFailed>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e034      	b.n	80019c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d028      	beq.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001966:	f7ff f907 	bl	8000b78 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	d302      	bcc.n	800197c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11d      	bne.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b04      	cmp	r3, #4
 8001988:	d016      	beq.n	80019b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e007      	b.n	80019c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d1c3      	bne.n	800194e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e6:	d11b      	bne.n	8001a20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80019f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f043 0204 	orr.w	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e272      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8087 	beq.w	8001b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4c:	4b92      	ldr	r3, [pc, #584]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d00c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a58:	4b8f      	ldr	r3, [pc, #572]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d112      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5e>
 8001a64:	4b8c      	ldr	r3, [pc, #560]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a70:	d10b      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	4b89      	ldr	r3, [pc, #548]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d06c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x12c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d168      	bne.n	8001b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e24c      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x76>
 8001a94:	4b80      	ldr	r3, [pc, #512]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a7f      	ldr	r2, [pc, #508]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e02e      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x98>
 8001aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7a      	ldr	r2, [pc, #488]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b78      	ldr	r3, [pc, #480]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a77      	ldr	r2, [pc, #476]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01d      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xbc>
 8001ace:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a71      	ldr	r2, [pc, #452]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6e      	ldr	r2, [pc, #440]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xd4>
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6a      	ldr	r2, [pc, #424]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b68      	ldr	r3, [pc, #416]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a67      	ldr	r2, [pc, #412]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff f836 	bl	8000b78 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff f832 	bl	8000b78 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	@ 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e200      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0xe4>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff f822 	bl	8000b78 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff f81e 	bl	8000b78 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e1ec      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x10c>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d063      	beq.n	8001c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b66:	4b4c      	ldr	r3, [pc, #304]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b72:	4b49      	ldr	r3, [pc, #292]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x18c>
 8001b7e:	4b46      	ldr	r3, [pc, #280]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d116      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	4b43      	ldr	r3, [pc, #268]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x176>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1c0      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4939      	ldr	r1, [pc, #228]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	e03a      	b.n	8001c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc0:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ffd7 	bl	8000b78 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bce:	f7fe ffd3 	bl	8000b78 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1a1      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4927      	ldr	r1, [pc, #156]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
 8001c00:	e015      	b.n	8001c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c02:	4b26      	ldr	r3, [pc, #152]	@ (8001c9c <HAL_RCC_OscConfig+0x270>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe ffb6 	bl	8000b78 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c10:	f7fe ffb2 	bl	8000b78 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e180      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d03a      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d019      	beq.n	8001c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c48:	f7fe ff96 	bl	8000b78 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7fe ff92 	bl	8000b78 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e160      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f000 faba 	bl	80021e8 <RCC_Delay>
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_RCC_OscConfig+0x274>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7fe ff7c 	bl	8000b78 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c82:	e00f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7fe ff78 	bl	8000b78 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d908      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e146      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	42420000 	.word	0x42420000
 8001ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	4b92      	ldr	r3, [pc, #584]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e9      	bne.n	8001c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80a6 	beq.w	8001e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10d      	bne.n	8001cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b88      	ldr	r3, [pc, #544]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a87      	ldr	r2, [pc, #540]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b85      	ldr	r3, [pc, #532]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cea:	4b82      	ldr	r3, [pc, #520]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d118      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d02:	f7fe ff39 	bl	8000b78 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7fe ff35 	bl	8000b78 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	@ 0x64
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e103      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b75      	ldr	r3, [pc, #468]	@ (8001ef4 <HAL_RCC_OscConfig+0x4c8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x312>
 8001d30:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	e02d      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x334>
 8001d46:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a69      	ldr	r2, [pc, #420]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	4b67      	ldr	r3, [pc, #412]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a66      	ldr	r2, [pc, #408]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
 8001d5e:	e01c      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d10c      	bne.n	8001d82 <HAL_RCC_OscConfig+0x356>
 8001d68:	4b61      	ldr	r3, [pc, #388]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a60      	ldr	r2, [pc, #384]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	e00b      	b.n	8001d9a <HAL_RCC_OscConfig+0x36e>
 8001d82:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a5a      	ldr	r2, [pc, #360]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a57      	ldr	r2, [pc, #348]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d015      	beq.n	8001dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7fe fee9 	bl	8000b78 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7fe fee5 	bl	8000b78 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0b1      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ee      	beq.n	8001daa <HAL_RCC_OscConfig+0x37e>
 8001dcc:	e014      	b.n	8001df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7fe fed3 	bl	8000b78 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7fe fecf 	bl	8000b78 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e09b      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	4b40      	ldr	r3, [pc, #256]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8087 	beq.w	8001f22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e14:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d061      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d146      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	4b33      	ldr	r3, [pc, #204]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7fe fea3 	bl	8000b78 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7fe fe9f 	bl	8000b78 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e06d      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5c:	d108      	bne.n	8001e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4921      	ldr	r1, [pc, #132]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a19      	ldr	r1, [r3, #32]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	430b      	orrs	r3, r1
 8001e82:	491b      	ldr	r1, [pc, #108]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fe73 	bl	8000b78 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe fe6f 	bl	8000b78 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e03d      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x46a>
 8001eb4:	e035      	b.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fe5c 	bl	8000b78 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe fe58 	bl	8000b78 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e026      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x498>
 8001ee2:	e01e      	b.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e019      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_RCC_OscConfig+0x500>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b6a      	ldr	r3, [pc, #424]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b67      	ldr	r3, [pc, #412]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	4965      	ldr	r1, [pc, #404]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b63      	ldr	r3, [pc, #396]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f8c:	4b59      	ldr	r3, [pc, #356]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a58      	ldr	r2, [pc, #352]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa4:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	494d      	ldr	r1, [pc, #308]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d040      	beq.n	8002050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d115      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	4b41      	ldr	r3, [pc, #260]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e073      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e06b      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200e:	4b39      	ldr	r3, [pc, #228]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f023 0203 	bic.w	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4936      	ldr	r1, [pc, #216]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002020:	f7fe fdaa 	bl	8000b78 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	e00a      	b.n	800203e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7fe fda6 	bl	8000b78 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e053      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 020c 	and.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	429a      	cmp	r2, r3
 800204e:	d1eb      	bne.n	8002028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002050:	4b27      	ldr	r3, [pc, #156]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d210      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0207 	bic.w	r2, r3, #7
 8002066:	4922      	ldr	r1, [pc, #136]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e032      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4916      	ldr	r1, [pc, #88]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	490e      	ldr	r1, [pc, #56]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020be:	f000 f821 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	490a      	ldr	r1, [pc, #40]	@ (80020f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	5ccb      	ldrb	r3, [r1, r3]
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <HAL_RCC_ClockConfig+0x1cc>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_RCC_ClockConfig+0x1d0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fd08 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	080037ec 	.word	0x080037ec
 80020fc:	20000024 	.word	0x20000024
 8002100:	20000028 	.word	0x20000028

08002104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x94>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x30>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x36>
 8002132:	e027      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002134:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	e027      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	4a17      	ldr	r2, [pc, #92]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x94>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0c5b      	lsrs	r3, r3, #17
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	4a11      	ldr	r2, [pc, #68]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002166:	fb03 f202 	mul.w	r2, r3, r2
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e004      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a0c      	ldr	r2, [pc, #48]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	613b      	str	r3, [r7, #16]
      break;
 8002182:	e002      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218a:	693b      	ldr	r3, [r7, #16]
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	08003804 	.word	0x08003804
 80021a4:	08003814 	.word	0x08003814
 80021a8:	003d0900 	.word	0x003d0900

080021ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b02      	ldr	r3, [pc, #8]	@ (80021bc <HAL_RCC_GetHCLKFreq+0x10>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	20000024 	.word	0x20000024

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021c4:	f7ff fff2 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	@ (80021e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	080037fc 	.word	0x080037fc

080021e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <RCC_Delay+0x34>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <RCC_Delay+0x38>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002204:	bf00      	nop
  }
  while (Delay --);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	60fa      	str	r2, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <RCC_Delay+0x1c>
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000024 	.word	0x20000024
 8002220:	10624dd3 	.word	0x10624dd3

08002224 <memset>:
 8002224:	4603      	mov	r3, r0
 8002226:	4402      	add	r2, r0
 8002228:	4293      	cmp	r3, r2
 800222a:	d100      	bne.n	800222e <memset+0xa>
 800222c:	4770      	bx	lr
 800222e:	f803 1b01 	strb.w	r1, [r3], #1
 8002232:	e7f9      	b.n	8002228 <memset+0x4>

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	2600      	movs	r6, #0
 8002238:	4d0c      	ldr	r5, [pc, #48]	@ (800226c <__libc_init_array+0x38>)
 800223a:	4c0d      	ldr	r4, [pc, #52]	@ (8002270 <__libc_init_array+0x3c>)
 800223c:	1b64      	subs	r4, r4, r5
 800223e:	10a4      	asrs	r4, r4, #2
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	f000 f81a 	bl	800227c <_init>
 8002248:	2600      	movs	r6, #0
 800224a:	4d0a      	ldr	r5, [pc, #40]	@ (8002274 <__libc_init_array+0x40>)
 800224c:	4c0a      	ldr	r4, [pc, #40]	@ (8002278 <__libc_init_array+0x44>)
 800224e:	1b64      	subs	r4, r4, r5
 8002250:	10a4      	asrs	r4, r4, #2
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	f855 3b04 	ldr.w	r3, [r5], #4
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	f855 3b04 	ldr.w	r3, [r5], #4
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	08003818 	.word	0x08003818
 8002270:	08003818 	.word	0x08003818
 8002274:	08003818 	.word	0x08003818
 8002278:	0800381c 	.word	0x0800381c

0800227c <_init>:
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	bf00      	nop
 8002280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002282:	bc08      	pop	{r3}
 8002284:	469e      	mov	lr, r3
 8002286:	4770      	bx	lr

08002288 <_fini>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	bf00      	nop
 800228c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228e:	bc08      	pop	{r3}
 8002290:	469e      	mov	lr, r3
 8002292:	4770      	bx	lr
