
kryptkey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b1c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e38  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a60  08005a60  0000711c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a68  08005a68  0000711c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a68  08005a68  00006a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08005a70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  2000011c  08005b8c  0000711c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  08005b8c  000076fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000711c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e31  00000000  00000000  00007145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a37  00000000  00000000  0000ef76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  000109b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ae  00000000  00000000  00011260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173bb  00000000  00000000  0001190e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b846  00000000  00000000  00028cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082fda  00000000  00000000  0003450f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b74e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  000b752c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b9d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000011c 	.word	0x2000011c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c10 	.word	0x08003c10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000120 	.word	0x20000120
 8000148:	08003c10 	.word	0x08003c10

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8000170:	b480      	push	{r7}
 8000172:	b089      	sub	sp, #36	@ 0x24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 800017a:	2300      	movs	r3, #0
 800017c:	61fb      	str	r3, [r7, #28]
 800017e:	e030      	b.n	80001e2 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000180:	69fb      	ldr	r3, [r7, #28]
 8000182:	009b      	lsls	r3, r3, #2
 8000184:	683a      	ldr	r2, [r7, #0]
 8000186:	441a      	add	r2, r3
 8000188:	69fb      	ldr	r3, [r7, #28]
 800018a:	009b      	lsls	r3, r3, #2
 800018c:	6879      	ldr	r1, [r7, #4]
 800018e:	440b      	add	r3, r1
 8000190:	7812      	ldrb	r2, [r2, #0]
 8000192:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8000194:	69fb      	ldr	r3, [r7, #28]
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	3301      	adds	r3, #1
 800019a:	683a      	ldr	r2, [r7, #0]
 800019c:	441a      	add	r2, r3
 800019e:	69fb      	ldr	r3, [r7, #28]
 80001a0:	009b      	lsls	r3, r3, #2
 80001a2:	3301      	adds	r3, #1
 80001a4:	6879      	ldr	r1, [r7, #4]
 80001a6:	440b      	add	r3, r1
 80001a8:	7812      	ldrb	r2, [r2, #0]
 80001aa:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80001ac:	69fb      	ldr	r3, [r7, #28]
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	3302      	adds	r3, #2
 80001b2:	683a      	ldr	r2, [r7, #0]
 80001b4:	441a      	add	r2, r3
 80001b6:	69fb      	ldr	r3, [r7, #28]
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	3302      	adds	r3, #2
 80001bc:	6879      	ldr	r1, [r7, #4]
 80001be:	440b      	add	r3, r1
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80001c4:	69fb      	ldr	r3, [r7, #28]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	3303      	adds	r3, #3
 80001ca:	683a      	ldr	r2, [r7, #0]
 80001cc:	441a      	add	r2, r3
 80001ce:	69fb      	ldr	r3, [r7, #28]
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	3303      	adds	r3, #3
 80001d4:	6879      	ldr	r1, [r7, #4]
 80001d6:	440b      	add	r3, r1
 80001d8:	7812      	ldrb	r2, [r2, #0]
 80001da:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 80001dc:	69fb      	ldr	r3, [r7, #28]
 80001de:	3301      	adds	r3, #1
 80001e0:	61fb      	str	r3, [r7, #28]
 80001e2:	69fb      	ldr	r3, [r7, #28]
 80001e4:	2b03      	cmp	r3, #3
 80001e6:	d9cb      	bls.n	8000180 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80001e8:	2304      	movs	r3, #4
 80001ea:	61fb      	str	r3, [r7, #28]
 80001ec:	e081      	b.n	80002f2 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 80001ee:	69fb      	ldr	r3, [r7, #28]
 80001f0:	3b01      	subs	r3, #1
 80001f2:	009b      	lsls	r3, r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 80001f6:	687a      	ldr	r2, [r7, #4]
 80001f8:	69bb      	ldr	r3, [r7, #24]
 80001fa:	4413      	add	r3, r2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8000200:	69bb      	ldr	r3, [r7, #24]
 8000202:	3301      	adds	r3, #1
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	4413      	add	r3, r2
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 800020c:	69bb      	ldr	r3, [r7, #24]
 800020e:	3302      	adds	r3, #2
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	4413      	add	r3, r2
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	3303      	adds	r3, #3
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8000224:	69fb      	ldr	r3, [r7, #28]
 8000226:	f003 0303 	and.w	r3, r3, #3
 800022a:	2b00      	cmp	r3, #0
 800022c:	d125      	bne.n	800027a <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800022e:	7b3b      	ldrb	r3, [r7, #12]
 8000230:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8000232:	7b7b      	ldrb	r3, [r7, #13]
 8000234:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8000236:	7bbb      	ldrb	r3, [r7, #14]
 8000238:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800023e:	7dfb      	ldrb	r3, [r7, #23]
 8000240:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8000242:	7b3b      	ldrb	r3, [r7, #12]
 8000244:	461a      	mov	r2, r3
 8000246:	4b30      	ldr	r3, [pc, #192]	@ (8000308 <KeyExpansion+0x198>)
 8000248:	5c9b      	ldrb	r3, [r3, r2]
 800024a:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	461a      	mov	r2, r3
 8000250:	4b2d      	ldr	r3, [pc, #180]	@ (8000308 <KeyExpansion+0x198>)
 8000252:	5c9b      	ldrb	r3, [r3, r2]
 8000254:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	461a      	mov	r2, r3
 800025a:	4b2b      	ldr	r3, [pc, #172]	@ (8000308 <KeyExpansion+0x198>)
 800025c:	5c9b      	ldrb	r3, [r3, r2]
 800025e:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8000260:	7bfb      	ldrb	r3, [r7, #15]
 8000262:	461a      	mov	r2, r3
 8000264:	4b28      	ldr	r3, [pc, #160]	@ (8000308 <KeyExpansion+0x198>)
 8000266:	5c9b      	ldrb	r3, [r3, r2]
 8000268:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 800026a:	7b3a      	ldrb	r2, [r7, #12]
 800026c:	69fb      	ldr	r3, [r7, #28]
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	4926      	ldr	r1, [pc, #152]	@ (800030c <KeyExpansion+0x19c>)
 8000272:	5ccb      	ldrb	r3, [r1, r3]
 8000274:	4053      	eors	r3, r2
 8000276:	b2db      	uxtb	r3, r3
 8000278:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	613b      	str	r3, [r7, #16]
 8000280:	69fb      	ldr	r3, [r7, #28]
 8000282:	3b04      	subs	r3, #4
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	69bb      	ldr	r3, [r7, #24]
 800028c:	4413      	add	r3, r2
 800028e:	7819      	ldrb	r1, [r3, #0]
 8000290:	7b3a      	ldrb	r2, [r7, #12]
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	4403      	add	r3, r0
 8000298:	404a      	eors	r2, r1
 800029a:	b2d2      	uxtb	r2, r2
 800029c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	3301      	adds	r3, #1
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	7819      	ldrb	r1, [r3, #0]
 80002a8:	7b7a      	ldrb	r2, [r7, #13]
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	3301      	adds	r3, #1
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	4403      	add	r3, r0
 80002b2:	404a      	eors	r2, r1
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	3302      	adds	r3, #2
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	4413      	add	r3, r2
 80002c0:	7819      	ldrb	r1, [r3, #0]
 80002c2:	7bba      	ldrb	r2, [r7, #14]
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	3302      	adds	r3, #2
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	4403      	add	r3, r0
 80002cc:	404a      	eors	r2, r1
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 80002d2:	69bb      	ldr	r3, [r7, #24]
 80002d4:	3303      	adds	r3, #3
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	4413      	add	r3, r2
 80002da:	7819      	ldrb	r1, [r3, #0]
 80002dc:	7bfa      	ldrb	r2, [r7, #15]
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	3303      	adds	r3, #3
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	4403      	add	r3, r0
 80002e6:	404a      	eors	r2, r1
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	3301      	adds	r3, #1
 80002f0:	61fb      	str	r3, [r7, #28]
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	2b2b      	cmp	r3, #43	@ 0x2b
 80002f6:	f67f af7a 	bls.w	80001ee <KeyExpansion+0x7e>
  }
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3724      	adds	r7, #36	@ 0x24
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	08003d18 	.word	0x08003d18
 800030c:	08003f18 	.word	0x08003f18

08000310 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	6839      	ldr	r1, [r7, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff26 	bl	8000170 <KeyExpansion>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 800032c:	b480      	push	{r7}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 800033a:	2300      	movs	r3, #0
 800033c:	75fb      	strb	r3, [r7, #23]
 800033e:	e027      	b.n	8000390 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8000340:	2300      	movs	r3, #0
 8000342:	75bb      	strb	r3, [r7, #22]
 8000344:	e01e      	b.n	8000384 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8000346:	7dfa      	ldrb	r2, [r7, #23]
 8000348:	7dbb      	ldrb	r3, [r7, #22]
 800034a:	68b9      	ldr	r1, [r7, #8]
 800034c:	0092      	lsls	r2, r2, #2
 800034e:	440a      	add	r2, r1
 8000350:	4413      	add	r3, r2
 8000352:	7818      	ldrb	r0, [r3, #0]
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	009a      	lsls	r2, r3, #2
 8000358:	7dfb      	ldrb	r3, [r7, #23]
 800035a:	4413      	add	r3, r2
 800035c:	009a      	lsls	r2, r3, #2
 800035e:	7dbb      	ldrb	r3, [r7, #22]
 8000360:	4413      	add	r3, r2
 8000362:	461a      	mov	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	7819      	ldrb	r1, [r3, #0]
 800036a:	7dfa      	ldrb	r2, [r7, #23]
 800036c:	7dbb      	ldrb	r3, [r7, #22]
 800036e:	4041      	eors	r1, r0
 8000370:	b2c8      	uxtb	r0, r1
 8000372:	68b9      	ldr	r1, [r7, #8]
 8000374:	0092      	lsls	r2, r2, #2
 8000376:	440a      	add	r2, r1
 8000378:	4413      	add	r3, r2
 800037a:	4602      	mov	r2, r0
 800037c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 800037e:	7dbb      	ldrb	r3, [r7, #22]
 8000380:	3301      	adds	r3, #1
 8000382:	75bb      	strb	r3, [r7, #22]
 8000384:	7dbb      	ldrb	r3, [r7, #22]
 8000386:	2b03      	cmp	r3, #3
 8000388:	d9dd      	bls.n	8000346 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 800038a:	7dfb      	ldrb	r3, [r7, #23]
 800038c:	3301      	adds	r3, #1
 800038e:	75fb      	strb	r3, [r7, #23]
 8000390:	7dfb      	ldrb	r3, [r7, #23]
 8000392:	2b03      	cmp	r3, #3
 8000394:	d9d4      	bls.n	8000340 <AddRoundKey+0x14>
    }
  }
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	371c      	adds	r7, #28
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr

080003a2 <xtime>:
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	4603      	mov	r3, r0
 80003aa:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	b25a      	sxtb	r2, r3
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	09db      	lsrs	r3, r3, #7
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	4619      	mov	r1, r3
 80003ba:	0049      	lsls	r1, r1, #1
 80003bc:	440b      	add	r3, r1
 80003be:	4619      	mov	r1, r3
 80003c0:	00c8      	lsls	r0, r1, #3
 80003c2:	4619      	mov	r1, r3
 80003c4:	4603      	mov	r3, r0
 80003c6:	440b      	add	r3, r1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	b25b      	sxtb	r3, r3
 80003cc:	4053      	eors	r3, r2
 80003ce:	b25b      	sxtb	r3, r3
 80003d0:	b2db      	uxtb	r3, r3
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80003dc:	b5b0      	push	{r4, r5, r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e33b      	b.n	8000a62 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80003f2:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	785b      	ldrb	r3, [r3, #1]
 80003fe:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	789b      	ldrb	r3, [r3, #2]
 800040a:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4413      	add	r3, r2
 8000414:	78db      	ldrb	r3, [r3, #3]
 8000416:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000418:	7afb      	ldrb	r3, [r7, #11]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffc1 	bl	80003a2 <xtime>
 8000420:	4603      	mov	r3, r0
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ffbd 	bl	80003a2 <xtime>
 8000428:	4603      	mov	r3, r0
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ffb9 	bl	80003a2 <xtime>
 8000430:	4603      	mov	r3, r0
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ffb5 	bl	80003a2 <xtime>
 8000438:	7abb      	ldrb	r3, [r7, #10]
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ffb1 	bl	80003a2 <xtime>
 8000440:	4603      	mov	r3, r0
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ffad 	bl	80003a2 <xtime>
 8000448:	7abb      	ldrb	r3, [r7, #10]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ffa9 	bl	80003a2 <xtime>
 8000450:	4603      	mov	r3, r0
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ffa5 	bl	80003a2 <xtime>
 8000458:	4603      	mov	r3, r0
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ffa1 	bl	80003a2 <xtime>
 8000460:	4603      	mov	r3, r0
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff9d 	bl	80003a2 <xtime>
 8000468:	7a7b      	ldrb	r3, [r7, #9]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff99 	bl	80003a2 <xtime>
 8000470:	7a7b      	ldrb	r3, [r7, #9]
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff95 	bl	80003a2 <xtime>
 8000478:	4603      	mov	r3, r0
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff91 	bl	80003a2 <xtime>
 8000480:	4603      	mov	r3, r0
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff8d 	bl	80003a2 <xtime>
 8000488:	4603      	mov	r3, r0
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff89 	bl	80003a2 <xtime>
 8000490:	7a3b      	ldrb	r3, [r7, #8]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff85 	bl	80003a2 <xtime>
 8000498:	7a3b      	ldrb	r3, [r7, #8]
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff81 	bl	80003a2 <xtime>
 80004a0:	4603      	mov	r3, r0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff7d 	bl	80003a2 <xtime>
 80004a8:	7a3b      	ldrb	r3, [r7, #8]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff79 	bl	80003a2 <xtime>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ff75 	bl	80003a2 <xtime>
 80004b8:	4603      	mov	r3, r0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff71 	bl	80003a2 <xtime>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff6d 	bl	80003a2 <xtime>
 80004c8:	7afb      	ldrb	r3, [r7, #11]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ff69 	bl	80003a2 <xtime>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461c      	mov	r4, r3
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff63 	bl	80003a2 <xtime>
 80004dc:	4603      	mov	r3, r0
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff5f 	bl	80003a2 <xtime>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4063      	eors	r3, r4
 80004e8:	b2dc      	uxtb	r4, r3
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ff58 	bl	80003a2 <xtime>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff54 	bl	80003a2 <xtime>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff50 	bl	80003a2 <xtime>
 8000502:	4603      	mov	r3, r0
 8000504:	4063      	eors	r3, r4
 8000506:	b2dc      	uxtb	r4, r3
 8000508:	7abb      	ldrb	r3, [r7, #10]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff49 	bl	80003a2 <xtime>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	7abb      	ldrb	r3, [r7, #10]
 8000516:	4053      	eors	r3, r2
 8000518:	b2dd      	uxtb	r5, r3
 800051a:	7abb      	ldrb	r3, [r7, #10]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff40 	bl	80003a2 <xtime>
 8000522:	4603      	mov	r3, r0
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff3c 	bl	80003a2 <xtime>
 800052a:	4603      	mov	r3, r0
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff38 	bl	80003a2 <xtime>
 8000532:	4603      	mov	r3, r0
 8000534:	406b      	eors	r3, r5
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4063      	eors	r3, r4
 800053a:	b2dc      	uxtb	r4, r3
 800053c:	7a7b      	ldrb	r3, [r7, #9]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff2f 	bl	80003a2 <xtime>
 8000544:	4603      	mov	r3, r0
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ff2b 	bl	80003a2 <xtime>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	7a7b      	ldrb	r3, [r7, #9]
 8000552:	4053      	eors	r3, r2
 8000554:	b2dd      	uxtb	r5, r3
 8000556:	7a7b      	ldrb	r3, [r7, #9]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff22 	bl	80003a2 <xtime>
 800055e:	4603      	mov	r3, r0
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff1e 	bl	80003a2 <xtime>
 8000566:	4603      	mov	r3, r0
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff1a 	bl	80003a2 <xtime>
 800056e:	4603      	mov	r3, r0
 8000570:	406b      	eors	r3, r5
 8000572:	b2db      	uxtb	r3, r3
 8000574:	4063      	eors	r3, r4
 8000576:	b2dc      	uxtb	r4, r3
 8000578:	7a3b      	ldrb	r3, [r7, #8]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff11 	bl	80003a2 <xtime>
 8000580:	4603      	mov	r3, r0
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff0d 	bl	80003a2 <xtime>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff09 	bl	80003a2 <xtime>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	7a3b      	ldrb	r3, [r7, #8]
 8000596:	4053      	eors	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4063      	eors	r3, r4
 800059c:	b2d9      	uxtb	r1, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80005a6:	7afb      	ldrb	r3, [r7, #11]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fefa 	bl	80003a2 <xtime>
 80005ae:	7afb      	ldrb	r3, [r7, #11]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fef6 	bl	80003a2 <xtime>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fef2 	bl	80003a2 <xtime>
 80005be:	7afb      	ldrb	r3, [r7, #11]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff feee 	bl	80003a2 <xtime>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff feea 	bl	80003a2 <xtime>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fee6 	bl	80003a2 <xtime>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fee2 	bl	80003a2 <xtime>
 80005de:	7abb      	ldrb	r3, [r7, #10]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fede 	bl	80003a2 <xtime>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff feda 	bl	80003a2 <xtime>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fed6 	bl	80003a2 <xtime>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fed2 	bl	80003a2 <xtime>
 80005fe:	7a7b      	ldrb	r3, [r7, #9]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fece 	bl	80003a2 <xtime>
 8000606:	4603      	mov	r3, r0
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff feca 	bl	80003a2 <xtime>
 800060e:	7a7b      	ldrb	r3, [r7, #9]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fec6 	bl	80003a2 <xtime>
 8000616:	4603      	mov	r3, r0
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fec2 	bl	80003a2 <xtime>
 800061e:	4603      	mov	r3, r0
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff febe 	bl	80003a2 <xtime>
 8000626:	4603      	mov	r3, r0
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff feba 	bl	80003a2 <xtime>
 800062e:	7a3b      	ldrb	r3, [r7, #8]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff feb6 	bl	80003a2 <xtime>
 8000636:	7a3b      	ldrb	r3, [r7, #8]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff feb2 	bl	80003a2 <xtime>
 800063e:	4603      	mov	r3, r0
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff feae 	bl	80003a2 <xtime>
 8000646:	4603      	mov	r3, r0
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff feaa 	bl	80003a2 <xtime>
 800064e:	4603      	mov	r3, r0
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fea6 	bl	80003a2 <xtime>
 8000656:	7afb      	ldrb	r3, [r7, #11]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fea2 	bl	80003a2 <xtime>
 800065e:	4603      	mov	r3, r0
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fe9e 	bl	80003a2 <xtime>
 8000666:	4603      	mov	r3, r0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fe9a 	bl	80003a2 <xtime>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	4053      	eors	r3, r2
 8000676:	b2dc      	uxtb	r4, r3
 8000678:	7abb      	ldrb	r3, [r7, #10]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe91 	bl	80003a2 <xtime>
 8000680:	4603      	mov	r3, r0
 8000682:	461d      	mov	r5, r3
 8000684:	7abb      	ldrb	r3, [r7, #10]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fe8b 	bl	80003a2 <xtime>
 800068c:	4603      	mov	r3, r0
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fe87 	bl	80003a2 <xtime>
 8000694:	4603      	mov	r3, r0
 8000696:	406b      	eors	r3, r5
 8000698:	b2dd      	uxtb	r5, r3
 800069a:	7abb      	ldrb	r3, [r7, #10]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fe80 	bl	80003a2 <xtime>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fe7c 	bl	80003a2 <xtime>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe78 	bl	80003a2 <xtime>
 80006b2:	4603      	mov	r3, r0
 80006b4:	406b      	eors	r3, r5
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4063      	eors	r3, r4
 80006ba:	b2dc      	uxtb	r4, r3
 80006bc:	7a7b      	ldrb	r3, [r7, #9]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fe6f 	bl	80003a2 <xtime>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	7a7b      	ldrb	r3, [r7, #9]
 80006ca:	4053      	eors	r3, r2
 80006cc:	b2dd      	uxtb	r5, r3
 80006ce:	7a7b      	ldrb	r3, [r7, #9]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe66 	bl	80003a2 <xtime>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe62 	bl	80003a2 <xtime>
 80006de:	4603      	mov	r3, r0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fe5e 	bl	80003a2 <xtime>
 80006e6:	4603      	mov	r3, r0
 80006e8:	406b      	eors	r3, r5
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4063      	eors	r3, r4
 80006ee:	b2dc      	uxtb	r4, r3
 80006f0:	7a3b      	ldrb	r3, [r7, #8]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fe55 	bl	80003a2 <xtime>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fe51 	bl	80003a2 <xtime>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	7a3b      	ldrb	r3, [r7, #8]
 8000706:	4053      	eors	r3, r2
 8000708:	b2dd      	uxtb	r5, r3
 800070a:	7a3b      	ldrb	r3, [r7, #8]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fe48 	bl	80003a2 <xtime>
 8000712:	4603      	mov	r3, r0
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fe44 	bl	80003a2 <xtime>
 800071a:	4603      	mov	r3, r0
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fe40 	bl	80003a2 <xtime>
 8000722:	4603      	mov	r3, r0
 8000724:	406b      	eors	r3, r5
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4063      	eors	r3, r4
 800072a:	b2d9      	uxtb	r1, r3
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	460a      	mov	r2, r1
 8000736:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000738:	7afb      	ldrb	r3, [r7, #11]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fe31 	bl	80003a2 <xtime>
 8000740:	7afb      	ldrb	r3, [r7, #11]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fe2d 	bl	80003a2 <xtime>
 8000748:	4603      	mov	r3, r0
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fe29 	bl	80003a2 <xtime>
 8000750:	4603      	mov	r3, r0
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe25 	bl	80003a2 <xtime>
 8000758:	4603      	mov	r3, r0
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fe21 	bl	80003a2 <xtime>
 8000760:	7abb      	ldrb	r3, [r7, #10]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fe1d 	bl	80003a2 <xtime>
 8000768:	7abb      	ldrb	r3, [r7, #10]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fe19 	bl	80003a2 <xtime>
 8000770:	4603      	mov	r3, r0
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fe15 	bl	80003a2 <xtime>
 8000778:	7abb      	ldrb	r3, [r7, #10]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fe11 	bl	80003a2 <xtime>
 8000780:	4603      	mov	r3, r0
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe0d 	bl	80003a2 <xtime>
 8000788:	4603      	mov	r3, r0
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fe09 	bl	80003a2 <xtime>
 8000790:	4603      	mov	r3, r0
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fe05 	bl	80003a2 <xtime>
 8000798:	7a7b      	ldrb	r3, [r7, #9]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fe01 	bl	80003a2 <xtime>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fdfd 	bl	80003a2 <xtime>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fdf9 	bl	80003a2 <xtime>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fdf5 	bl	80003a2 <xtime>
 80007b8:	7a3b      	ldrb	r3, [r7, #8]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fdf1 	bl	80003a2 <xtime>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fded 	bl	80003a2 <xtime>
 80007c8:	7a3b      	ldrb	r3, [r7, #8]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fde9 	bl	80003a2 <xtime>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fde5 	bl	80003a2 <xtime>
 80007d8:	4603      	mov	r3, r0
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fde1 	bl	80003a2 <xtime>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fddd 	bl	80003a2 <xtime>
 80007e8:	7afb      	ldrb	r3, [r7, #11]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fdd9 	bl	80003a2 <xtime>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fdd5 	bl	80003a2 <xtime>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	7afb      	ldrb	r3, [r7, #11]
 80007fe:	4053      	eors	r3, r2
 8000800:	b2dc      	uxtb	r4, r3
 8000802:	7afb      	ldrb	r3, [r7, #11]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fdcc 	bl	80003a2 <xtime>
 800080a:	4603      	mov	r3, r0
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fdc8 	bl	80003a2 <xtime>
 8000812:	4603      	mov	r3, r0
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fdc4 	bl	80003a2 <xtime>
 800081a:	4603      	mov	r3, r0
 800081c:	4063      	eors	r3, r4
 800081e:	b2dc      	uxtb	r4, r3
 8000820:	7abb      	ldrb	r3, [r7, #10]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fdbd 	bl	80003a2 <xtime>
 8000828:	4603      	mov	r3, r0
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fdb9 	bl	80003a2 <xtime>
 8000830:	4603      	mov	r3, r0
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fdb5 	bl	80003a2 <xtime>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	7abb      	ldrb	r3, [r7, #10]
 800083e:	4053      	eors	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4063      	eors	r3, r4
 8000844:	b2dc      	uxtb	r4, r3
 8000846:	7a7b      	ldrb	r3, [r7, #9]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fdaa 	bl	80003a2 <xtime>
 800084e:	4603      	mov	r3, r0
 8000850:	461d      	mov	r5, r3
 8000852:	7a7b      	ldrb	r3, [r7, #9]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fda4 	bl	80003a2 <xtime>
 800085a:	4603      	mov	r3, r0
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fda0 	bl	80003a2 <xtime>
 8000862:	4603      	mov	r3, r0
 8000864:	406b      	eors	r3, r5
 8000866:	b2dd      	uxtb	r5, r3
 8000868:	7a7b      	ldrb	r3, [r7, #9]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fd99 	bl	80003a2 <xtime>
 8000870:	4603      	mov	r3, r0
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fd95 	bl	80003a2 <xtime>
 8000878:	4603      	mov	r3, r0
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fd91 	bl	80003a2 <xtime>
 8000880:	4603      	mov	r3, r0
 8000882:	406b      	eors	r3, r5
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4063      	eors	r3, r4
 8000888:	b2dc      	uxtb	r4, r3
 800088a:	7a3b      	ldrb	r3, [r7, #8]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fd88 	bl	80003a2 <xtime>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	7a3b      	ldrb	r3, [r7, #8]
 8000898:	4053      	eors	r3, r2
 800089a:	b2dd      	uxtb	r5, r3
 800089c:	7a3b      	ldrb	r3, [r7, #8]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fd7f 	bl	80003a2 <xtime>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fd7b 	bl	80003a2 <xtime>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fd77 	bl	80003a2 <xtime>
 80008b4:	4603      	mov	r3, r0
 80008b6:	406b      	eors	r3, r5
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4063      	eors	r3, r4
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	460a      	mov	r2, r1
 80008c8:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80008ca:	7afb      	ldrb	r3, [r7, #11]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fd68 	bl	80003a2 <xtime>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fd64 	bl	80003a2 <xtime>
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fd60 	bl	80003a2 <xtime>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fd5c 	bl	80003a2 <xtime>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fd58 	bl	80003a2 <xtime>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fd54 	bl	80003a2 <xtime>
 80008fa:	7abb      	ldrb	r3, [r7, #10]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fd50 	bl	80003a2 <xtime>
 8000902:	7abb      	ldrb	r3, [r7, #10]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fd4c 	bl	80003a2 <xtime>
 800090a:	4603      	mov	r3, r0
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fd48 	bl	80003a2 <xtime>
 8000912:	4603      	mov	r3, r0
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fd44 	bl	80003a2 <xtime>
 800091a:	4603      	mov	r3, r0
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fd40 	bl	80003a2 <xtime>
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fd3c 	bl	80003a2 <xtime>
 800092a:	7a7b      	ldrb	r3, [r7, #9]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fd38 	bl	80003a2 <xtime>
 8000932:	4603      	mov	r3, r0
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fd34 	bl	80003a2 <xtime>
 800093a:	7a7b      	ldrb	r3, [r7, #9]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fd30 	bl	80003a2 <xtime>
 8000942:	4603      	mov	r3, r0
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fd2c 	bl	80003a2 <xtime>
 800094a:	4603      	mov	r3, r0
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fd28 	bl	80003a2 <xtime>
 8000952:	4603      	mov	r3, r0
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fd24 	bl	80003a2 <xtime>
 800095a:	7a3b      	ldrb	r3, [r7, #8]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fd20 	bl	80003a2 <xtime>
 8000962:	4603      	mov	r3, r0
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fd1c 	bl	80003a2 <xtime>
 800096a:	4603      	mov	r3, r0
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fd18 	bl	80003a2 <xtime>
 8000972:	4603      	mov	r3, r0
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fd14 	bl	80003a2 <xtime>
 800097a:	7afb      	ldrb	r3, [r7, #11]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fd10 	bl	80003a2 <xtime>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	7afb      	ldrb	r3, [r7, #11]
 8000988:	4053      	eors	r3, r2
 800098a:	b2dc      	uxtb	r4, r3
 800098c:	7afb      	ldrb	r3, [r7, #11]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fd07 	bl	80003a2 <xtime>
 8000994:	4603      	mov	r3, r0
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fd03 	bl	80003a2 <xtime>
 800099c:	4603      	mov	r3, r0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fcff 	bl	80003a2 <xtime>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4063      	eors	r3, r4
 80009a8:	b2dc      	uxtb	r4, r3
 80009aa:	7abb      	ldrb	r3, [r7, #10]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fcf8 	bl	80003a2 <xtime>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fcf4 	bl	80003a2 <xtime>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	7abb      	ldrb	r3, [r7, #10]
 80009c0:	4053      	eors	r3, r2
 80009c2:	b2dd      	uxtb	r5, r3
 80009c4:	7abb      	ldrb	r3, [r7, #10]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fceb 	bl	80003a2 <xtime>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fce7 	bl	80003a2 <xtime>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fce3 	bl	80003a2 <xtime>
 80009dc:	4603      	mov	r3, r0
 80009de:	406b      	eors	r3, r5
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4063      	eors	r3, r4
 80009e4:	b2dc      	uxtb	r4, r3
 80009e6:	7a7b      	ldrb	r3, [r7, #9]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fcda 	bl	80003a2 <xtime>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fcd6 	bl	80003a2 <xtime>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fcd2 	bl	80003a2 <xtime>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	7a7b      	ldrb	r3, [r7, #9]
 8000a04:	4053      	eors	r3, r2
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4063      	eors	r3, r4
 8000a0a:	b2dc      	uxtb	r4, r3
 8000a0c:	7a3b      	ldrb	r3, [r7, #8]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fcc7 	bl	80003a2 <xtime>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461d      	mov	r5, r3
 8000a18:	7a3b      	ldrb	r3, [r7, #8]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fcc1 	bl	80003a2 <xtime>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fcbd 	bl	80003a2 <xtime>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	406b      	eors	r3, r5
 8000a2c:	b2dd      	uxtb	r5, r3
 8000a2e:	7a3b      	ldrb	r3, [r7, #8]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fcb6 	bl	80003a2 <xtime>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fcb2 	bl	80003a2 <xtime>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fcae 	bl	80003a2 <xtime>
 8000a46:	4603      	mov	r3, r0
 8000a48:	406b      	eors	r3, r5
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4063      	eors	r3, r4
 8000a4e:	b2d9      	uxtb	r1, r3
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	460a      	mov	r2, r1
 8000a5a:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	f77f acc0 	ble.w	80003ea <InvMixColumns+0xe>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}

08000a74 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e01d      	b.n	8000abe <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8000a82:	2300      	movs	r3, #0
 8000a84:	73bb      	strb	r3, [r7, #14]
 8000a86:	e014      	b.n	8000ab2 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000a88:	7bba      	ldrb	r2, [r7, #14]
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	440a      	add	r2, r1
 8000a92:	4413      	add	r3, r2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	7bba      	ldrb	r2, [r7, #14]
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	490c      	ldr	r1, [pc, #48]	@ (8000ad0 <InvSubBytes+0x5c>)
 8000a9e:	5c08      	ldrb	r0, [r1, r0]
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	440a      	add	r2, r1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	73bb      	strb	r3, [r7, #14]
 8000ab2:	7bbb      	ldrb	r3, [r7, #14]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d9e7      	bls.n	8000a88 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	3301      	adds	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9de      	bls.n	8000a82 <InvSubBytes+0xe>
    }
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	08003e18 	.word	0x08003e18

08000ad4 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7b5b      	ldrb	r3, [r3, #13]
 8000ae0:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7a5a      	ldrb	r2, [r3, #9]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	795a      	ldrb	r2, [r3, #5]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	785a      	ldrb	r2, [r3, #1]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7bfa      	ldrb	r2, [r7, #15]
 8000afe:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7a9a      	ldrb	r2, [r3, #10]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7bfa      	ldrb	r2, [r7, #15]
 8000b12:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	799b      	ldrb	r3, [r3, #6]
 8000b18:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7b9a      	ldrb	r2, [r3, #14]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7bfa      	ldrb	r2, [r7, #15]
 8000b26:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	78db      	ldrb	r3, [r3, #3]
 8000b2c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	79da      	ldrb	r2, [r3, #7]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7ada      	ldrb	r2, [r3, #11]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7bda      	ldrb	r2, [r3, #15]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7bfa      	ldrb	r2, [r7, #15]
 8000b4a:	73da      	strb	r2, [r3, #15]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <InvCipher>:
  AddRoundKey(Nr, state, RoundKey);
}

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	200a      	movs	r0, #10
 8000b6a:	f7ff fbdf 	bl	800032c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8000b6e:	2309      	movs	r3, #9
 8000b70:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffae 	bl	8000ad4 <InvShiftRows>
    InvSubBytes(state);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff7b 	bl	8000a74 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fbd1 	bl	800032c <AddRoundKey>
    if (round == 0) {
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fc23 	bl	80003dc <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8000b9c:	e7e9      	b.n	8000b72 <InvCipher+0x1c>
      break;
 8000b9e:	bf00      	nop
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <AES_ECB_decrypt>:
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
}

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6838      	ldr	r0, [r7, #0]
 8000bb8:	f7ff ffcd 	bl	8000b56 <InvCipher>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc8:	f000 ffae 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */
  // No user code here
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bcc:	f000 f818 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // No user code here
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd0:	f000 f88a 	bl	8000ce8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bd4:	f000 f85a 	bl	8000c8c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();  // Initialize the OLED display
 8000bd8:	f000 fcac 	bl	8001534 <ssd1306_Init>
  display_login_screen();  // Show the login screen
 8000bdc:	f000 fb34 	bl	8001248 <display_login_screen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (current_state == STATE_LOGIN) {
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <main+0x38>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <main+0x2a>
        handle_login_buttons();  // Handle login input
 8000be8:	f000 fb7e 	bl	80012e8 <handle_login_buttons>
 8000bec:	e001      	b.n	8000bf2 <main+0x2e>
    } else {
        check_buttons();  // Poll buttons for menu navigation
 8000bee:	f000 fad1 	bl	8001194 <check_buttons>
    }
    HAL_Delay(5);   // Add delay to avoid button bouncing
 8000bf2:	2005      	movs	r0, #5
 8000bf4:	f000 fffa 	bl	8001bec <HAL_Delay>
    if (current_state == STATE_LOGIN) {
 8000bf8:	e7f2      	b.n	8000be0 <main+0x1c>
 8000bfa:	bf00      	nop
 8000bfc:	20000190 	.word	0x20000190

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	@ 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	@ 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fb74 	bl	80032fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000c2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c36:	2302      	movs	r3, #2
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c40:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 ff1e 	bl	8002a8c <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000c56:	f000 fc2f 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2102      	movs	r1, #2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 f98b 	bl	8002f90 <HAL_RCC_ClockConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c80:	f000 fc1a 	bl	80014b8 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	3740      	adds	r7, #64	@ 0x40
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <MX_I2C1_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000c98:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <MX_I2C1_Init+0x58>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cca:	f001 fa33 	bl	8002134 <HAL_I2C_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 fbf0 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000138 	.word	0x20000138
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	00061a80 	.word	0x00061a80

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a18      	ldr	r2, [pc, #96]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0320 	and.w	r3, r3, #32
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <MX_GPIO_Init+0x7c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d44:	2370      	movs	r3, #112	@ 0x70
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_GPIO_Init+0x80>)
 8000d58:	f001 f850 	bl	8001dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010800 	.word	0x40010800

08000d6c <display_menu>:

/* USER CODE BEGIN 4 */

/* Display the menu of account names with scrolling */
void display_menu() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);  // Clear the screen
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 fc48 	bl	8001608 <ssd1306_Fill>

    int menu_size = sizeof(account_names) / sizeof(account_names[0]);
 8000d78:	2308      	movs	r3, #8
 8000d7a:	60bb      	str	r3, [r7, #8]
    int window_size = 4;  // Number of items that can fit on the screen
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
    int half_window = window_size / 2;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	0fda      	lsrs	r2, r3, #31
 8000d84:	4413      	add	r3, r2
 8000d86:	105b      	asrs	r3, r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
    int start_index;

    // Adjust start_index based on current_selection to ensure it is always visible
    if (menu_size <= window_size) {
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dc04      	bgt.n	8000d9c <display_menu+0x30>
        // All items fit on the screen
        start_index = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
        window_size = menu_size;  // Adjust window_size if fewer items
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e019      	b.n	8000dd0 <display_menu+0x64>
    } else if (current_selection <= half_window) {
 8000d9c:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <display_menu+0xd0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	db02      	blt.n	8000dac <display_menu+0x40>
        // Near the top of the list
        start_index = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	e011      	b.n	8000dd0 <display_menu+0x64>
    } else if (current_selection >= menu_size - half_window - 1) {
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	1e5a      	subs	r2, r3, #1
 8000db4:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <display_menu+0xd0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dc04      	bgt.n	8000dc6 <display_menu+0x5a>
        // Near the bottom of the list
        start_index = menu_size - window_size;
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	e004      	b.n	8000dd0 <display_menu+0x64>
    } else {
        // Middle of the list
        start_index = current_selection - half_window;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <display_menu+0xd0>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	613b      	str	r3, [r7, #16]
    }

    // Display the menu items within the window
    for (int i = 0; i < window_size; i++) {
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e028      	b.n	8000e28 <display_menu+0xbc>
        int item_index = start_index + i;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	603b      	str	r3, [r7, #0]
        ssd1306_SetCursor(2, i * 16);  // Set Y position for each line
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	2002      	movs	r0, #2
 8000dea:	f000 fd55 	bl	8001898 <ssd1306_SetCursor>

        if (item_index == current_selection) {
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <display_menu+0xd0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d10a      	bne.n	8000e0e <display_menu+0xa2>
            ssd1306_WriteString(account_names[item_index], Font_11x18, White);  // Highlight selected item
 8000df8:	4a11      	ldr	r2, [pc, #68]	@ (8000e40 <display_menu+0xd4>)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <display_menu+0xd8>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	9200      	str	r2, [sp, #0]
 8000e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e08:	f000 fd20 	bl	800184c <ssd1306_WriteString>
 8000e0c:	e009      	b.n	8000e22 <display_menu+0xb6>
        } else {
            ssd1306_WriteString(account_names[item_index], Font_7x10, White);
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <display_menu+0xd4>)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <display_menu+0xdc>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1e:	f000 fd15 	bl	800184c <ssd1306_WriteString>
    for (int i = 0; i < window_size; i++) {
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbd2      	blt.n	8000dd6 <display_menu+0x6a>
        }
    }
    ssd1306_UpdateScreen();  // Send buffer to display
 8000e30:	f000 fc02 	bl	8001638 <ssd1306_UpdateScreen>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000018c 	.word	0x2000018c
 8000e40:	20000000 	.word	0x20000000
 8000e44:	080059f4 	.word	0x080059f4
 8000e48:	080059e8 	.word	0x080059e8

08000e4c <navigate_menu>:

/* Handle menu navigation based on button input */
void navigate_menu(int direction) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    int menu_size = sizeof(account_names) / sizeof(account_names[0]);
 8000e54:	2308      	movs	r3, #8
 8000e56:	60fb      	str	r3, [r7, #12]
    current_selection += direction;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <navigate_menu+0x48>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a0c      	ldr	r2, [pc, #48]	@ (8000e94 <navigate_menu+0x48>)
 8000e62:	6013      	str	r3, [r2, #0]
    if (current_selection < 0) {
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <navigate_menu+0x48>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da04      	bge.n	8000e76 <navigate_menu+0x2a>
        current_selection = menu_size - 1;  // Wrap to bottom
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	4a08      	ldr	r2, [pc, #32]	@ (8000e94 <navigate_menu+0x48>)
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e007      	b.n	8000e86 <navigate_menu+0x3a>
    } else if (current_selection >= menu_size) {
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <navigate_menu+0x48>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dc02      	bgt.n	8000e86 <navigate_menu+0x3a>
        current_selection = 0;  // Wrap to top
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <navigate_menu+0x48>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
    }
    display_menu();  // Update the display
 8000e86:	f7ff ff71 	bl	8000d6c <display_menu>
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000018c 	.word	0x2000018c

08000e98 <handle_enter_button>:

/* Toggle between menu and account details */
void handle_enter_button() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    if (current_state == STATE_MENU) {
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <handle_enter_button+0x34>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d108      	bne.n	8000eb6 <handle_enter_button+0x1e>
        // Switch to showing account details
        show_account_details(current_selection);
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <handle_enter_button+0x38>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f813 	bl	8000ed4 <show_account_details>
        current_state = STATE_DETAILS;
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <handle_enter_button+0x34>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
    } else if (current_state == STATE_DETAILS) {
        // Switch back to the menu
        display_menu();
        current_state = STATE_MENU;
    }
}
 8000eb4:	e008      	b.n	8000ec8 <handle_enter_button+0x30>
    } else if (current_state == STATE_DETAILS) {
 8000eb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <handle_enter_button+0x34>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d104      	bne.n	8000ec8 <handle_enter_button+0x30>
        display_menu();
 8000ebe:	f7ff ff55 	bl	8000d6c <display_menu>
        current_state = STATE_MENU;
 8000ec2:	4b02      	ldr	r3, [pc, #8]	@ (8000ecc <handle_enter_button+0x34>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000190 	.word	0x20000190
 8000ed0:	2000018c 	.word	0x2000018c

08000ed4 <show_account_details>:

/* Display account details when selected */
void show_account_details(int index) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0f2      	sub	sp, #456	@ 0x1c8
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000ede:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8000ee2:	6018      	str	r0, [r3, #0]
    uint8_t key[16];
    derive_key_from_pin(pin_input, key);
 8000ee4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8000ee8:	4619      	mov	r1, r3
 8000eea:	48a4      	ldr	r0, [pc, #656]	@ (800117c <show_account_details+0x2a8>)
 8000eec:	f000 faba 	bl	8001464 <derive_key_from_pin>

    size_t encrypted_length = ENCRYPTED_PASSWORD_LENGTH;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    uint8_t decrypted_password[128];
    memcpy(decrypted_password, encrypted_passwords[index], encrypted_length);
 8000ef6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000efa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	4a9f      	ldr	r2, [pc, #636]	@ (8001180 <show_account_details+0x2ac>)
 8000f04:	1899      	adds	r1, r3, r2
 8000f06:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000f0a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fa3c 	bl	800338c <memcpy>

    struct AES_ctx ctx;
    AES_init_ctx(&ctx, key);
 8000f14:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 8000f18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f9f6 	bl	8000310 <AES_init_ctx>

    // Decrypt the password in ECB mode
    for (size_t i = 0; i < encrypted_length; i += 16) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000f2a:	e00f      	b.n	8000f4c <show_account_details+0x78>
        AES_ECB_decrypt(&ctx, decrypted_password + i);
 8000f2c:	f107 02fc 	add.w	r2, r7, #252	@ 0xfc
 8000f30:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000f34:	441a      	add	r2, r3
 8000f36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe33 	bl	8000ba8 <AES_ECB_decrypt>
    for (size_t i = 0; i < encrypted_length; i += 16) {
 8000f42:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000f46:	3310      	adds	r3, #16
 8000f48:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000f4c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d3e9      	bcc.n	8000f2c <show_account_details+0x58>
    }

    // Remove padding (PKCS#7)
    size_t pad_len = decrypted_password[encrypted_length - 1];
 8000f58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8000f62:	443b      	add	r3, r7
 8000f64:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 8000f68:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    size_t decrypted_length = encrypted_length - pad_len;
 8000f6c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8000f70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

    // Ensure the decrypted password is null-terminated
    decrypted_password[decrypted_length] = '\0';
 8000f7a:	f107 02fc 	add.w	r2, r7, #252	@ 0xfc
 8000f7e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000f82:	4413      	add	r3, r2
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]

    // Display the decrypted password
    ssd1306_Fill(Black);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 fb3d 	bl	8001608 <ssd1306_Fill>

    int max_chars_per_line = 21;  // For Font_6x8
 8000f8e:	2315      	movs	r3, #21
 8000f90:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    int y = 0;  // Starting Y position
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    // Display "Username:"
    ssd1306_SetCursor(2, y);
 8000f9a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 fc78 	bl	8001898 <ssd1306_SetCursor>
    ssd1306_WriteString("Username:", Font_6x8, White);
 8000fa8:	4b76      	ldr	r3, [pc, #472]	@ (8001184 <show_account_details+0x2b0>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	9200      	str	r2, [sp, #0]
 8000fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb0:	4875      	ldr	r0, [pc, #468]	@ (8001188 <show_account_details+0x2b4>)
 8000fb2:	f000 fc4b 	bl	800184c <ssd1306_WriteString>
    y += 8;  // Move to next line
 8000fb6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000fba:	3308      	adds	r3, #8
 8000fbc:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    // Display the username with wrapping
    const char* username = usernames[index];
 8000fc0:	4a72      	ldr	r2, [pc, #456]	@ (800118c <show_account_details+0x2b8>)
 8000fc2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000fc6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    int username_len = strlen(username);
 8000fd4:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8000fd8:	f7ff f8c2 	bl	8000160 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    int start = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    while (start < username_len && y < 64) {  // Ensure we don't exceed the display height
 8000fe8:	e040      	b.n	800106c <show_account_details+0x198>
        char line[22];  // max_chars_per_line + 1 for null terminator
        int line_length = username_len - start;
 8000fea:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000fee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
        if (line_length > max_chars_per_line) {
 8000ff8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8000ffc:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001000:	429a      	cmp	r2, r3
 8001002:	dd03      	ble.n	800100c <show_account_details+0x138>
            line_length = max_chars_per_line;
 8001004:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001008:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
        }
        strncpy(line, username + start, line_length);
 800100c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001010:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001014:	18d1      	adds	r1, r2, r3
 8001016:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 800101a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101e:	4618      	mov	r0, r3
 8001020:	f002 f974 	bl	800330c <strncpy>
        line[line_length] = '\0';
 8001024:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001028:	f5a3 72ce 	sub.w	r2, r3, #412	@ 0x19c
 800102c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001030:	4413      	add	r3, r2
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
        ssd1306_SetCursor(2, y);
 8001036:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4619      	mov	r1, r3
 800103e:	2002      	movs	r0, #2
 8001040:	f000 fc2a 	bl	8001898 <ssd1306_SetCursor>
        ssd1306_WriteString(line, Font_6x8, White);
 8001044:	4b4f      	ldr	r3, [pc, #316]	@ (8001184 <show_account_details+0x2b0>)
 8001046:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800104a:	2201      	movs	r2, #1
 800104c:	9200      	str	r2, [sp, #0]
 800104e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001050:	f000 fbfc 	bl	800184c <ssd1306_WriteString>
        y += 8;  // Move to next line
 8001054:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001058:	3308      	adds	r3, #8
 800105a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
        start += line_length;
 800105e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001062:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001066:	4413      	add	r3, r2
 8001068:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    while (start < username_len && y < 64) {  // Ensure we don't exceed the display height
 800106c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001070:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001074:	429a      	cmp	r2, r3
 8001076:	da03      	bge.n	8001080 <show_account_details+0x1ac>
 8001078:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800107c:	2b3f      	cmp	r3, #63	@ 0x3f
 800107e:	ddb4      	ble.n	8000fea <show_account_details+0x116>
    }

    // Leave a blank line before "Password:"
    y += 4;
 8001080:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001084:	3304      	adds	r3, #4
 8001086:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    // Display "Password:"
    if (y < 64) {
 800108a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800108e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001090:	dc12      	bgt.n	80010b8 <show_account_details+0x1e4>
        ssd1306_SetCursor(2, y);
 8001092:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4619      	mov	r1, r3
 800109a:	2002      	movs	r0, #2
 800109c:	f000 fbfc 	bl	8001898 <ssd1306_SetCursor>
        ssd1306_WriteString("Password:", Font_6x8, White);
 80010a0:	4b38      	ldr	r3, [pc, #224]	@ (8001184 <show_account_details+0x2b0>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a8:	4839      	ldr	r0, [pc, #228]	@ (8001190 <show_account_details+0x2bc>)
 80010aa:	f000 fbcf 	bl	800184c <ssd1306_WriteString>
        y += 8;
 80010ae:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80010b2:	3308      	adds	r3, #8
 80010b4:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    }

    // Display the password with wrapping
    char* password = (char*)decrypted_password;
 80010b8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80010bc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    int password_len = strlen(password);
 80010c0:	f8d7 0190 	ldr.w	r0, [r7, #400]	@ 0x190
 80010c4:	f7ff f84c 	bl	8000160 <strlen>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    start = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    while (start < password_len && y < 64) {
 80010d4:	e040      	b.n	8001158 <show_account_details+0x284>
        char line[22];  // max_chars_per_line + 1
        int line_length = password_len - start;
 80010d6:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80010da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        if (line_length > max_chars_per_line) {
 80010e4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80010e8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dd03      	ble.n	80010f8 <show_account_details+0x224>
            line_length = max_chars_per_line;
 80010f0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80010f4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        }
        strncpy(line, password + start, line_length);
 80010f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80010fc:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8001100:	18d1      	adds	r1, r2, r3
 8001102:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4618      	mov	r0, r3
 800110c:	f002 f8fe 	bl	800330c <strncpy>
        line[line_length] = '\0';
 8001110:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001114:	f5a3 72da 	sub.w	r2, r3, #436	@ 0x1b4
 8001118:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800111c:	4413      	add	r3, r2
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
        ssd1306_SetCursor(2, y);
 8001122:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	2002      	movs	r0, #2
 800112c:	f000 fbb4 	bl	8001898 <ssd1306_SetCursor>
        ssd1306_WriteString(line, Font_6x8, White);
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <show_account_details+0x2b0>)
 8001132:	f107 000c 	add.w	r0, r7, #12
 8001136:	2201      	movs	r2, #1
 8001138:	9200      	str	r2, [sp, #0]
 800113a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113c:	f000 fb86 	bl	800184c <ssd1306_WriteString>
        y += 8;  // Move to next line
 8001140:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001144:	3308      	adds	r3, #8
 8001146:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
        start += line_length;
 800114a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800114e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001152:	4413      	add	r3, r2
 8001154:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    while (start < password_len && y < 64) {
 8001158:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800115c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001160:	429a      	cmp	r2, r3
 8001162:	da03      	bge.n	800116c <show_account_details+0x298>
 8001164:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001168:	2b3f      	cmp	r3, #63	@ 0x3f
 800116a:	ddb4      	ble.n	80010d6 <show_account_details+0x202>
    }

    ssd1306_UpdateScreen();
 800116c:	f000 fa64 	bl	8001638 <ssd1306_UpdateScreen>
}
 8001170:	bf00      	nop
 8001172:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000194 	.word	0x20000194
 8001180:	20000040 	.word	0x20000040
 8001184:	080059dc 	.word	0x080059dc
 8001188:	08003cd8 	.word	0x08003cd8
 800118c:	20000020 	.word	0x20000020
 8001190:	08003ce4 	.word	0x08003ce4

08001194 <check_buttons>:

/* Check the state of buttons and navigate the menu */
void check_buttons() {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    if (debounce_button(GPIOA, GPIO_PIN_4)) {
 8001198:	2110      	movs	r1, #16
 800119a:	4814      	ldr	r0, [pc, #80]	@ (80011ec <check_buttons+0x58>)
 800119c:	f000 f82a 	bl	80011f4 <debounce_button>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <check_buttons+0x22>
        if (current_state == STATE_MENU) {
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <check_buttons+0x5c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d11c      	bne.n	80011e8 <check_buttons+0x54>
            navigate_menu(1);  // Move up in the list
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fe4c 	bl	8000e4c <navigate_menu>
            navigate_menu(-1);   // Move down in the list
        }
    } else if (debounce_button(GPIOA, GPIO_PIN_6)) {
        handle_enter_button();  // Toggle between the menu and account details
    }
}
 80011b4:	e018      	b.n	80011e8 <check_buttons+0x54>
    } else if (debounce_button(GPIOA, GPIO_PIN_5)) {
 80011b6:	2120      	movs	r1, #32
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <check_buttons+0x58>)
 80011ba:	f000 f81b 	bl	80011f4 <debounce_button>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <check_buttons+0x42>
        if (current_state == STATE_MENU) {
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <check_buttons+0x5c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d10d      	bne.n	80011e8 <check_buttons+0x54>
            navigate_menu(-1);   // Move down in the list
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff fe3c 	bl	8000e4c <navigate_menu>
}
 80011d4:	e008      	b.n	80011e8 <check_buttons+0x54>
    } else if (debounce_button(GPIOA, GPIO_PIN_6)) {
 80011d6:	2140      	movs	r1, #64	@ 0x40
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <check_buttons+0x58>)
 80011da:	f000 f80b 	bl	80011f4 <debounce_button>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <check_buttons+0x54>
        handle_enter_button();  // Toggle between the menu and account details
 80011e4:	f7ff fe58 	bl	8000e98 <handle_enter_button>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010800 	.word	0x40010800
 80011f0:	20000190 	.word	0x20000190

080011f4 <debounce_button>:

/* Debounce button presses */
uint8_t debounce_button(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
    if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	4619      	mov	r1, r3
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 ff7d 	bl	8002104 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d115      	bne.n	800123c <debounce_button+0x48>
        HAL_Delay(DEBOUNCE_DELAY);  // Wait for debounce time
 8001210:	2014      	movs	r0, #20
 8001212:	f000 fceb 	bl	8001bec <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 ff72 	bl	8002104 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10a      	bne.n	800123c <debounce_button+0x48>
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET);  // Wait until button is released
 8001226:	bf00      	nop
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 ff69 	bl	8002104 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b01      	cmp	r3, #1
 8001236:	d0f7      	beq.n	8001228 <debounce_button+0x34>
            return 1;  // Button is confirmed pressed
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <debounce_button+0x4a>
        }
    }
    return 0;  // Button is not pressed
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <display_login_screen>:

/* Display the login screen */
void display_login_screen() {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);  // Clear the screen
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f9da 	bl	8001608 <ssd1306_Fill>

    ssd1306_SetCursor(2, 0);
 8001254:	2100      	movs	r1, #0
 8001256:	2002      	movs	r0, #2
 8001258:	f000 fb1e 	bl	8001898 <ssd1306_SetCursor>
    ssd1306_WriteString("Enter PIN:", Font_11x18, White);
 800125c:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <display_login_screen+0x88>)
 800125e:	2201      	movs	r2, #1
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001264:	481b      	ldr	r0, [pc, #108]	@ (80012d4 <display_login_screen+0x8c>)
 8001266:	f000 faf1 	bl	800184c <ssd1306_WriteString>

    // Display the PIN digits
    char pin_display[10];
    sprintf(pin_display, "%d %d %d", pin_input[0], pin_input[1], pin_input[2]);
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <display_login_screen+0x90>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <display_login_screen+0x90>)
 8001270:	6859      	ldr	r1, [r3, #4]
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <display_login_screen+0x90>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	1d38      	adds	r0, r7, #4
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	460b      	mov	r3, r1
 800127c:	4917      	ldr	r1, [pc, #92]	@ (80012dc <display_login_screen+0x94>)
 800127e:	f002 f803 	bl	8003288 <siprintf>

    ssd1306_SetCursor(2, 24);
 8001282:	2118      	movs	r1, #24
 8001284:	2002      	movs	r0, #2
 8001286:	f000 fb07 	bl	8001898 <ssd1306_SetCursor>
    ssd1306_WriteString(pin_display, Font_11x18, White);
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <display_login_screen+0x88>)
 800128c:	1d38      	adds	r0, r7, #4
 800128e:	2201      	movs	r2, #1
 8001290:	9200      	str	r2, [sp, #0]
 8001292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001294:	f000 fada 	bl	800184c <ssd1306_WriteString>

    // Underline the current digit
    ssd1306_SetCursor(2 + pin_index * 24, 44);  // Adjust position based on digit index
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <display_login_screen+0x98>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	0052      	lsls	r2, r2, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	3302      	adds	r3, #2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	212c      	movs	r1, #44	@ 0x2c
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 faf2 	bl	8001898 <ssd1306_SetCursor>
    ssd1306_WriteString("^", Font_11x18, White);
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <display_login_screen+0x88>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	9200      	str	r2, [sp, #0]
 80012ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <display_login_screen+0x9c>)
 80012be:	f000 fac5 	bl	800184c <ssd1306_WriteString>

    ssd1306_UpdateScreen();  // Send buffer to display
 80012c2:	f000 f9b9 	bl	8001638 <ssd1306_UpdateScreen>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	080059f4 	.word	0x080059f4
 80012d4:	08003cf0 	.word	0x08003cf0
 80012d8:	20000194 	.word	0x20000194
 80012dc:	08003cfc 	.word	0x08003cfc
 80012e0:	200001a0 	.word	0x200001a0
 80012e4:	08003d08 	.word	0x08003d08

080012e8 <handle_login_buttons>:

/* Handle button inputs on the login screen */
void handle_login_buttons() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0c8      	sub	sp, #288	@ 0x120
 80012ec:	af00      	add	r7, sp, #0
    if (debounce_button(GPIOA, GPIO_PIN_4)) {
 80012ee:	2110      	movs	r1, #16
 80012f0:	4854      	ldr	r0, [pc, #336]	@ (8001444 <handle_login_buttons+0x15c>)
 80012f2:	f7ff ff7f 	bl	80011f4 <debounce_button>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d018      	beq.n	800132e <handle_login_buttons+0x46>
        // Increase current digit
        pin_input[pin_index] = (pin_input[pin_index] + 1) % 10;  // Digits 0-9
 80012fc:	4b52      	ldr	r3, [pc, #328]	@ (8001448 <handle_login_buttons+0x160>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a52      	ldr	r2, [pc, #328]	@ (800144c <handle_login_buttons+0x164>)
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	4b4f      	ldr	r3, [pc, #316]	@ (8001448 <handle_login_buttons+0x160>)
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	4b50      	ldr	r3, [pc, #320]	@ (8001450 <handle_login_buttons+0x168>)
 800130e:	fb83 2301 	smull	r2, r3, r3, r1
 8001312:	109a      	asrs	r2, r3, #2
 8001314:	17cb      	asrs	r3, r1, #31
 8001316:	1ad2      	subs	r2, r2, r3
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	1aca      	subs	r2, r1, r3
 8001322:	4b4a      	ldr	r3, [pc, #296]	@ (800144c <handle_login_buttons+0x164>)
 8001324:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        display_login_screen();
 8001328:	f7ff ff8e 	bl	8001248 <display_login_screen>
            pin_input[2] = 0;
            pin_index = 0;
            display_login_screen();
        }
    }
}
 800132c:	e085      	b.n	800143a <handle_login_buttons+0x152>
    } else if (debounce_button(GPIOA, GPIO_PIN_5)) {
 800132e:	2120      	movs	r1, #32
 8001330:	4844      	ldr	r0, [pc, #272]	@ (8001444 <handle_login_buttons+0x15c>)
 8001332:	f7ff ff5f 	bl	80011f4 <debounce_button>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d010      	beq.n	800135e <handle_login_buttons+0x76>
        pin_index = (pin_index + 1) % 3;  // Wrap around 0-2
 800133c:	4b42      	ldr	r3, [pc, #264]	@ (8001448 <handle_login_buttons+0x160>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1c59      	adds	r1, r3, #1
 8001342:	4b44      	ldr	r3, [pc, #272]	@ (8001454 <handle_login_buttons+0x16c>)
 8001344:	fb83 3201 	smull	r3, r2, r3, r1
 8001348:	17cb      	asrs	r3, r1, #31
 800134a:	1ad2      	subs	r2, r2, r3
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	1aca      	subs	r2, r1, r3
 8001354:	4b3c      	ldr	r3, [pc, #240]	@ (8001448 <handle_login_buttons+0x160>)
 8001356:	601a      	str	r2, [r3, #0]
        display_login_screen();
 8001358:	f7ff ff76 	bl	8001248 <display_login_screen>
}
 800135c:	e06d      	b.n	800143a <handle_login_buttons+0x152>
    } else if (debounce_button(GPIOA, GPIO_PIN_6)) {
 800135e:	2140      	movs	r1, #64	@ 0x40
 8001360:	4838      	ldr	r0, [pc, #224]	@ (8001444 <handle_login_buttons+0x15c>)
 8001362:	f7ff ff47 	bl	80011f4 <debounce_button>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d066      	beq.n	800143a <handle_login_buttons+0x152>
        derive_key_from_pin(pin_input, key);
 800136c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001370:	4619      	mov	r1, r3
 8001372:	4836      	ldr	r0, [pc, #216]	@ (800144c <handle_login_buttons+0x164>)
 8001374:	f000 f876 	bl	8001464 <derive_key_from_pin>
        size_t encrypted_length = ENCRYPTED_PASSWORD_LENGTH;
 8001378:	2310      	movs	r3, #16
 800137a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        memcpy(decrypted_password, encrypted_passwords[0], encrypted_length);
 800137e:	463b      	mov	r3, r7
 8001380:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001384:	4934      	ldr	r1, [pc, #208]	@ (8001458 <handle_login_buttons+0x170>)
 8001386:	4618      	mov	r0, r3
 8001388:	f002 f800 	bl	800338c <memcpy>
        AES_init_ctx(&ctx, key);
 800138c:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8001390:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ffba 	bl	8000310 <AES_init_ctx>
        for (size_t i = 0; i < encrypted_length; i += 16) {
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013a2:	e00e      	b.n	80013c2 <handle_login_buttons+0xda>
            AES_ECB_decrypt(&ctx, decrypted_password + i);
 80013a4:	463a      	mov	r2, r7
 80013a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013aa:	441a      	add	r2, r3
 80013ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fbf8 	bl	8000ba8 <AES_ECB_decrypt>
        for (size_t i = 0; i < encrypted_length; i += 16) {
 80013b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013bc:	3310      	adds	r3, #16
 80013be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80013c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d3ea      	bcc.n	80013a4 <handle_login_buttons+0xbc>
        size_t pad_len = decrypted_password[encrypted_length - 1];
 80013ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80013d8:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        size_t decrypted_length = encrypted_length - pad_len;
 80013e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        decrypted_password[decrypted_length] = '\0';
 80013f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013f4:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80013f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80013fc:	4413      	add	r3, r2
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
        if (strcmp((char *)decrypted_password, "password1") == 0) {
 8001402:	463b      	mov	r3, r7
 8001404:	4915      	ldr	r1, [pc, #84]	@ (800145c <handle_login_buttons+0x174>)
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe fea0 	bl	800014c <strcmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <handle_login_buttons+0x136>
            current_state = STATE_MENU;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <handle_login_buttons+0x178>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
            display_menu();
 8001418:	f7ff fca8 	bl	8000d6c <display_menu>
}
 800141c:	e00d      	b.n	800143a <handle_login_buttons+0x152>
            pin_input[0] = 0;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <handle_login_buttons+0x164>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
            pin_input[1] = 0;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <handle_login_buttons+0x164>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
            pin_input[2] = 0;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <handle_login_buttons+0x164>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
            pin_index = 0;
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <handle_login_buttons+0x160>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
            display_login_screen();
 8001436:	f7ff ff07 	bl	8001248 <display_login_screen>
}
 800143a:	bf00      	nop
 800143c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40010800 	.word	0x40010800
 8001448:	200001a0 	.word	0x200001a0
 800144c:	20000194 	.word	0x20000194
 8001450:	66666667 	.word	0x66666667
 8001454:	55555556 	.word	0x55555556
 8001458:	20000040 	.word	0x20000040
 800145c:	08003d0c 	.word	0x08003d0c
 8001460:	20000190 	.word	0x20000190

08001464 <derive_key_from_pin>:

/* Derive AES key from 3-digit PIN */
void derive_key_from_pin(int pin_digits[], uint8_t key[16]) {
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 16; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e016      	b.n	80014a2 <derive_key_from_pin+0x3e>
        key[i] = (uint8_t)(pin_digits[i % 3]);
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <derive_key_from_pin+0x50>)
 8001478:	fb83 3102 	smull	r3, r1, r3, r2
 800147c:	17d3      	asrs	r3, r2, #31
 800147e:	1ac9      	subs	r1, r1, r3
 8001480:	460b      	mov	r3, r1
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	440b      	add	r3, r1
 8001486:	1ad1      	subs	r1, r2, r3
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	b2ca      	uxtb	r2, r1
 800149a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3301      	adds	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	dde5      	ble.n	8001474 <derive_key_from_pin+0x10>
    }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	55555556 	.word	0x55555556

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <Error_Handler+0x8>

080014c4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2301      	movs	r3, #1
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	2200      	movs	r2, #0
 80014ec:	2178      	movs	r1, #120	@ 0x78
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <ssd1306_WriteCommand+0x2c>)
 80014f0:	f000 ff64 	bl	80023bc <HAL_I2C_Mem_Write>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000138 	.word	0x20000138

08001500 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af04      	add	r7, sp, #16
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	f04f 32ff 	mov.w	r2, #4294967295
 8001512:	9202      	str	r2, [sp, #8]
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	2240      	movs	r2, #64	@ 0x40
 800151e:	2178      	movs	r1, #120	@ 0x78
 8001520:	4803      	ldr	r0, [pc, #12]	@ (8001530 <ssd1306_WriteData+0x30>)
 8001522:	f000 ff4b 	bl	80023bc <HAL_I2C_Mem_Write>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000138 	.word	0x20000138

08001534 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001538:	f7ff ffc4 	bl	80014c4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800153c:	2064      	movs	r0, #100	@ 0x64
 800153e:	f000 fb55 	bl	8001bec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f9d4 	bl	80018f0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001548:	2020      	movs	r0, #32
 800154a:	f7ff ffc1 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff ffbe 	bl	80014d0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001554:	20b0      	movs	r0, #176	@ 0xb0
 8001556:	f7ff ffbb 	bl	80014d0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800155a:	20c8      	movs	r0, #200	@ 0xc8
 800155c:	f7ff ffb8 	bl	80014d0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ffb5 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001566:	2010      	movs	r0, #16
 8001568:	f7ff ffb2 	bl	80014d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800156c:	2040      	movs	r0, #64	@ 0x40
 800156e:	f7ff ffaf 	bl	80014d0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001572:	20ff      	movs	r0, #255	@ 0xff
 8001574:	f000 f9a8 	bl	80018c8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001578:	20a1      	movs	r0, #161	@ 0xa1
 800157a:	f7ff ffa9 	bl	80014d0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800157e:	20a6      	movs	r0, #166	@ 0xa6
 8001580:	f7ff ffa6 	bl	80014d0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001584:	20a8      	movs	r0, #168	@ 0xa8
 8001586:	f7ff ffa3 	bl	80014d0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800158a:	203f      	movs	r0, #63	@ 0x3f
 800158c:	f7ff ffa0 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001590:	20a4      	movs	r0, #164	@ 0xa4
 8001592:	f7ff ff9d 	bl	80014d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001596:	20d3      	movs	r0, #211	@ 0xd3
 8001598:	f7ff ff9a 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ff97 	bl	80014d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015a2:	20d5      	movs	r0, #213	@ 0xd5
 80015a4:	f7ff ff94 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015a8:	20f0      	movs	r0, #240	@ 0xf0
 80015aa:	f7ff ff91 	bl	80014d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015ae:	20d9      	movs	r0, #217	@ 0xd9
 80015b0:	f7ff ff8e 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80015b4:	2022      	movs	r0, #34	@ 0x22
 80015b6:	f7ff ff8b 	bl	80014d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015ba:	20da      	movs	r0, #218	@ 0xda
 80015bc:	f7ff ff88 	bl	80014d0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80015c0:	2012      	movs	r0, #18
 80015c2:	f7ff ff85 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80015c6:	20db      	movs	r0, #219	@ 0xdb
 80015c8:	f7ff ff82 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80015cc:	2020      	movs	r0, #32
 80015ce:	f7ff ff7f 	bl	80014d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80015d2:	208d      	movs	r0, #141	@ 0x8d
 80015d4:	f7ff ff7c 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80015d8:	2014      	movs	r0, #20
 80015da:	f7ff ff79 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80015de:	2001      	movs	r0, #1
 80015e0:	f000 f986 	bl	80018f0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f000 f80f 	bl	8001608 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80015ea:	f000 f825 	bl	8001638 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <ssd1306_Init+0xd0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <ssd1306_Init+0xd0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80015fa:	4b02      	ldr	r3, [pc, #8]	@ (8001604 <ssd1306_Init+0xd0>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	711a      	strb	r2, [r3, #4]
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200005a4 	.word	0x200005a4

08001608 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <ssd1306_Fill+0x14>
 8001618:	2300      	movs	r3, #0
 800161a:	e000      	b.n	800161e <ssd1306_Fill+0x16>
 800161c:	23ff      	movs	r3, #255	@ 0xff
 800161e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001622:	4619      	mov	r1, r3
 8001624:	4803      	ldr	r0, [pc, #12]	@ (8001634 <ssd1306_Fill+0x2c>)
 8001626:	f001 fe69 	bl	80032fc <memset>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200001a4 	.word	0x200001a4

08001638 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	e016      	b.n	8001672 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	3b50      	subs	r3, #80	@ 0x50
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff40 	bl	80014d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff ff3d 	bl	80014d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001656:	2010      	movs	r0, #16
 8001658:	f7ff ff3a 	bl	80014d0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	01db      	lsls	r3, r3, #7
 8001660:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <ssd1306_UpdateScreen+0x4c>)
 8001662:	4413      	add	r3, r2
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff4a 	bl	8001500 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3301      	adds	r3, #1
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b07      	cmp	r3, #7
 8001676:	d9e5      	bls.n	8001644 <ssd1306_UpdateScreen+0xc>
    }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001a4 	.word	0x200001a4

08001688 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	460b      	mov	r3, r1
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	4613      	mov	r3, r2
 8001698:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db3d      	blt.n	800171e <ssd1306_DrawPixel+0x96>
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80016a6:	d83a      	bhi.n	800171e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80016a8:	797b      	ldrb	r3, [r7, #5]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d11a      	bne.n	80016e4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	08db      	lsrs	r3, r3, #3
 80016b4:	b2d8      	uxtb	r0, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	01db      	lsls	r3, r3, #7
 80016ba:	4413      	add	r3, r2
 80016bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001728 <ssd1306_DrawPixel+0xa0>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	b25a      	sxtb	r2, r3
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b259      	sxtb	r1, r3
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	4603      	mov	r3, r0
 80016d8:	01db      	lsls	r3, r3, #7
 80016da:	4413      	add	r3, r2
 80016dc:	b2c9      	uxtb	r1, r1
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <ssd1306_DrawPixel+0xa0>)
 80016e0:	54d1      	strb	r1, [r2, r3]
 80016e2:	e01d      	b.n	8001720 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	b2d8      	uxtb	r0, r3
 80016ec:	4603      	mov	r3, r0
 80016ee:	01db      	lsls	r3, r3, #7
 80016f0:	4413      	add	r3, r2
 80016f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <ssd1306_DrawPixel+0xa0>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	b25b      	sxtb	r3, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	b25b      	sxtb	r3, r3
 800170a:	4013      	ands	r3, r2
 800170c:	b259      	sxtb	r1, r3
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	4603      	mov	r3, r0
 8001712:	01db      	lsls	r3, r3, #7
 8001714:	4413      	add	r3, r2
 8001716:	b2c9      	uxtb	r1, r1
 8001718:	4a03      	ldr	r2, [pc, #12]	@ (8001728 <ssd1306_DrawPixel+0xa0>)
 800171a:	54d1      	strb	r1, [r2, r3]
 800171c:	e000      	b.n	8001720 <ssd1306_DrawPixel+0x98>
        return;
 800171e:	bf00      	nop
    }
}
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	200001a4 	.word	0x200001a4

0800172c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	4604      	mov	r4, r0
 8001734:	4638      	mov	r0, r7
 8001736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800173a:	4623      	mov	r3, r4
 800173c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	2b1f      	cmp	r3, #31
 8001742:	d902      	bls.n	800174a <ssd1306_WriteChar+0x1e>
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	2b7e      	cmp	r3, #126	@ 0x7e
 8001748:	d901      	bls.n	800174e <ssd1306_WriteChar+0x22>
        return 0;
 800174a:	2300      	movs	r3, #0
 800174c:	e077      	b.n	800183e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <ssd1306_WriteChar+0x11c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	783b      	ldrb	r3, [r7, #0]
 8001756:	4413      	add	r3, r2
 8001758:	2b80      	cmp	r3, #128	@ 0x80
 800175a:	dc06      	bgt.n	800176a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800175c:	4b3a      	ldr	r3, [pc, #232]	@ (8001848 <ssd1306_WriteChar+0x11c>)
 800175e:	885b      	ldrh	r3, [r3, #2]
 8001760:	461a      	mov	r2, r3
 8001762:	787b      	ldrb	r3, [r7, #1]
 8001764:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001766:	2b40      	cmp	r3, #64	@ 0x40
 8001768:	dd01      	ble.n	800176e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800176a:	2300      	movs	r3, #0
 800176c:	e067      	b.n	800183e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e04e      	b.n	8001812 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	3b20      	subs	r3, #32
 800177a:	7879      	ldrb	r1, [r7, #1]
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4619      	mov	r1, r3
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	440b      	add	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	e036      	b.n	8001802 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80017a4:	4b28      	ldr	r3, [pc, #160]	@ (8001848 <ssd1306_WriteChar+0x11c>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	b2d8      	uxtb	r0, r3
 80017b2:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <ssd1306_WriteChar+0x11c>)
 80017b4:	885b      	ldrh	r3, [r3, #2]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4413      	add	r3, r2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff ff5f 	bl	8001688 <ssd1306_DrawPixel>
 80017ca:	e017      	b.n	80017fc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <ssd1306_WriteChar+0x11c>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	b2d8      	uxtb	r0, r3
 80017da:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <ssd1306_WriteChar+0x11c>)
 80017dc:	885b      	ldrh	r3, [r3, #2]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b2d9      	uxtb	r1, r3
 80017e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	f7ff ff46 	bl	8001688 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	3301      	adds	r3, #1
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	783b      	ldrb	r3, [r7, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4293      	cmp	r3, r2
 800180a:	d3c3      	bcc.n	8001794 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	3301      	adds	r3, #1
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	787b      	ldrb	r3, [r7, #1]
 8001814:	461a      	mov	r2, r3
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4293      	cmp	r3, r2
 800181a:	d3ab      	bcc.n	8001774 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800181c:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <ssd1306_WriteChar+0x11c>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	2a00      	cmp	r2, #0
 8001824:	d005      	beq.n	8001832 <ssd1306_WriteChar+0x106>
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	3a20      	subs	r2, #32
 800182c:	440a      	add	r2, r1
 800182e:	7812      	ldrb	r2, [r2, #0]
 8001830:	e000      	b.n	8001834 <ssd1306_WriteChar+0x108>
 8001832:	783a      	ldrb	r2, [r7, #0]
 8001834:	4413      	add	r3, r2
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <ssd1306_WriteChar+0x11c>)
 800183a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	@ 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	200005a4 	.word	0x200005a4

0800184c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	4638      	mov	r0, r7
 8001856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800185a:	e013      	b.n	8001884 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	7818      	ldrb	r0, [r3, #0]
 8001860:	7e3b      	ldrb	r3, [r7, #24]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	463b      	mov	r3, r7
 8001866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001868:	f7ff ff60 	bl	800172c <ssd1306_WriteChar>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d002      	beq.n	800187e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	e008      	b.n	8001890 <ssd1306_WriteString+0x44>
        }
        str++;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3301      	adds	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e7      	bne.n	800185c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	71fb      	strb	r3, [r7, #7]
 80018a4:	4613      	mov	r3, r2
 80018a6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <ssd1306_SetCursor+0x2c>)
 80018ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <ssd1306_SetCursor+0x2c>)
 80018b6:	805a      	strh	r2, [r3, #2]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	200005a4 	.word	0x200005a4

080018c8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80018d2:	2381      	movs	r3, #129	@ 0x81
 80018d4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fdf9 	bl	80014d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fdf5 	bl	80014d0 <ssd1306_WriteCommand>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001900:	23af      	movs	r3, #175	@ 0xaf
 8001902:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <ssd1306_SetDisplayOn+0x38>)
 8001906:	2201      	movs	r2, #1
 8001908:	715a      	strb	r2, [r3, #5]
 800190a:	e004      	b.n	8001916 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800190c:	23ae      	movs	r3, #174	@ 0xae
 800190e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <ssd1306_SetDisplayOn+0x38>)
 8001912:	2200      	movs	r2, #0
 8001914:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fdd9 	bl	80014d0 <ssd1306_WriteCommand>
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200005a4 	.word	0x200005a4

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_MspInit+0x5c>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <HAL_MspInit+0x5c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6193      	str	r3, [r2, #24]
 800193e:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_MspInit+0x5c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <HAL_MspInit+0x5c>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <HAL_MspInit+0x5c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <HAL_MspInit+0x5c>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_MspInit+0x60>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_MspInit+0x60>)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000

08001990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a15      	ldr	r2, [pc, #84]	@ (8001a00 <HAL_I2C_MspInit+0x70>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d123      	bne.n	80019f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a13      	ldr	r2, [pc, #76]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c8:	23c0      	movs	r3, #192	@ 0xc0
 80019ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019cc:	2312      	movs	r3, #18
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <HAL_I2C_MspInit+0x78>)
 80019dc:	f000 fa0e 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019ea:	61d3      	str	r3, [r2, #28]
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40005400 	.word	0x40005400
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010c00 	.word	0x40010c00

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <NMI_Handler+0x4>

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <MemManage_Handler+0x4>

08001a24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f8aa 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f001 fc4e 	bl	8003334 <__errno>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20005000 	.word	0x20005000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	200005ac 	.word	0x200005ac
 8001acc:	20000700 	.word	0x20000700

08001ad0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001adc:	f7ff fff8 	bl	8001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480b      	ldr	r0, [pc, #44]	@ (8001b10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ae2:	490c      	ldr	r1, [pc, #48]	@ (8001b14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a09      	ldr	r2, [pc, #36]	@ (8001b1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af8:	4c09      	ldr	r4, [pc, #36]	@ (8001b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b06:	f001 fc1b 	bl	8003340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b0a:	f7ff f85b 	bl	8000bc4 <main>
  bx lr
 8001b0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b14:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001b18:	08005a70 	.word	0x08005a70
  ldr r2, =_sbss
 8001b1c:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001b20:	200006fc 	.word	0x200006fc

08001b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC1_2_IRQHandler>
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <HAL_Init+0x28>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a07      	ldr	r2, [pc, #28]	@ (8001b50 <HAL_Init+0x28>)
 8001b32:	f043 0310 	orr.w	r3, r3, #16
 8001b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 f92b 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f000 f808 	bl	8001b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b44:	f7ff fef2 	bl	800192c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40022000 	.word	0x40022000

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <HAL_InitTick+0x54>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_InitTick+0x58>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f935 	bl	8001de2 <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00e      	b.n	8001ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d80a      	bhi.n	8001b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f000 f90b 	bl	8001daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b94:	4a06      	ldr	r2, [pc, #24]	@ (8001bb0 <HAL_InitTick+0x5c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200000c0 	.word	0x200000c0
 8001bac:	200000c8 	.word	0x200000c8
 8001bb0:	200000c4 	.word	0x200000c4

08001bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_IncTick+0x1c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_IncTick+0x20>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a03      	ldr	r2, [pc, #12]	@ (8001bd4 <HAL_IncTick+0x20>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	200000c8 	.word	0x200000c8
 8001bd4:	200005b0 	.word	0x200005b0

08001bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	@ (8001be8 <HAL_GetTick+0x10>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	200005b0 	.word	0x200005b0

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff fff0 	bl	8001bd8 <HAL_GetTick>
 8001bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d005      	beq.n	8001c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <HAL_Delay+0x44>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c12:	bf00      	nop
 8001c14:	f7ff ffe0 	bl	8001bd8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <HAL_Delay+0x28>
  {
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200000c8 	.word	0x200000c8

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	@ (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	@ (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	@ 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f7ff ff90 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff49 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff5e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff90 	bl	8001cec <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5f 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffb0 	bl	8001d50 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b08b      	sub	sp, #44	@ 0x2c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	e169      	b.n	80020e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e10:	2201      	movs	r2, #1
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f040 8158 	bne.w	80020de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a9a      	ldr	r2, [pc, #616]	@ (800209c <HAL_GPIO_Init+0x2a0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d05e      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e38:	4a98      	ldr	r2, [pc, #608]	@ (800209c <HAL_GPIO_Init+0x2a0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d875      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e3e:	4a98      	ldr	r2, [pc, #608]	@ (80020a0 <HAL_GPIO_Init+0x2a4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d058      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e44:	4a96      	ldr	r2, [pc, #600]	@ (80020a0 <HAL_GPIO_Init+0x2a4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d86f      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e4a:	4a96      	ldr	r2, [pc, #600]	@ (80020a4 <HAL_GPIO_Init+0x2a8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d052      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e50:	4a94      	ldr	r2, [pc, #592]	@ (80020a4 <HAL_GPIO_Init+0x2a8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d869      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e56:	4a94      	ldr	r2, [pc, #592]	@ (80020a8 <HAL_GPIO_Init+0x2ac>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d04c      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e5c:	4a92      	ldr	r2, [pc, #584]	@ (80020a8 <HAL_GPIO_Init+0x2ac>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d863      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e62:	4a92      	ldr	r2, [pc, #584]	@ (80020ac <HAL_GPIO_Init+0x2b0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d046      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
 8001e68:	4a90      	ldr	r2, [pc, #576]	@ (80020ac <HAL_GPIO_Init+0x2b0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d85d      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d82a      	bhi.n	8001ec8 <HAL_GPIO_Init+0xcc>
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d859      	bhi.n	8001f2a <HAL_GPIO_Init+0x12e>
 8001e76:	a201      	add	r2, pc, #4	@ (adr r2, 8001e7c <HAL_GPIO_Init+0x80>)
 8001e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7c:	08001ef7 	.word	0x08001ef7
 8001e80:	08001ed1 	.word	0x08001ed1
 8001e84:	08001ee3 	.word	0x08001ee3
 8001e88:	08001f25 	.word	0x08001f25
 8001e8c:	08001f2b 	.word	0x08001f2b
 8001e90:	08001f2b 	.word	0x08001f2b
 8001e94:	08001f2b 	.word	0x08001f2b
 8001e98:	08001f2b 	.word	0x08001f2b
 8001e9c:	08001f2b 	.word	0x08001f2b
 8001ea0:	08001f2b 	.word	0x08001f2b
 8001ea4:	08001f2b 	.word	0x08001f2b
 8001ea8:	08001f2b 	.word	0x08001f2b
 8001eac:	08001f2b 	.word	0x08001f2b
 8001eb0:	08001f2b 	.word	0x08001f2b
 8001eb4:	08001f2b 	.word	0x08001f2b
 8001eb8:	08001f2b 	.word	0x08001f2b
 8001ebc:	08001f2b 	.word	0x08001f2b
 8001ec0:	08001ed9 	.word	0x08001ed9
 8001ec4:	08001eed 	.word	0x08001eed
 8001ec8:	4a79      	ldr	r2, [pc, #484]	@ (80020b0 <HAL_GPIO_Init+0x2b4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ece:	e02c      	b.n	8001f2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e029      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	3304      	adds	r3, #4
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e024      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	3308      	adds	r3, #8
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e01f      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	330c      	adds	r3, #12
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e01a      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001efe:	2304      	movs	r3, #4
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e013      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	611a      	str	r2, [r3, #16]
          break;
 8001f16:	e009      	b.n	8001f2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	615a      	str	r2, [r3, #20]
          break;
 8001f22:	e003      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
          break;
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x130>
          break;
 8001f2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2bff      	cmp	r3, #255	@ 0xff
 8001f30:	d801      	bhi.n	8001f36 <HAL_GPIO_Init+0x13a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	e001      	b.n	8001f3a <HAL_GPIO_Init+0x13e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2bff      	cmp	r3, #255	@ 0xff
 8001f40:	d802      	bhi.n	8001f48 <HAL_GPIO_Init+0x14c>
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	e002      	b.n	8001f4e <HAL_GPIO_Init+0x152>
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	3b08      	subs	r3, #8
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	210f      	movs	r1, #15
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	6a39      	ldr	r1, [r7, #32]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80b1 	beq.w	80020de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a4c      	ldr	r2, [pc, #304]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b4a      	ldr	r3, [pc, #296]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f94:	4a48      	ldr	r2, [pc, #288]	@ (80020b8 <HAL_GPIO_Init+0x2bc>)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a40      	ldr	r2, [pc, #256]	@ (80020bc <HAL_GPIO_Init+0x2c0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_GPIO_Init+0x1ec>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80020c0 <HAL_GPIO_Init+0x2c4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_GPIO_Init+0x1e8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3e      	ldr	r2, [pc, #248]	@ (80020c4 <HAL_GPIO_Init+0x2c8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_Init+0x1e4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80020c8 <HAL_GPIO_Init+0x2cc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_GPIO_Init+0x1e0>
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e006      	b.n	8001fea <HAL_GPIO_Init+0x1ee>
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e004      	b.n	8001fea <HAL_GPIO_Init+0x1ee>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x1ee>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_GPIO_Init+0x1ee>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fec:	f002 0203 	and.w	r2, r2, #3
 8001ff0:	0092      	lsls	r2, r2, #2
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ffa:	492f      	ldr	r1, [pc, #188]	@ (80020b8 <HAL_GPIO_Init+0x2bc>)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002014:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	492c      	ldr	r1, [pc, #176]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002022:	4b2a      	ldr	r3, [pc, #168]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	4928      	ldr	r1, [pc, #160]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800203c:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4922      	ldr	r1, [pc, #136]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800204a:	4b20      	ldr	r3, [pc, #128]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	43db      	mvns	r3, r3
 8002052:	491e      	ldr	r1, [pc, #120]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002054:	4013      	ands	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002064:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	4918      	ldr	r1, [pc, #96]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	43db      	mvns	r3, r3
 800207a:	4914      	ldr	r1, [pc, #80]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800207c:	4013      	ands	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d021      	beq.n	80020d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	490e      	ldr	r1, [pc, #56]	@ (80020cc <HAL_GPIO_Init+0x2d0>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
 8002098:	e021      	b.n	80020de <HAL_GPIO_Init+0x2e2>
 800209a:	bf00      	nop
 800209c:	10320000 	.word	0x10320000
 80020a0:	10310000 	.word	0x10310000
 80020a4:	10220000 	.word	0x10220000
 80020a8:	10210000 	.word	0x10210000
 80020ac:	10120000 	.word	0x10120000
 80020b0:	10110000 	.word	0x10110000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010000 	.word	0x40010000
 80020bc:	40010800 	.word	0x40010800
 80020c0:	40010c00 	.word	0x40010c00
 80020c4:	40011000 	.word	0x40011000
 80020c8:	40011400 	.word	0x40011400
 80020cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_GPIO_Init+0x304>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	4909      	ldr	r1, [pc, #36]	@ (8002100 <HAL_GPIO_Init+0x304>)
 80020da:	4013      	ands	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	3301      	adds	r3, #1
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f47f ae8e 	bne.w	8001e10 <HAL_GPIO_Init+0x14>
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	372c      	adds	r7, #44	@ 0x2c
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e001      	b.n	8002126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
	...

08002134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e12b      	b.n	800239e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fc18 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	@ 0x24
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002198:	f001 f844 	bl	8003224 <HAL_RCC_GetPCLK1Freq>
 800219c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a81      	ldr	r2, [pc, #516]	@ (80023a8 <HAL_I2C_Init+0x274>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d807      	bhi.n	80021b8 <HAL_I2C_Init+0x84>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a80      	ldr	r2, [pc, #512]	@ (80023ac <HAL_I2C_Init+0x278>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	bf94      	ite	ls
 80021b0:	2301      	movls	r3, #1
 80021b2:	2300      	movhi	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e006      	b.n	80021c6 <HAL_I2C_Init+0x92>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a7d      	ldr	r2, [pc, #500]	@ (80023b0 <HAL_I2C_Init+0x27c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	bf94      	ite	ls
 80021c0:	2301      	movls	r3, #1
 80021c2:	2300      	movhi	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0e7      	b.n	800239e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a78      	ldr	r2, [pc, #480]	@ (80023b4 <HAL_I2C_Init+0x280>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a6a      	ldr	r2, [pc, #424]	@ (80023a8 <HAL_I2C_Init+0x274>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d802      	bhi.n	8002208 <HAL_I2C_Init+0xd4>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	e009      	b.n	800221c <HAL_I2C_Init+0xe8>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	4a69      	ldr	r2, [pc, #420]	@ (80023b8 <HAL_I2C_Init+0x284>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	3301      	adds	r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800222e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	495c      	ldr	r1, [pc, #368]	@ (80023a8 <HAL_I2C_Init+0x274>)
 8002238:	428b      	cmp	r3, r1
 800223a:	d819      	bhi.n	8002270 <HAL_I2C_Init+0x13c>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e59      	subs	r1, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fbb1 f3f3 	udiv	r3, r1, r3
 800224a:	1c59      	adds	r1, r3, #1
 800224c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002250:	400b      	ands	r3, r1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_I2C_Init+0x138>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e59      	subs	r1, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fbb1 f3f3 	udiv	r3, r1, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226a:	e051      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 800226c:	2304      	movs	r3, #4
 800226e:	e04f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d111      	bne.n	800229c <HAL_I2C_Init+0x168>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e012      	b.n	80022c2 <HAL_I2C_Init+0x18e>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	0099      	lsls	r1, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x196>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e022      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10e      	bne.n	80022f0 <HAL_I2C_Init+0x1bc>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e58      	subs	r0, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	6809      	ldr	r1, [r1, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800233e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6911      	ldr	r1, [r2, #16]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	000186a0 	.word	0x000186a0
 80023ac:	001e847f 	.word	0x001e847f
 80023b0:	003d08ff 	.word	0x003d08ff
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	817b      	strh	r3, [r7, #10]
 80023ce:	460b      	mov	r3, r1
 80023d0:	813b      	strh	r3, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d6:	f7ff fbff 	bl	8001bd8 <HAL_GetTick>
 80023da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	f040 80d9 	bne.w	800259c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2319      	movs	r3, #25
 80023f0:	2201      	movs	r2, #1
 80023f2:	496d      	ldr	r1, [pc, #436]	@ (80025a8 <HAL_I2C_Mem_Write+0x1ec>)
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f971 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
 8002402:	e0cc      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_I2C_Mem_Write+0x56>
 800240e:	2302      	movs	r3, #2
 8002410:	e0c5      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d007      	beq.n	8002438 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2221      	movs	r2, #33	@ 0x21
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2240      	movs	r2, #64	@ 0x40
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a3a      	ldr	r2, [r7, #32]
 8002462:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002468:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a4d      	ldr	r2, [pc, #308]	@ (80025ac <HAL_I2C_Mem_Write+0x1f0>)
 8002478:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800247a:	88f8      	ldrh	r0, [r7, #6]
 800247c:	893a      	ldrh	r2, [r7, #8]
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4603      	mov	r3, r0
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f890 	bl	80025b0 <I2C_RequestMemoryWrite>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d052      	beq.n	800253c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e081      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa36 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d107      	bne.n	80024c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06b      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d11b      	bne.n	800253c <HAL_I2C_Mem_Write+0x180>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1aa      	bne.n	800249a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fa29 	bl	80029a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	2b04      	cmp	r3, #4
 800255a:	d107      	bne.n	800256c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e016      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	00100002 	.word	0x00100002
 80025ac:	ffff0000 	.word	0xffff0000

080025b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f878 	bl	80026dc <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002600:	d103      	bne.n	800260a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002608:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e05f      	b.n	80026ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800261c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	492d      	ldr	r1, [pc, #180]	@ (80026d8 <I2C_RequestMemoryWrite+0x128>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f8d3 	bl	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e04c      	b.n	80026ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800264a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800264c:	6a39      	ldr	r1, [r7, #32]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f95e 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	2b04      	cmp	r3, #4
 8002660:	d107      	bne.n	8002672 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002670:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e02b      	b.n	80026ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800267c:	893b      	ldrh	r3, [r7, #8]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	e021      	b.n	80026cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002688:	893b      	ldrh	r3, [r7, #8]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	b29b      	uxth	r3, r3
 800268e:	b2da      	uxtb	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f938 	bl	8002910 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d107      	bne.n	80026be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e005      	b.n	80026ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026c2:	893b      	ldrh	r3, [r7, #8]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00010002 	.word	0x00010002

080026dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ec:	e048      	b.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d044      	beq.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7ff fa6f 	bl	8001bd8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d139      	bne.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10d      	bne.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	43da      	mvns	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	e00c      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	43da      	mvns	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4013      	ands	r3, r2
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	429a      	cmp	r2, r3
 8002750:	d116      	bne.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e023      	b.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10d      	bne.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	e00c      	b.n	80027c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d093      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027de:	e071      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ee:	d123      	bne.n	8002838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e067      	b.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d041      	beq.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7ff f9ca 	bl	8001bd8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d136      	bne.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10c      	bne.n	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4013      	ands	r3, r2
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf14      	ite	ne
 8002872:	2301      	movne	r3, #1
 8002874:	2300      	moveq	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	e00b      	b.n	8002892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	43da      	mvns	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4013      	ands	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e021      	b.n	8002908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10c      	bne.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e00b      	b.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f af6d 	bne.w	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291c:	e034      	b.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f886 	bl	8002a30 <I2C_IsAcknowledgeFailed>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e034      	b.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d028      	beq.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7ff f94f 	bl	8001bd8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11d      	bne.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002956:	2b80      	cmp	r3, #128	@ 0x80
 8002958:	d016      	beq.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e007      	b.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d1c3      	bne.n	800291e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ac:	e034      	b.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f83e 	bl	8002a30 <I2C_IsAcknowledgeFailed>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e034      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d028      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7ff f907 	bl	8001bd8 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d11d      	bne.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d016      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e007      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d1c3      	bne.n	80029ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a46:	d11b      	bne.n	8002a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e272      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8087 	beq.w	8002bba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aac:	4b92      	ldr	r3, [pc, #584]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d112      	bne.n	8002aea <HAL_RCC_OscConfig+0x5e>
 8002ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad0:	d10b      	bne.n	8002aea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad2:	4b89      	ldr	r3, [pc, #548]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d06c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x12c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d168      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e24c      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x76>
 8002af4:	4b80      	ldr	r3, [pc, #512]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a7f      	ldr	r2, [pc, #508]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e02e      	b.n	8002b60 <HAL_RCC_OscConfig+0xd4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x98>
 8002b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7a      	ldr	r2, [pc, #488]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b78      	ldr	r3, [pc, #480]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a77      	ldr	r2, [pc, #476]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xd4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0xbc>
 8002b2e:	4b72      	ldr	r3, [pc, #456]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a71      	ldr	r2, [pc, #452]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xd4>
 8002b48:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b68      	ldr	r3, [pc, #416]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a67      	ldr	r2, [pc, #412]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7ff f836 	bl	8001bd8 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7ff f832 	bl	8001bd8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e200      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xe4>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7ff f822 	bl	8001bd8 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7ff f81e 	bl	8001bd8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1ec      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b53      	ldr	r3, [pc, #332]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x10c>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bd2:	4b49      	ldr	r3, [pc, #292]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x18c>
 8002bde:	4b46      	ldr	r3, [pc, #280]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b43      	ldr	r3, [pc, #268]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x176>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1c0      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4939      	ldr	r1, [pc, #228]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e03a      	b.n	8002c8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fe ffd7 	bl	8001bd8 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe ffd3 	bl	8001bd8 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1a1      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4927      	ldr	r1, [pc, #156]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <HAL_RCC_OscConfig+0x270>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe ffb6 	bl	8001bd8 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe ffb2 	bl	8001bd8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e180      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d03a      	beq.n	8002d10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d019      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b17      	ldr	r3, [pc, #92]	@ (8002d00 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca8:	f7fe ff96 	bl	8001bd8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe ff92 	bl	8001bd8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e160      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f000 fabc 	bl	800324c <RCC_Delay>
 8002cd4:	e01c      	b.n	8002d10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cdc:	f7fe ff7c 	bl	8001bd8 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce2:	e00f      	b.n	8002d04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7fe ff78 	bl	8001bd8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d908      	bls.n	8002d04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e146      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	42420000 	.word	0x42420000
 8002d00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	4b92      	ldr	r3, [pc, #584]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e9      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80a6 	beq.w	8002e6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d22:	4b8b      	ldr	r3, [pc, #556]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b88      	ldr	r3, [pc, #544]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4a87      	ldr	r2, [pc, #540]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	61d3      	str	r3, [r2, #28]
 8002d3a:	4b85      	ldr	r3, [pc, #532]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b82      	ldr	r3, [pc, #520]	@ (8002f54 <HAL_RCC_OscConfig+0x4c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d118      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	4b7f      	ldr	r3, [pc, #508]	@ (8002f54 <HAL_RCC_OscConfig+0x4c8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f54 <HAL_RCC_OscConfig+0x4c8>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d62:	f7fe ff39 	bl	8001bd8 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7fe ff35 	bl	8001bd8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	@ 0x64
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e103      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	4b75      	ldr	r3, [pc, #468]	@ (8002f54 <HAL_RCC_OscConfig+0x4c8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x312>
 8002d90:	4b6f      	ldr	r3, [pc, #444]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	4a6e      	ldr	r2, [pc, #440]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6213      	str	r3, [r2, #32]
 8002d9c:	e02d      	b.n	8002dfa <HAL_RCC_OscConfig+0x36e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x334>
 8002da6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a69      	ldr	r2, [pc, #420]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6213      	str	r3, [r2, #32]
 8002db2:	4b67      	ldr	r3, [pc, #412]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a66      	ldr	r2, [pc, #408]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6213      	str	r3, [r2, #32]
 8002dbe:	e01c      	b.n	8002dfa <HAL_RCC_OscConfig+0x36e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d10c      	bne.n	8002de2 <HAL_RCC_OscConfig+0x356>
 8002dc8:	4b61      	ldr	r3, [pc, #388]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4a60      	ldr	r2, [pc, #384]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	6213      	str	r3, [r2, #32]
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6213      	str	r3, [r2, #32]
 8002de0:	e00b      	b.n	8002dfa <HAL_RCC_OscConfig+0x36e>
 8002de2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4a5a      	ldr	r2, [pc, #360]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6213      	str	r3, [r2, #32]
 8002dee:	4b58      	ldr	r3, [pc, #352]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a57      	ldr	r2, [pc, #348]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d015      	beq.n	8002e2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fee9 	bl	8001bd8 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe fee5 	bl	8001bd8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e0b1      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	4b4b      	ldr	r3, [pc, #300]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ee      	beq.n	8002e0a <HAL_RCC_OscConfig+0x37e>
 8002e2c:	e014      	b.n	8002e58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fed3 	bl	8001bd8 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe fecf 	bl	8001bd8 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e09b      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4c:	4b40      	ldr	r3, [pc, #256]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ee      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d105      	bne.n	8002e6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4a3b      	ldr	r2, [pc, #236]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8087 	beq.w	8002f82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e74:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d061      	beq.n	8002f44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d146      	bne.n	8002f16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b33      	ldr	r3, [pc, #204]	@ (8002f58 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe fea3 	bl	8001bd8 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe fe9f 	bl	8001bd8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e06d      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea8:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ebc:	d108      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ebe:	4b24      	ldr	r3, [pc, #144]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	4921      	ldr	r1, [pc, #132]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a19      	ldr	r1, [r3, #32]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	491b      	ldr	r1, [pc, #108]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe fe73 	bl	8001bd8 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe fe6f 	bl	8001bd8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e03d      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x46a>
 8002f14:	e035      	b.n	8002f82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fe5c 	bl	8001bd8 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fe58 	bl	8001bd8 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e026      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x498>
 8002f42:	e01e      	b.n	8002f82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e019      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
 8002f58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_RCC_OscConfig+0x500>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000

08002f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0d0      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d910      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b67      	ldr	r3, [pc, #412]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4965      	ldr	r1, [pc, #404]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b63      	ldr	r3, [pc, #396]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0b8      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fec:	4b59      	ldr	r3, [pc, #356]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003004:	4b53      	ldr	r3, [pc, #332]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a52      	ldr	r2, [pc, #328]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800300e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	4b50      	ldr	r3, [pc, #320]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	494d      	ldr	r1, [pc, #308]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d040      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d115      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e07f      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304e:	4b41      	ldr	r3, [pc, #260]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e073      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b3d      	ldr	r3, [pc, #244]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06b      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306e:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f023 0203 	bic.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4936      	ldr	r1, [pc, #216]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003080:	f7fe fdaa 	bl	8001bd8 <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	e00a      	b.n	800309e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003088:	f7fe fda6 	bl	8001bd8 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e053      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	4b2d      	ldr	r3, [pc, #180]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 020c 	and.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1eb      	bne.n	8003088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b0:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d210      	bcs.n	80030e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4922      	ldr	r1, [pc, #136]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b20      	ldr	r3, [pc, #128]	@ (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e032      	b.n	8003146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4916      	ldr	r1, [pc, #88]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800310a:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	490e      	ldr	r1, [pc, #56]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800311e:	f000 f821 	bl	8003164 <HAL_RCC_GetSysClockFreq>
 8003122:	4602      	mov	r2, r0
 8003124:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	490a      	ldr	r1, [pc, #40]	@ (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	5ccb      	ldrb	r3, [r1, r3]
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	4a09      	ldr	r2, [pc, #36]	@ (800315c <HAL_RCC_ClockConfig+0x1cc>)
 8003138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <HAL_RCC_ClockConfig+0x1d0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fd08 	bl	8001b54 <HAL_InitTick>

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000
 8003158:	08005a00 	.word	0x08005a00
 800315c:	200000c0 	.word	0x200000c0
 8003160:	200000c4 	.word	0x200000c4

08003164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800317e:	4b1e      	ldr	r3, [pc, #120]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b04      	cmp	r3, #4
 800318c:	d002      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x30>
 800318e:	2b08      	cmp	r3, #8
 8003190:	d003      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x36>
 8003192:	e027      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003194:	4b19      	ldr	r3, [pc, #100]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003196:	613b      	str	r3, [r7, #16]
      break;
 8003198:	e027      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	0c9b      	lsrs	r3, r3, #18
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	4a17      	ldr	r2, [pc, #92]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031a4:	5cd3      	ldrb	r3, [r2, r3]
 80031a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d010      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031b2:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	0c5b      	lsrs	r3, r3, #17
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	4a11      	ldr	r2, [pc, #68]	@ (8003204 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031be:	5cd3      	ldrb	r3, [r2, r3]
 80031c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x98>)
 80031c6:	fb03 f202 	mul.w	r2, r3, r2
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	e004      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003208 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031d8:	fb02 f303 	mul.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	613b      	str	r3, [r7, #16]
      break;
 80031e2:	e002      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_RCC_GetSysClockFreq+0xa8>)
 80031e6:	613b      	str	r3, [r7, #16]
      break;
 80031e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ea:	693b      	ldr	r3, [r7, #16]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	08005a18 	.word	0x08005a18
 8003204:	08005a28 	.word	0x08005a28
 8003208:	003d0900 	.word	0x003d0900
 800320c:	007a1200 	.word	0x007a1200

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b02      	ldr	r3, [pc, #8]	@ (8003220 <HAL_RCC_GetHCLKFreq+0x10>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	200000c0 	.word	0x200000c0

08003224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003228:	f7ff fff2 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4903      	ldr	r1, [pc, #12]	@ (8003248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000
 8003248:	08005a10 	.word	0x08005a10

0800324c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003254:	4b0a      	ldr	r3, [pc, #40]	@ (8003280 <RCC_Delay+0x34>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <RCC_Delay+0x38>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0a5b      	lsrs	r3, r3, #9
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003268:	bf00      	nop
  }
  while (Delay --);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e5a      	subs	r2, r3, #1
 800326e:	60fa      	str	r2, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f9      	bne.n	8003268 <RCC_Delay+0x1c>
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	200000c0 	.word	0x200000c0
 8003284:	10624dd3 	.word	0x10624dd3

08003288 <siprintf>:
 8003288:	b40e      	push	{r1, r2, r3}
 800328a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800328e:	b500      	push	{lr}
 8003290:	b09c      	sub	sp, #112	@ 0x70
 8003292:	ab1d      	add	r3, sp, #116	@ 0x74
 8003294:	9002      	str	r0, [sp, #8]
 8003296:	9006      	str	r0, [sp, #24]
 8003298:	9107      	str	r1, [sp, #28]
 800329a:	9104      	str	r1, [sp, #16]
 800329c:	4808      	ldr	r0, [pc, #32]	@ (80032c0 <siprintf+0x38>)
 800329e:	4909      	ldr	r1, [pc, #36]	@ (80032c4 <siprintf+0x3c>)
 80032a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80032a4:	9105      	str	r1, [sp, #20]
 80032a6:	6800      	ldr	r0, [r0, #0]
 80032a8:	a902      	add	r1, sp, #8
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	f000 f9ce 	bl	800364c <_svfiprintf_r>
 80032b0:	2200      	movs	r2, #0
 80032b2:	9b02      	ldr	r3, [sp, #8]
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	b01c      	add	sp, #112	@ 0x70
 80032b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032bc:	b003      	add	sp, #12
 80032be:	4770      	bx	lr
 80032c0:	200000cc 	.word	0x200000cc
 80032c4:	ffff0208 	.word	0xffff0208

080032c8 <memmove>:
 80032c8:	4288      	cmp	r0, r1
 80032ca:	b510      	push	{r4, lr}
 80032cc:	eb01 0402 	add.w	r4, r1, r2
 80032d0:	d902      	bls.n	80032d8 <memmove+0x10>
 80032d2:	4284      	cmp	r4, r0
 80032d4:	4623      	mov	r3, r4
 80032d6:	d807      	bhi.n	80032e8 <memmove+0x20>
 80032d8:	1e43      	subs	r3, r0, #1
 80032da:	42a1      	cmp	r1, r4
 80032dc:	d008      	beq.n	80032f0 <memmove+0x28>
 80032de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032e6:	e7f8      	b.n	80032da <memmove+0x12>
 80032e8:	4601      	mov	r1, r0
 80032ea:	4402      	add	r2, r0
 80032ec:	428a      	cmp	r2, r1
 80032ee:	d100      	bne.n	80032f2 <memmove+0x2a>
 80032f0:	bd10      	pop	{r4, pc}
 80032f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032fa:	e7f7      	b.n	80032ec <memmove+0x24>

080032fc <memset>:
 80032fc:	4603      	mov	r3, r0
 80032fe:	4402      	add	r2, r0
 8003300:	4293      	cmp	r3, r2
 8003302:	d100      	bne.n	8003306 <memset+0xa>
 8003304:	4770      	bx	lr
 8003306:	f803 1b01 	strb.w	r1, [r3], #1
 800330a:	e7f9      	b.n	8003300 <memset+0x4>

0800330c <strncpy>:
 800330c:	4603      	mov	r3, r0
 800330e:	b510      	push	{r4, lr}
 8003310:	3901      	subs	r1, #1
 8003312:	b132      	cbz	r2, 8003322 <strncpy+0x16>
 8003314:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003318:	3a01      	subs	r2, #1
 800331a:	f803 4b01 	strb.w	r4, [r3], #1
 800331e:	2c00      	cmp	r4, #0
 8003320:	d1f7      	bne.n	8003312 <strncpy+0x6>
 8003322:	2100      	movs	r1, #0
 8003324:	441a      	add	r2, r3
 8003326:	4293      	cmp	r3, r2
 8003328:	d100      	bne.n	800332c <strncpy+0x20>
 800332a:	bd10      	pop	{r4, pc}
 800332c:	f803 1b01 	strb.w	r1, [r3], #1
 8003330:	e7f9      	b.n	8003326 <strncpy+0x1a>
	...

08003334 <__errno>:
 8003334:	4b01      	ldr	r3, [pc, #4]	@ (800333c <__errno+0x8>)
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	200000cc 	.word	0x200000cc

08003340 <__libc_init_array>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	2600      	movs	r6, #0
 8003344:	4d0c      	ldr	r5, [pc, #48]	@ (8003378 <__libc_init_array+0x38>)
 8003346:	4c0d      	ldr	r4, [pc, #52]	@ (800337c <__libc_init_array+0x3c>)
 8003348:	1b64      	subs	r4, r4, r5
 800334a:	10a4      	asrs	r4, r4, #2
 800334c:	42a6      	cmp	r6, r4
 800334e:	d109      	bne.n	8003364 <__libc_init_array+0x24>
 8003350:	f000 fc5e 	bl	8003c10 <_init>
 8003354:	2600      	movs	r6, #0
 8003356:	4d0a      	ldr	r5, [pc, #40]	@ (8003380 <__libc_init_array+0x40>)
 8003358:	4c0a      	ldr	r4, [pc, #40]	@ (8003384 <__libc_init_array+0x44>)
 800335a:	1b64      	subs	r4, r4, r5
 800335c:	10a4      	asrs	r4, r4, #2
 800335e:	42a6      	cmp	r6, r4
 8003360:	d105      	bne.n	800336e <__libc_init_array+0x2e>
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	f855 3b04 	ldr.w	r3, [r5], #4
 8003368:	4798      	blx	r3
 800336a:	3601      	adds	r6, #1
 800336c:	e7ee      	b.n	800334c <__libc_init_array+0xc>
 800336e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003372:	4798      	blx	r3
 8003374:	3601      	adds	r6, #1
 8003376:	e7f2      	b.n	800335e <__libc_init_array+0x1e>
 8003378:	08005a68 	.word	0x08005a68
 800337c:	08005a68 	.word	0x08005a68
 8003380:	08005a68 	.word	0x08005a68
 8003384:	08005a6c 	.word	0x08005a6c

08003388 <__retarget_lock_acquire_recursive>:
 8003388:	4770      	bx	lr

0800338a <__retarget_lock_release_recursive>:
 800338a:	4770      	bx	lr

0800338c <memcpy>:
 800338c:	440a      	add	r2, r1
 800338e:	4291      	cmp	r1, r2
 8003390:	f100 33ff 	add.w	r3, r0, #4294967295
 8003394:	d100      	bne.n	8003398 <memcpy+0xc>
 8003396:	4770      	bx	lr
 8003398:	b510      	push	{r4, lr}
 800339a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800339e:	4291      	cmp	r1, r2
 80033a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033a4:	d1f9      	bne.n	800339a <memcpy+0xe>
 80033a6:	bd10      	pop	{r4, pc}

080033a8 <_free_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	4605      	mov	r5, r0
 80033ac:	2900      	cmp	r1, #0
 80033ae:	d040      	beq.n	8003432 <_free_r+0x8a>
 80033b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033b4:	1f0c      	subs	r4, r1, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bfb8      	it	lt
 80033ba:	18e4      	addlt	r4, r4, r3
 80033bc:	f000 f8de 	bl	800357c <__malloc_lock>
 80033c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003434 <_free_r+0x8c>)
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	b933      	cbnz	r3, 80033d4 <_free_r+0x2c>
 80033c6:	6063      	str	r3, [r4, #4]
 80033c8:	6014      	str	r4, [r2, #0]
 80033ca:	4628      	mov	r0, r5
 80033cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033d0:	f000 b8da 	b.w	8003588 <__malloc_unlock>
 80033d4:	42a3      	cmp	r3, r4
 80033d6:	d908      	bls.n	80033ea <_free_r+0x42>
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	1821      	adds	r1, r4, r0
 80033dc:	428b      	cmp	r3, r1
 80033de:	bf01      	itttt	eq
 80033e0:	6819      	ldreq	r1, [r3, #0]
 80033e2:	685b      	ldreq	r3, [r3, #4]
 80033e4:	1809      	addeq	r1, r1, r0
 80033e6:	6021      	streq	r1, [r4, #0]
 80033e8:	e7ed      	b.n	80033c6 <_free_r+0x1e>
 80033ea:	461a      	mov	r2, r3
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	b10b      	cbz	r3, 80033f4 <_free_r+0x4c>
 80033f0:	42a3      	cmp	r3, r4
 80033f2:	d9fa      	bls.n	80033ea <_free_r+0x42>
 80033f4:	6811      	ldr	r1, [r2, #0]
 80033f6:	1850      	adds	r0, r2, r1
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d10b      	bne.n	8003414 <_free_r+0x6c>
 80033fc:	6820      	ldr	r0, [r4, #0]
 80033fe:	4401      	add	r1, r0
 8003400:	1850      	adds	r0, r2, r1
 8003402:	4283      	cmp	r3, r0
 8003404:	6011      	str	r1, [r2, #0]
 8003406:	d1e0      	bne.n	80033ca <_free_r+0x22>
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4408      	add	r0, r1
 800340e:	6010      	str	r0, [r2, #0]
 8003410:	6053      	str	r3, [r2, #4]
 8003412:	e7da      	b.n	80033ca <_free_r+0x22>
 8003414:	d902      	bls.n	800341c <_free_r+0x74>
 8003416:	230c      	movs	r3, #12
 8003418:	602b      	str	r3, [r5, #0]
 800341a:	e7d6      	b.n	80033ca <_free_r+0x22>
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	1821      	adds	r1, r4, r0
 8003420:	428b      	cmp	r3, r1
 8003422:	bf01      	itttt	eq
 8003424:	6819      	ldreq	r1, [r3, #0]
 8003426:	685b      	ldreq	r3, [r3, #4]
 8003428:	1809      	addeq	r1, r1, r0
 800342a:	6021      	streq	r1, [r4, #0]
 800342c:	6063      	str	r3, [r4, #4]
 800342e:	6054      	str	r4, [r2, #4]
 8003430:	e7cb      	b.n	80033ca <_free_r+0x22>
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	200006f8 	.word	0x200006f8

08003438 <sbrk_aligned>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	4e0f      	ldr	r6, [pc, #60]	@ (8003478 <sbrk_aligned+0x40>)
 800343c:	460c      	mov	r4, r1
 800343e:	6831      	ldr	r1, [r6, #0]
 8003440:	4605      	mov	r5, r0
 8003442:	b911      	cbnz	r1, 800344a <sbrk_aligned+0x12>
 8003444:	f000 fb90 	bl	8003b68 <_sbrk_r>
 8003448:	6030      	str	r0, [r6, #0]
 800344a:	4621      	mov	r1, r4
 800344c:	4628      	mov	r0, r5
 800344e:	f000 fb8b 	bl	8003b68 <_sbrk_r>
 8003452:	1c43      	adds	r3, r0, #1
 8003454:	d103      	bne.n	800345e <sbrk_aligned+0x26>
 8003456:	f04f 34ff 	mov.w	r4, #4294967295
 800345a:	4620      	mov	r0, r4
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	1cc4      	adds	r4, r0, #3
 8003460:	f024 0403 	bic.w	r4, r4, #3
 8003464:	42a0      	cmp	r0, r4
 8003466:	d0f8      	beq.n	800345a <sbrk_aligned+0x22>
 8003468:	1a21      	subs	r1, r4, r0
 800346a:	4628      	mov	r0, r5
 800346c:	f000 fb7c 	bl	8003b68 <_sbrk_r>
 8003470:	3001      	adds	r0, #1
 8003472:	d1f2      	bne.n	800345a <sbrk_aligned+0x22>
 8003474:	e7ef      	b.n	8003456 <sbrk_aligned+0x1e>
 8003476:	bf00      	nop
 8003478:	200006f4 	.word	0x200006f4

0800347c <_malloc_r>:
 800347c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003480:	1ccd      	adds	r5, r1, #3
 8003482:	f025 0503 	bic.w	r5, r5, #3
 8003486:	3508      	adds	r5, #8
 8003488:	2d0c      	cmp	r5, #12
 800348a:	bf38      	it	cc
 800348c:	250c      	movcc	r5, #12
 800348e:	2d00      	cmp	r5, #0
 8003490:	4606      	mov	r6, r0
 8003492:	db01      	blt.n	8003498 <_malloc_r+0x1c>
 8003494:	42a9      	cmp	r1, r5
 8003496:	d904      	bls.n	80034a2 <_malloc_r+0x26>
 8003498:	230c      	movs	r3, #12
 800349a:	6033      	str	r3, [r6, #0]
 800349c:	2000      	movs	r0, #0
 800349e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003578 <_malloc_r+0xfc>
 80034a6:	f000 f869 	bl	800357c <__malloc_lock>
 80034aa:	f8d8 3000 	ldr.w	r3, [r8]
 80034ae:	461c      	mov	r4, r3
 80034b0:	bb44      	cbnz	r4, 8003504 <_malloc_r+0x88>
 80034b2:	4629      	mov	r1, r5
 80034b4:	4630      	mov	r0, r6
 80034b6:	f7ff ffbf 	bl	8003438 <sbrk_aligned>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	4604      	mov	r4, r0
 80034be:	d158      	bne.n	8003572 <_malloc_r+0xf6>
 80034c0:	f8d8 4000 	ldr.w	r4, [r8]
 80034c4:	4627      	mov	r7, r4
 80034c6:	2f00      	cmp	r7, #0
 80034c8:	d143      	bne.n	8003552 <_malloc_r+0xd6>
 80034ca:	2c00      	cmp	r4, #0
 80034cc:	d04b      	beq.n	8003566 <_malloc_r+0xea>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	4639      	mov	r1, r7
 80034d2:	4630      	mov	r0, r6
 80034d4:	eb04 0903 	add.w	r9, r4, r3
 80034d8:	f000 fb46 	bl	8003b68 <_sbrk_r>
 80034dc:	4581      	cmp	r9, r0
 80034de:	d142      	bne.n	8003566 <_malloc_r+0xea>
 80034e0:	6821      	ldr	r1, [r4, #0]
 80034e2:	4630      	mov	r0, r6
 80034e4:	1a6d      	subs	r5, r5, r1
 80034e6:	4629      	mov	r1, r5
 80034e8:	f7ff ffa6 	bl	8003438 <sbrk_aligned>
 80034ec:	3001      	adds	r0, #1
 80034ee:	d03a      	beq.n	8003566 <_malloc_r+0xea>
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	442b      	add	r3, r5
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	f8d8 3000 	ldr.w	r3, [r8]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	bb62      	cbnz	r2, 8003558 <_malloc_r+0xdc>
 80034fe:	f8c8 7000 	str.w	r7, [r8]
 8003502:	e00f      	b.n	8003524 <_malloc_r+0xa8>
 8003504:	6822      	ldr	r2, [r4, #0]
 8003506:	1b52      	subs	r2, r2, r5
 8003508:	d420      	bmi.n	800354c <_malloc_r+0xd0>
 800350a:	2a0b      	cmp	r2, #11
 800350c:	d917      	bls.n	800353e <_malloc_r+0xc2>
 800350e:	1961      	adds	r1, r4, r5
 8003510:	42a3      	cmp	r3, r4
 8003512:	6025      	str	r5, [r4, #0]
 8003514:	bf18      	it	ne
 8003516:	6059      	strne	r1, [r3, #4]
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	bf08      	it	eq
 800351c:	f8c8 1000 	streq.w	r1, [r8]
 8003520:	5162      	str	r2, [r4, r5]
 8003522:	604b      	str	r3, [r1, #4]
 8003524:	4630      	mov	r0, r6
 8003526:	f000 f82f 	bl	8003588 <__malloc_unlock>
 800352a:	f104 000b 	add.w	r0, r4, #11
 800352e:	1d23      	adds	r3, r4, #4
 8003530:	f020 0007 	bic.w	r0, r0, #7
 8003534:	1ac2      	subs	r2, r0, r3
 8003536:	bf1c      	itt	ne
 8003538:	1a1b      	subne	r3, r3, r0
 800353a:	50a3      	strne	r3, [r4, r2]
 800353c:	e7af      	b.n	800349e <_malloc_r+0x22>
 800353e:	6862      	ldr	r2, [r4, #4]
 8003540:	42a3      	cmp	r3, r4
 8003542:	bf0c      	ite	eq
 8003544:	f8c8 2000 	streq.w	r2, [r8]
 8003548:	605a      	strne	r2, [r3, #4]
 800354a:	e7eb      	b.n	8003524 <_malloc_r+0xa8>
 800354c:	4623      	mov	r3, r4
 800354e:	6864      	ldr	r4, [r4, #4]
 8003550:	e7ae      	b.n	80034b0 <_malloc_r+0x34>
 8003552:	463c      	mov	r4, r7
 8003554:	687f      	ldr	r7, [r7, #4]
 8003556:	e7b6      	b.n	80034c6 <_malloc_r+0x4a>
 8003558:	461a      	mov	r2, r3
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	42a3      	cmp	r3, r4
 800355e:	d1fb      	bne.n	8003558 <_malloc_r+0xdc>
 8003560:	2300      	movs	r3, #0
 8003562:	6053      	str	r3, [r2, #4]
 8003564:	e7de      	b.n	8003524 <_malloc_r+0xa8>
 8003566:	230c      	movs	r3, #12
 8003568:	4630      	mov	r0, r6
 800356a:	6033      	str	r3, [r6, #0]
 800356c:	f000 f80c 	bl	8003588 <__malloc_unlock>
 8003570:	e794      	b.n	800349c <_malloc_r+0x20>
 8003572:	6005      	str	r5, [r0, #0]
 8003574:	e7d6      	b.n	8003524 <_malloc_r+0xa8>
 8003576:	bf00      	nop
 8003578:	200006f8 	.word	0x200006f8

0800357c <__malloc_lock>:
 800357c:	4801      	ldr	r0, [pc, #4]	@ (8003584 <__malloc_lock+0x8>)
 800357e:	f7ff bf03 	b.w	8003388 <__retarget_lock_acquire_recursive>
 8003582:	bf00      	nop
 8003584:	200006f0 	.word	0x200006f0

08003588 <__malloc_unlock>:
 8003588:	4801      	ldr	r0, [pc, #4]	@ (8003590 <__malloc_unlock+0x8>)
 800358a:	f7ff befe 	b.w	800338a <__retarget_lock_release_recursive>
 800358e:	bf00      	nop
 8003590:	200006f0 	.word	0x200006f0

08003594 <__ssputs_r>:
 8003594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003598:	461f      	mov	r7, r3
 800359a:	688e      	ldr	r6, [r1, #8]
 800359c:	4682      	mov	sl, r0
 800359e:	42be      	cmp	r6, r7
 80035a0:	460c      	mov	r4, r1
 80035a2:	4690      	mov	r8, r2
 80035a4:	680b      	ldr	r3, [r1, #0]
 80035a6:	d82d      	bhi.n	8003604 <__ssputs_r+0x70>
 80035a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035b0:	d026      	beq.n	8003600 <__ssputs_r+0x6c>
 80035b2:	6965      	ldr	r5, [r4, #20]
 80035b4:	6909      	ldr	r1, [r1, #16]
 80035b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035ba:	eba3 0901 	sub.w	r9, r3, r1
 80035be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035c2:	1c7b      	adds	r3, r7, #1
 80035c4:	444b      	add	r3, r9
 80035c6:	106d      	asrs	r5, r5, #1
 80035c8:	429d      	cmp	r5, r3
 80035ca:	bf38      	it	cc
 80035cc:	461d      	movcc	r5, r3
 80035ce:	0553      	lsls	r3, r2, #21
 80035d0:	d527      	bpl.n	8003622 <__ssputs_r+0x8e>
 80035d2:	4629      	mov	r1, r5
 80035d4:	f7ff ff52 	bl	800347c <_malloc_r>
 80035d8:	4606      	mov	r6, r0
 80035da:	b360      	cbz	r0, 8003636 <__ssputs_r+0xa2>
 80035dc:	464a      	mov	r2, r9
 80035de:	6921      	ldr	r1, [r4, #16]
 80035e0:	f7ff fed4 	bl	800338c <memcpy>
 80035e4:	89a3      	ldrh	r3, [r4, #12]
 80035e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ee:	81a3      	strh	r3, [r4, #12]
 80035f0:	6126      	str	r6, [r4, #16]
 80035f2:	444e      	add	r6, r9
 80035f4:	6026      	str	r6, [r4, #0]
 80035f6:	463e      	mov	r6, r7
 80035f8:	6165      	str	r5, [r4, #20]
 80035fa:	eba5 0509 	sub.w	r5, r5, r9
 80035fe:	60a5      	str	r5, [r4, #8]
 8003600:	42be      	cmp	r6, r7
 8003602:	d900      	bls.n	8003606 <__ssputs_r+0x72>
 8003604:	463e      	mov	r6, r7
 8003606:	4632      	mov	r2, r6
 8003608:	4641      	mov	r1, r8
 800360a:	6820      	ldr	r0, [r4, #0]
 800360c:	f7ff fe5c 	bl	80032c8 <memmove>
 8003610:	2000      	movs	r0, #0
 8003612:	68a3      	ldr	r3, [r4, #8]
 8003614:	1b9b      	subs	r3, r3, r6
 8003616:	60a3      	str	r3, [r4, #8]
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	4433      	add	r3, r6
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003622:	462a      	mov	r2, r5
 8003624:	f000 fabe 	bl	8003ba4 <_realloc_r>
 8003628:	4606      	mov	r6, r0
 800362a:	2800      	cmp	r0, #0
 800362c:	d1e0      	bne.n	80035f0 <__ssputs_r+0x5c>
 800362e:	4650      	mov	r0, sl
 8003630:	6921      	ldr	r1, [r4, #16]
 8003632:	f7ff feb9 	bl	80033a8 <_free_r>
 8003636:	230c      	movs	r3, #12
 8003638:	f8ca 3000 	str.w	r3, [sl]
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	f04f 30ff 	mov.w	r0, #4294967295
 8003642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003646:	81a3      	strh	r3, [r4, #12]
 8003648:	e7e9      	b.n	800361e <__ssputs_r+0x8a>
	...

0800364c <_svfiprintf_r>:
 800364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003650:	4698      	mov	r8, r3
 8003652:	898b      	ldrh	r3, [r1, #12]
 8003654:	4607      	mov	r7, r0
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	460d      	mov	r5, r1
 800365a:	4614      	mov	r4, r2
 800365c:	b09d      	sub	sp, #116	@ 0x74
 800365e:	d510      	bpl.n	8003682 <_svfiprintf_r+0x36>
 8003660:	690b      	ldr	r3, [r1, #16]
 8003662:	b973      	cbnz	r3, 8003682 <_svfiprintf_r+0x36>
 8003664:	2140      	movs	r1, #64	@ 0x40
 8003666:	f7ff ff09 	bl	800347c <_malloc_r>
 800366a:	6028      	str	r0, [r5, #0]
 800366c:	6128      	str	r0, [r5, #16]
 800366e:	b930      	cbnz	r0, 800367e <_svfiprintf_r+0x32>
 8003670:	230c      	movs	r3, #12
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	b01d      	add	sp, #116	@ 0x74
 800367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367e:	2340      	movs	r3, #64	@ 0x40
 8003680:	616b      	str	r3, [r5, #20]
 8003682:	2300      	movs	r3, #0
 8003684:	9309      	str	r3, [sp, #36]	@ 0x24
 8003686:	2320      	movs	r3, #32
 8003688:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800368c:	2330      	movs	r3, #48	@ 0x30
 800368e:	f04f 0901 	mov.w	r9, #1
 8003692:	f8cd 800c 	str.w	r8, [sp, #12]
 8003696:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003830 <_svfiprintf_r+0x1e4>
 800369a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800369e:	4623      	mov	r3, r4
 80036a0:	469a      	mov	sl, r3
 80036a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a6:	b10a      	cbz	r2, 80036ac <_svfiprintf_r+0x60>
 80036a8:	2a25      	cmp	r2, #37	@ 0x25
 80036aa:	d1f9      	bne.n	80036a0 <_svfiprintf_r+0x54>
 80036ac:	ebba 0b04 	subs.w	fp, sl, r4
 80036b0:	d00b      	beq.n	80036ca <_svfiprintf_r+0x7e>
 80036b2:	465b      	mov	r3, fp
 80036b4:	4622      	mov	r2, r4
 80036b6:	4629      	mov	r1, r5
 80036b8:	4638      	mov	r0, r7
 80036ba:	f7ff ff6b 	bl	8003594 <__ssputs_r>
 80036be:	3001      	adds	r0, #1
 80036c0:	f000 80a7 	beq.w	8003812 <_svfiprintf_r+0x1c6>
 80036c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036c6:	445a      	add	r2, fp
 80036c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80036ca:	f89a 3000 	ldrb.w	r3, [sl]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 809f 	beq.w	8003812 <_svfiprintf_r+0x1c6>
 80036d4:	2300      	movs	r3, #0
 80036d6:	f04f 32ff 	mov.w	r2, #4294967295
 80036da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036de:	f10a 0a01 	add.w	sl, sl, #1
 80036e2:	9304      	str	r3, [sp, #16]
 80036e4:	9307      	str	r3, [sp, #28]
 80036e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80036ec:	4654      	mov	r4, sl
 80036ee:	2205      	movs	r2, #5
 80036f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f4:	484e      	ldr	r0, [pc, #312]	@ (8003830 <_svfiprintf_r+0x1e4>)
 80036f6:	f000 fa47 	bl	8003b88 <memchr>
 80036fa:	9a04      	ldr	r2, [sp, #16]
 80036fc:	b9d8      	cbnz	r0, 8003736 <_svfiprintf_r+0xea>
 80036fe:	06d0      	lsls	r0, r2, #27
 8003700:	bf44      	itt	mi
 8003702:	2320      	movmi	r3, #32
 8003704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003708:	0711      	lsls	r1, r2, #28
 800370a:	bf44      	itt	mi
 800370c:	232b      	movmi	r3, #43	@ 0x2b
 800370e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003712:	f89a 3000 	ldrb.w	r3, [sl]
 8003716:	2b2a      	cmp	r3, #42	@ 0x2a
 8003718:	d015      	beq.n	8003746 <_svfiprintf_r+0xfa>
 800371a:	4654      	mov	r4, sl
 800371c:	2000      	movs	r0, #0
 800371e:	f04f 0c0a 	mov.w	ip, #10
 8003722:	9a07      	ldr	r2, [sp, #28]
 8003724:	4621      	mov	r1, r4
 8003726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800372a:	3b30      	subs	r3, #48	@ 0x30
 800372c:	2b09      	cmp	r3, #9
 800372e:	d94b      	bls.n	80037c8 <_svfiprintf_r+0x17c>
 8003730:	b1b0      	cbz	r0, 8003760 <_svfiprintf_r+0x114>
 8003732:	9207      	str	r2, [sp, #28]
 8003734:	e014      	b.n	8003760 <_svfiprintf_r+0x114>
 8003736:	eba0 0308 	sub.w	r3, r0, r8
 800373a:	fa09 f303 	lsl.w	r3, r9, r3
 800373e:	4313      	orrs	r3, r2
 8003740:	46a2      	mov	sl, r4
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	e7d2      	b.n	80036ec <_svfiprintf_r+0xa0>
 8003746:	9b03      	ldr	r3, [sp, #12]
 8003748:	1d19      	adds	r1, r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	9103      	str	r1, [sp, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	bfbb      	ittet	lt
 8003752:	425b      	neglt	r3, r3
 8003754:	f042 0202 	orrlt.w	r2, r2, #2
 8003758:	9307      	strge	r3, [sp, #28]
 800375a:	9307      	strlt	r3, [sp, #28]
 800375c:	bfb8      	it	lt
 800375e:	9204      	strlt	r2, [sp, #16]
 8003760:	7823      	ldrb	r3, [r4, #0]
 8003762:	2b2e      	cmp	r3, #46	@ 0x2e
 8003764:	d10a      	bne.n	800377c <_svfiprintf_r+0x130>
 8003766:	7863      	ldrb	r3, [r4, #1]
 8003768:	2b2a      	cmp	r3, #42	@ 0x2a
 800376a:	d132      	bne.n	80037d2 <_svfiprintf_r+0x186>
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	3402      	adds	r4, #2
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	9203      	str	r2, [sp, #12]
 8003776:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800377a:	9305      	str	r3, [sp, #20]
 800377c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003834 <_svfiprintf_r+0x1e8>
 8003780:	2203      	movs	r2, #3
 8003782:	4650      	mov	r0, sl
 8003784:	7821      	ldrb	r1, [r4, #0]
 8003786:	f000 f9ff 	bl	8003b88 <memchr>
 800378a:	b138      	cbz	r0, 800379c <_svfiprintf_r+0x150>
 800378c:	2240      	movs	r2, #64	@ 0x40
 800378e:	9b04      	ldr	r3, [sp, #16]
 8003790:	eba0 000a 	sub.w	r0, r0, sl
 8003794:	4082      	lsls	r2, r0
 8003796:	4313      	orrs	r3, r2
 8003798:	3401      	adds	r4, #1
 800379a:	9304      	str	r3, [sp, #16]
 800379c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a0:	2206      	movs	r2, #6
 80037a2:	4825      	ldr	r0, [pc, #148]	@ (8003838 <_svfiprintf_r+0x1ec>)
 80037a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037a8:	f000 f9ee 	bl	8003b88 <memchr>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d036      	beq.n	800381e <_svfiprintf_r+0x1d2>
 80037b0:	4b22      	ldr	r3, [pc, #136]	@ (800383c <_svfiprintf_r+0x1f0>)
 80037b2:	bb1b      	cbnz	r3, 80037fc <_svfiprintf_r+0x1b0>
 80037b4:	9b03      	ldr	r3, [sp, #12]
 80037b6:	3307      	adds	r3, #7
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	3308      	adds	r3, #8
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037c2:	4433      	add	r3, r6
 80037c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80037c6:	e76a      	b.n	800369e <_svfiprintf_r+0x52>
 80037c8:	460c      	mov	r4, r1
 80037ca:	2001      	movs	r0, #1
 80037cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80037d0:	e7a8      	b.n	8003724 <_svfiprintf_r+0xd8>
 80037d2:	2300      	movs	r3, #0
 80037d4:	f04f 0c0a 	mov.w	ip, #10
 80037d8:	4619      	mov	r1, r3
 80037da:	3401      	adds	r4, #1
 80037dc:	9305      	str	r3, [sp, #20]
 80037de:	4620      	mov	r0, r4
 80037e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e4:	3a30      	subs	r2, #48	@ 0x30
 80037e6:	2a09      	cmp	r2, #9
 80037e8:	d903      	bls.n	80037f2 <_svfiprintf_r+0x1a6>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0c6      	beq.n	800377c <_svfiprintf_r+0x130>
 80037ee:	9105      	str	r1, [sp, #20]
 80037f0:	e7c4      	b.n	800377c <_svfiprintf_r+0x130>
 80037f2:	4604      	mov	r4, r0
 80037f4:	2301      	movs	r3, #1
 80037f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80037fa:	e7f0      	b.n	80037de <_svfiprintf_r+0x192>
 80037fc:	ab03      	add	r3, sp, #12
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	462a      	mov	r2, r5
 8003802:	4638      	mov	r0, r7
 8003804:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <_svfiprintf_r+0x1f4>)
 8003806:	a904      	add	r1, sp, #16
 8003808:	f3af 8000 	nop.w
 800380c:	1c42      	adds	r2, r0, #1
 800380e:	4606      	mov	r6, r0
 8003810:	d1d6      	bne.n	80037c0 <_svfiprintf_r+0x174>
 8003812:	89ab      	ldrh	r3, [r5, #12]
 8003814:	065b      	lsls	r3, r3, #25
 8003816:	f53f af2d 	bmi.w	8003674 <_svfiprintf_r+0x28>
 800381a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800381c:	e72c      	b.n	8003678 <_svfiprintf_r+0x2c>
 800381e:	ab03      	add	r3, sp, #12
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	462a      	mov	r2, r5
 8003824:	4638      	mov	r0, r7
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <_svfiprintf_r+0x1f4>)
 8003828:	a904      	add	r1, sp, #16
 800382a:	f000 f87d 	bl	8003928 <_printf_i>
 800382e:	e7ed      	b.n	800380c <_svfiprintf_r+0x1c0>
 8003830:	08005a2a 	.word	0x08005a2a
 8003834:	08005a30 	.word	0x08005a30
 8003838:	08005a34 	.word	0x08005a34
 800383c:	00000000 	.word	0x00000000
 8003840:	08003595 	.word	0x08003595

08003844 <_printf_common>:
 8003844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	4616      	mov	r6, r2
 800384a:	4698      	mov	r8, r3
 800384c:	688a      	ldr	r2, [r1, #8]
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	4607      	mov	r7, r0
 8003852:	4293      	cmp	r3, r2
 8003854:	bfb8      	it	lt
 8003856:	4613      	movlt	r3, r2
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800385e:	460c      	mov	r4, r1
 8003860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003864:	b10a      	cbz	r2, 800386a <_printf_common+0x26>
 8003866:	3301      	adds	r3, #1
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	0699      	lsls	r1, r3, #26
 800386e:	bf42      	ittt	mi
 8003870:	6833      	ldrmi	r3, [r6, #0]
 8003872:	3302      	addmi	r3, #2
 8003874:	6033      	strmi	r3, [r6, #0]
 8003876:	6825      	ldr	r5, [r4, #0]
 8003878:	f015 0506 	ands.w	r5, r5, #6
 800387c:	d106      	bne.n	800388c <_printf_common+0x48>
 800387e:	f104 0a19 	add.w	sl, r4, #25
 8003882:	68e3      	ldr	r3, [r4, #12]
 8003884:	6832      	ldr	r2, [r6, #0]
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	42ab      	cmp	r3, r5
 800388a:	dc2b      	bgt.n	80038e4 <_printf_common+0xa0>
 800388c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	3b00      	subs	r3, #0
 8003894:	bf18      	it	ne
 8003896:	2301      	movne	r3, #1
 8003898:	0692      	lsls	r2, r2, #26
 800389a:	d430      	bmi.n	80038fe <_printf_common+0xba>
 800389c:	4641      	mov	r1, r8
 800389e:	4638      	mov	r0, r7
 80038a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038a4:	47c8      	blx	r9
 80038a6:	3001      	adds	r0, #1
 80038a8:	d023      	beq.n	80038f2 <_printf_common+0xae>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	6922      	ldr	r2, [r4, #16]
 80038ae:	f003 0306 	and.w	r3, r3, #6
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf14      	ite	ne
 80038b6:	2500      	movne	r5, #0
 80038b8:	6833      	ldreq	r3, [r6, #0]
 80038ba:	f04f 0600 	mov.w	r6, #0
 80038be:	bf08      	it	eq
 80038c0:	68e5      	ldreq	r5, [r4, #12]
 80038c2:	f104 041a 	add.w	r4, r4, #26
 80038c6:	bf08      	it	eq
 80038c8:	1aed      	subeq	r5, r5, r3
 80038ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038ce:	bf08      	it	eq
 80038d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bfc4      	itt	gt
 80038d8:	1a9b      	subgt	r3, r3, r2
 80038da:	18ed      	addgt	r5, r5, r3
 80038dc:	42b5      	cmp	r5, r6
 80038de:	d11a      	bne.n	8003916 <_printf_common+0xd2>
 80038e0:	2000      	movs	r0, #0
 80038e2:	e008      	b.n	80038f6 <_printf_common+0xb2>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4652      	mov	r2, sl
 80038e8:	4641      	mov	r1, r8
 80038ea:	4638      	mov	r0, r7
 80038ec:	47c8      	blx	r9
 80038ee:	3001      	adds	r0, #1
 80038f0:	d103      	bne.n	80038fa <_printf_common+0xb6>
 80038f2:	f04f 30ff 	mov.w	r0, #4294967295
 80038f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038fa:	3501      	adds	r5, #1
 80038fc:	e7c1      	b.n	8003882 <_printf_common+0x3e>
 80038fe:	2030      	movs	r0, #48	@ 0x30
 8003900:	18e1      	adds	r1, r4, r3
 8003902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800390c:	4422      	add	r2, r4
 800390e:	3302      	adds	r3, #2
 8003910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003914:	e7c2      	b.n	800389c <_printf_common+0x58>
 8003916:	2301      	movs	r3, #1
 8003918:	4622      	mov	r2, r4
 800391a:	4641      	mov	r1, r8
 800391c:	4638      	mov	r0, r7
 800391e:	47c8      	blx	r9
 8003920:	3001      	adds	r0, #1
 8003922:	d0e6      	beq.n	80038f2 <_printf_common+0xae>
 8003924:	3601      	adds	r6, #1
 8003926:	e7d9      	b.n	80038dc <_printf_common+0x98>

08003928 <_printf_i>:
 8003928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800392c:	7e0f      	ldrb	r7, [r1, #24]
 800392e:	4691      	mov	r9, r2
 8003930:	2f78      	cmp	r7, #120	@ 0x78
 8003932:	4680      	mov	r8, r0
 8003934:	460c      	mov	r4, r1
 8003936:	469a      	mov	sl, r3
 8003938:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800393a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800393e:	d807      	bhi.n	8003950 <_printf_i+0x28>
 8003940:	2f62      	cmp	r7, #98	@ 0x62
 8003942:	d80a      	bhi.n	800395a <_printf_i+0x32>
 8003944:	2f00      	cmp	r7, #0
 8003946:	f000 80d3 	beq.w	8003af0 <_printf_i+0x1c8>
 800394a:	2f58      	cmp	r7, #88	@ 0x58
 800394c:	f000 80ba 	beq.w	8003ac4 <_printf_i+0x19c>
 8003950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003958:	e03a      	b.n	80039d0 <_printf_i+0xa8>
 800395a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800395e:	2b15      	cmp	r3, #21
 8003960:	d8f6      	bhi.n	8003950 <_printf_i+0x28>
 8003962:	a101      	add	r1, pc, #4	@ (adr r1, 8003968 <_printf_i+0x40>)
 8003964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003968:	080039c1 	.word	0x080039c1
 800396c:	080039d5 	.word	0x080039d5
 8003970:	08003951 	.word	0x08003951
 8003974:	08003951 	.word	0x08003951
 8003978:	08003951 	.word	0x08003951
 800397c:	08003951 	.word	0x08003951
 8003980:	080039d5 	.word	0x080039d5
 8003984:	08003951 	.word	0x08003951
 8003988:	08003951 	.word	0x08003951
 800398c:	08003951 	.word	0x08003951
 8003990:	08003951 	.word	0x08003951
 8003994:	08003ad7 	.word	0x08003ad7
 8003998:	080039ff 	.word	0x080039ff
 800399c:	08003a91 	.word	0x08003a91
 80039a0:	08003951 	.word	0x08003951
 80039a4:	08003951 	.word	0x08003951
 80039a8:	08003af9 	.word	0x08003af9
 80039ac:	08003951 	.word	0x08003951
 80039b0:	080039ff 	.word	0x080039ff
 80039b4:	08003951 	.word	0x08003951
 80039b8:	08003951 	.word	0x08003951
 80039bc:	08003a99 	.word	0x08003a99
 80039c0:	6833      	ldr	r3, [r6, #0]
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6032      	str	r2, [r6, #0]
 80039c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039d0:	2301      	movs	r3, #1
 80039d2:	e09e      	b.n	8003b12 <_printf_i+0x1ea>
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	1d19      	adds	r1, r3, #4
 80039da:	6031      	str	r1, [r6, #0]
 80039dc:	0606      	lsls	r6, r0, #24
 80039de:	d501      	bpl.n	80039e4 <_printf_i+0xbc>
 80039e0:	681d      	ldr	r5, [r3, #0]
 80039e2:	e003      	b.n	80039ec <_printf_i+0xc4>
 80039e4:	0645      	lsls	r5, r0, #25
 80039e6:	d5fb      	bpl.n	80039e0 <_printf_i+0xb8>
 80039e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039ec:	2d00      	cmp	r5, #0
 80039ee:	da03      	bge.n	80039f8 <_printf_i+0xd0>
 80039f0:	232d      	movs	r3, #45	@ 0x2d
 80039f2:	426d      	negs	r5, r5
 80039f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039f8:	230a      	movs	r3, #10
 80039fa:	4859      	ldr	r0, [pc, #356]	@ (8003b60 <_printf_i+0x238>)
 80039fc:	e011      	b.n	8003a22 <_printf_i+0xfa>
 80039fe:	6821      	ldr	r1, [r4, #0]
 8003a00:	6833      	ldr	r3, [r6, #0]
 8003a02:	0608      	lsls	r0, r1, #24
 8003a04:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a08:	d402      	bmi.n	8003a10 <_printf_i+0xe8>
 8003a0a:	0649      	lsls	r1, r1, #25
 8003a0c:	bf48      	it	mi
 8003a0e:	b2ad      	uxthmi	r5, r5
 8003a10:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a12:	6033      	str	r3, [r6, #0]
 8003a14:	bf14      	ite	ne
 8003a16:	230a      	movne	r3, #10
 8003a18:	2308      	moveq	r3, #8
 8003a1a:	4851      	ldr	r0, [pc, #324]	@ (8003b60 <_printf_i+0x238>)
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a22:	6866      	ldr	r6, [r4, #4]
 8003a24:	2e00      	cmp	r6, #0
 8003a26:	bfa8      	it	ge
 8003a28:	6821      	ldrge	r1, [r4, #0]
 8003a2a:	60a6      	str	r6, [r4, #8]
 8003a2c:	bfa4      	itt	ge
 8003a2e:	f021 0104 	bicge.w	r1, r1, #4
 8003a32:	6021      	strge	r1, [r4, #0]
 8003a34:	b90d      	cbnz	r5, 8003a3a <_printf_i+0x112>
 8003a36:	2e00      	cmp	r6, #0
 8003a38:	d04b      	beq.n	8003ad2 <_printf_i+0x1aa>
 8003a3a:	4616      	mov	r6, r2
 8003a3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a40:	fb03 5711 	mls	r7, r3, r1, r5
 8003a44:	5dc7      	ldrb	r7, [r0, r7]
 8003a46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a4a:	462f      	mov	r7, r5
 8003a4c:	42bb      	cmp	r3, r7
 8003a4e:	460d      	mov	r5, r1
 8003a50:	d9f4      	bls.n	8003a3c <_printf_i+0x114>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d10b      	bne.n	8003a6e <_printf_i+0x146>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	07df      	lsls	r7, r3, #31
 8003a5a:	d508      	bpl.n	8003a6e <_printf_i+0x146>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	6861      	ldr	r1, [r4, #4]
 8003a60:	4299      	cmp	r1, r3
 8003a62:	bfde      	ittt	le
 8003a64:	2330      	movle	r3, #48	@ 0x30
 8003a66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a6e:	1b92      	subs	r2, r2, r6
 8003a70:	6122      	str	r2, [r4, #16]
 8003a72:	464b      	mov	r3, r9
 8003a74:	4621      	mov	r1, r4
 8003a76:	4640      	mov	r0, r8
 8003a78:	f8cd a000 	str.w	sl, [sp]
 8003a7c:	aa03      	add	r2, sp, #12
 8003a7e:	f7ff fee1 	bl	8003844 <_printf_common>
 8003a82:	3001      	adds	r0, #1
 8003a84:	d14a      	bne.n	8003b1c <_printf_i+0x1f4>
 8003a86:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8a:	b004      	add	sp, #16
 8003a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	6023      	str	r3, [r4, #0]
 8003a98:	2778      	movs	r7, #120	@ 0x78
 8003a9a:	4832      	ldr	r0, [pc, #200]	@ (8003b64 <_printf_i+0x23c>)
 8003a9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	6831      	ldr	r1, [r6, #0]
 8003aa4:	061f      	lsls	r7, r3, #24
 8003aa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003aaa:	d402      	bmi.n	8003ab2 <_printf_i+0x18a>
 8003aac:	065f      	lsls	r7, r3, #25
 8003aae:	bf48      	it	mi
 8003ab0:	b2ad      	uxthmi	r5, r5
 8003ab2:	6031      	str	r1, [r6, #0]
 8003ab4:	07d9      	lsls	r1, r3, #31
 8003ab6:	bf44      	itt	mi
 8003ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8003abc:	6023      	strmi	r3, [r4, #0]
 8003abe:	b11d      	cbz	r5, 8003ac8 <_printf_i+0x1a0>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	e7ab      	b.n	8003a1c <_printf_i+0xf4>
 8003ac4:	4826      	ldr	r0, [pc, #152]	@ (8003b60 <_printf_i+0x238>)
 8003ac6:	e7e9      	b.n	8003a9c <_printf_i+0x174>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	f023 0320 	bic.w	r3, r3, #32
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	e7f6      	b.n	8003ac0 <_printf_i+0x198>
 8003ad2:	4616      	mov	r6, r2
 8003ad4:	e7bd      	b.n	8003a52 <_printf_i+0x12a>
 8003ad6:	6833      	ldr	r3, [r6, #0]
 8003ad8:	6825      	ldr	r5, [r4, #0]
 8003ada:	1d18      	adds	r0, r3, #4
 8003adc:	6961      	ldr	r1, [r4, #20]
 8003ade:	6030      	str	r0, [r6, #0]
 8003ae0:	062e      	lsls	r6, r5, #24
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	d501      	bpl.n	8003aea <_printf_i+0x1c2>
 8003ae6:	6019      	str	r1, [r3, #0]
 8003ae8:	e002      	b.n	8003af0 <_printf_i+0x1c8>
 8003aea:	0668      	lsls	r0, r5, #25
 8003aec:	d5fb      	bpl.n	8003ae6 <_printf_i+0x1be>
 8003aee:	8019      	strh	r1, [r3, #0]
 8003af0:	2300      	movs	r3, #0
 8003af2:	4616      	mov	r6, r2
 8003af4:	6123      	str	r3, [r4, #16]
 8003af6:	e7bc      	b.n	8003a72 <_printf_i+0x14a>
 8003af8:	6833      	ldr	r3, [r6, #0]
 8003afa:	2100      	movs	r1, #0
 8003afc:	1d1a      	adds	r2, r3, #4
 8003afe:	6032      	str	r2, [r6, #0]
 8003b00:	681e      	ldr	r6, [r3, #0]
 8003b02:	6862      	ldr	r2, [r4, #4]
 8003b04:	4630      	mov	r0, r6
 8003b06:	f000 f83f 	bl	8003b88 <memchr>
 8003b0a:	b108      	cbz	r0, 8003b10 <_printf_i+0x1e8>
 8003b0c:	1b80      	subs	r0, r0, r6
 8003b0e:	6060      	str	r0, [r4, #4]
 8003b10:	6863      	ldr	r3, [r4, #4]
 8003b12:	6123      	str	r3, [r4, #16]
 8003b14:	2300      	movs	r3, #0
 8003b16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b1a:	e7aa      	b.n	8003a72 <_printf_i+0x14a>
 8003b1c:	4632      	mov	r2, r6
 8003b1e:	4649      	mov	r1, r9
 8003b20:	4640      	mov	r0, r8
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	47d0      	blx	sl
 8003b26:	3001      	adds	r0, #1
 8003b28:	d0ad      	beq.n	8003a86 <_printf_i+0x15e>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	079b      	lsls	r3, r3, #30
 8003b2e:	d413      	bmi.n	8003b58 <_printf_i+0x230>
 8003b30:	68e0      	ldr	r0, [r4, #12]
 8003b32:	9b03      	ldr	r3, [sp, #12]
 8003b34:	4298      	cmp	r0, r3
 8003b36:	bfb8      	it	lt
 8003b38:	4618      	movlt	r0, r3
 8003b3a:	e7a6      	b.n	8003a8a <_printf_i+0x162>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	4632      	mov	r2, r6
 8003b40:	4649      	mov	r1, r9
 8003b42:	4640      	mov	r0, r8
 8003b44:	47d0      	blx	sl
 8003b46:	3001      	adds	r0, #1
 8003b48:	d09d      	beq.n	8003a86 <_printf_i+0x15e>
 8003b4a:	3501      	adds	r5, #1
 8003b4c:	68e3      	ldr	r3, [r4, #12]
 8003b4e:	9903      	ldr	r1, [sp, #12]
 8003b50:	1a5b      	subs	r3, r3, r1
 8003b52:	42ab      	cmp	r3, r5
 8003b54:	dcf2      	bgt.n	8003b3c <_printf_i+0x214>
 8003b56:	e7eb      	b.n	8003b30 <_printf_i+0x208>
 8003b58:	2500      	movs	r5, #0
 8003b5a:	f104 0619 	add.w	r6, r4, #25
 8003b5e:	e7f5      	b.n	8003b4c <_printf_i+0x224>
 8003b60:	08005a3b 	.word	0x08005a3b
 8003b64:	08005a4c 	.word	0x08005a4c

08003b68 <_sbrk_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	4d05      	ldr	r5, [pc, #20]	@ (8003b84 <_sbrk_r+0x1c>)
 8003b6e:	4604      	mov	r4, r0
 8003b70:	4608      	mov	r0, r1
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	f7fd ff76 	bl	8001a64 <_sbrk>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d102      	bne.n	8003b82 <_sbrk_r+0x1a>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	b103      	cbz	r3, 8003b82 <_sbrk_r+0x1a>
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	bd38      	pop	{r3, r4, r5, pc}
 8003b84:	200006ec 	.word	0x200006ec

08003b88 <memchr>:
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	b2c9      	uxtb	r1, r1
 8003b8e:	4402      	add	r2, r0
 8003b90:	4293      	cmp	r3, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	d101      	bne.n	8003b9a <memchr+0x12>
 8003b96:	2000      	movs	r0, #0
 8003b98:	e003      	b.n	8003ba2 <memchr+0x1a>
 8003b9a:	7804      	ldrb	r4, [r0, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	428c      	cmp	r4, r1
 8003ba0:	d1f6      	bne.n	8003b90 <memchr+0x8>
 8003ba2:	bd10      	pop	{r4, pc}

08003ba4 <_realloc_r>:
 8003ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	4680      	mov	r8, r0
 8003baa:	4615      	mov	r5, r2
 8003bac:	460c      	mov	r4, r1
 8003bae:	b921      	cbnz	r1, 8003bba <_realloc_r+0x16>
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb6:	f7ff bc61 	b.w	800347c <_malloc_r>
 8003bba:	b92a      	cbnz	r2, 8003bc8 <_realloc_r+0x24>
 8003bbc:	f7ff fbf4 	bl	80033a8 <_free_r>
 8003bc0:	2400      	movs	r4, #0
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc8:	f000 f81a 	bl	8003c00 <_malloc_usable_size_r>
 8003bcc:	4285      	cmp	r5, r0
 8003bce:	4606      	mov	r6, r0
 8003bd0:	d802      	bhi.n	8003bd8 <_realloc_r+0x34>
 8003bd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bd6:	d8f4      	bhi.n	8003bc2 <_realloc_r+0x1e>
 8003bd8:	4629      	mov	r1, r5
 8003bda:	4640      	mov	r0, r8
 8003bdc:	f7ff fc4e 	bl	800347c <_malloc_r>
 8003be0:	4607      	mov	r7, r0
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d0ec      	beq.n	8003bc0 <_realloc_r+0x1c>
 8003be6:	42b5      	cmp	r5, r6
 8003be8:	462a      	mov	r2, r5
 8003bea:	4621      	mov	r1, r4
 8003bec:	bf28      	it	cs
 8003bee:	4632      	movcs	r2, r6
 8003bf0:	f7ff fbcc 	bl	800338c <memcpy>
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	f7ff fbd6 	bl	80033a8 <_free_r>
 8003bfc:	463c      	mov	r4, r7
 8003bfe:	e7e0      	b.n	8003bc2 <_realloc_r+0x1e>

08003c00 <_malloc_usable_size_r>:
 8003c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c04:	1f18      	subs	r0, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bfbc      	itt	lt
 8003c0a:	580b      	ldrlt	r3, [r1, r0]
 8003c0c:	18c0      	addlt	r0, r0, r3
 8003c0e:	4770      	bx	lr

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr
