
kryptkey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e68  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb4  08002f74  08002f74  00003f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b28  08004b28  00006080  2**0
                  CONTENTS
  4 .ARM          00000008  08004b28  08004b28  00005b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b30  08004b30  00006080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b34  08004b34  00005b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08004b38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000080  08004bb8  00006080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08004bb8  00006660  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007420  00000000  00000000  000060a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180f  00000000  00000000  0000d4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000601  00000000  00000000  0000f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ae  00000000  00000000  0000fac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8ff  00000000  00000000  00026b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c74  00000000  00000000  00031476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b40ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c8  00000000  00000000  000b4130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b65f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f5c 	.word	0x08002f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002f5c 	.word	0x08002f5c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <display_menu>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Display the menu of account names */
void display_menu() {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);  // Clear the screen
 8000162:	2000      	movs	r0, #0
 8000164:	f000 fbf8 	bl	8000958 <ssd1306_Fill>

    for (int i = 0; i < sizeof(account_names) / sizeof(account_names[0]); i++) {
 8000168:	2300      	movs	r3, #0
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	e024      	b.n	80001b8 <display_menu+0x5c>
        ssd1306_SetCursor(2, i * 16);  // Set Y position for each line
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	b2db      	uxtb	r3, r3
 8000172:	011b      	lsls	r3, r3, #4
 8000174:	b2db      	uxtb	r3, r3
 8000176:	4619      	mov	r1, r3
 8000178:	2002      	movs	r0, #2
 800017a:	f000 fd35 	bl	8000be8 <ssd1306_SetCursor>

        if (i == current_selection) {
 800017e:	4b13      	ldr	r3, [pc, #76]	@ (80001cc <display_menu+0x70>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	429a      	cmp	r2, r3
 8000186:	d10a      	bne.n	800019e <display_menu+0x42>
            ssd1306_WriteString(account_names[i], Font_11x18, White);  // Highlight selected item
 8000188:	4a11      	ldr	r2, [pc, #68]	@ (80001d0 <display_menu+0x74>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000190:	4b10      	ldr	r3, [pc, #64]	@ (80001d4 <display_menu+0x78>)
 8000192:	2201      	movs	r2, #1
 8000194:	9200      	str	r2, [sp, #0]
 8000196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000198:	f000 fd00 	bl	8000b9c <ssd1306_WriteString>
 800019c:	e009      	b.n	80001b2 <display_menu+0x56>
        } else {
            ssd1306_WriteString(account_names[i], Font_7x10, White);
 800019e:	4a0c      	ldr	r2, [pc, #48]	@ (80001d0 <display_menu+0x74>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001a6:	4b0c      	ldr	r3, [pc, #48]	@ (80001d8 <display_menu+0x7c>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	9200      	str	r2, [sp, #0]
 80001ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001ae:	f000 fcf5 	bl	8000b9c <ssd1306_WriteString>
    for (int i = 0; i < sizeof(account_names) / sizeof(account_names[0]); i++) {
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	3301      	adds	r3, #1
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	d9d7      	bls.n	800016e <display_menu+0x12>
        }
    }
    ssd1306_UpdateScreen();  // Send buffer to display
 80001be:	f000 fbe3 	bl	8000988 <ssd1306_UpdateScreen>
}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	200000f0 	.word	0x200000f0
 80001d0:	20000000 	.word	0x20000000
 80001d4:	08004abc 	.word	0x08004abc
 80001d8:	08004ab0 	.word	0x08004ab0

080001dc <navigate_menu>:

/* Handle menu navigation based on button input */
void navigate_menu(int direction) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
    int menu_size = sizeof(account_names) / sizeof(account_names[0]);
 80001e4:	2303      	movs	r3, #3
 80001e6:	60fb      	str	r3, [r7, #12]
    current_selection += direction;
 80001e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <navigate_menu+0x48>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4413      	add	r3, r2
 80001f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000224 <navigate_menu+0x48>)
 80001f2:	6013      	str	r3, [r2, #0]
    if (current_selection < 0) {
 80001f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <navigate_menu+0x48>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	da04      	bge.n	8000206 <navigate_menu+0x2a>
        current_selection = menu_size - 1;  // Wrap to bottom
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	3b01      	subs	r3, #1
 8000200:	4a08      	ldr	r2, [pc, #32]	@ (8000224 <navigate_menu+0x48>)
 8000202:	6013      	str	r3, [r2, #0]
 8000204:	e007      	b.n	8000216 <navigate_menu+0x3a>
    } else if (current_selection >= menu_size) {
 8000206:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <navigate_menu+0x48>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	429a      	cmp	r2, r3
 800020e:	dc02      	bgt.n	8000216 <navigate_menu+0x3a>
        current_selection = 0;  // Wrap to top
 8000210:	4b04      	ldr	r3, [pc, #16]	@ (8000224 <navigate_menu+0x48>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
    }
    display_menu();  // Update the display
 8000216:	f7ff ffa1 	bl	800015c <display_menu>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	200000f0 	.word	0x200000f0

08000228 <handle_enter_button>:

/* Toggle between menu and account details */
void handle_enter_button() {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
    if (current_state == STATE_MENU) {
 800022c:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <handle_enter_button+0x34>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d108      	bne.n	8000246 <handle_enter_button+0x1e>
        // Switch to showing account details
        show_account_details(current_selection);
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <handle_enter_button+0x38>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f813 	bl	8000264 <show_account_details>
        current_state = STATE_DETAILS;
 800023e:	4b07      	ldr	r3, [pc, #28]	@ (800025c <handle_enter_button+0x34>)
 8000240:	2202      	movs	r2, #2
 8000242:	701a      	strb	r2, [r3, #0]
    } else if (current_state == STATE_DETAILS) {
        // Switch back to the menu
        display_menu();
        current_state = STATE_MENU;
    }
}
 8000244:	e008      	b.n	8000258 <handle_enter_button+0x30>
    } else if (current_state == STATE_DETAILS) {
 8000246:	4b05      	ldr	r3, [pc, #20]	@ (800025c <handle_enter_button+0x34>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b02      	cmp	r3, #2
 800024c:	d104      	bne.n	8000258 <handle_enter_button+0x30>
        display_menu();
 800024e:	f7ff ff85 	bl	800015c <display_menu>
        current_state = STATE_MENU;
 8000252:	4b02      	ldr	r3, [pc, #8]	@ (800025c <handle_enter_button+0x34>)
 8000254:	2201      	movs	r2, #1
 8000256:	701a      	strb	r2, [r3, #0]
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200000f4 	.word	0x200000f4
 8000260:	200000f0 	.word	0x200000f0

08000264 <show_account_details>:

/* Display account details when selected */
void show_account_details(int index) {
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	b08d      	sub	sp, #52	@ 0x34
 800026a:	af02      	add	r7, sp, #8
 800026c:	60f8      	str	r0, [r7, #12]
    ssd1306_Fill(Black);  // Clear the screen
 800026e:	2000      	movs	r0, #0
 8000270:	f000 fb72 	bl	8000958 <ssd1306_Fill>

    int x_position = 2;   // Left-align text
 8000274:	2302      	movs	r3, #2
 8000276:	627b      	str	r3, [r7, #36]	@ 0x24
    int max_chars_per_line = 21;  // 128 / 6 = 21 characters per line for Font_6x8
 8000278:	2315      	movs	r3, #21
 800027a:	623b      	str	r3, [r7, #32]

    // --- Display Username ---
    ssd1306_SetCursor(x_position, 8);  // First line for username
 800027c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800027e:	b2db      	uxtb	r3, r3
 8000280:	2108      	movs	r1, #8
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fcb0 	bl	8000be8 <ssd1306_SetCursor>
    if (strlen(usernames[index]) > max_chars_per_line) {
 8000288:	4a6e      	ldr	r2, [pc, #440]	@ (8000444 <show_account_details+0x1e0>)
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	4618      	mov	r0, r3
 8000292:	f7ff ff5b 	bl	800014c <strlen>
 8000296:	4602      	mov	r2, r0
 8000298:	6a3b      	ldr	r3, [r7, #32]
 800029a:	429a      	cmp	r2, r3
 800029c:	d954      	bls.n	8000348 <show_account_details+0xe4>
 800029e:	466b      	mov	r3, sp
 80002a0:	461e      	mov	r6, r3
        // Split the username into two lines if it's too long
        char first_part[max_chars_per_line + 1];
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	1c59      	adds	r1, r3, #1
 80002a6:	1e4b      	subs	r3, r1, #1
 80002a8:	61fb      	str	r3, [r7, #28]
 80002aa:	460a      	mov	r2, r1
 80002ac:	2300      	movs	r3, #0
 80002ae:	603a      	str	r2, [r7, #0]
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	f04f 0200 	mov.w	r2, #0
 80002b6:	f04f 0300 	mov.w	r3, #0
 80002ba:	6878      	ldr	r0, [r7, #4]
 80002bc:	00c3      	lsls	r3, r0, #3
 80002be:	6838      	ldr	r0, [r7, #0]
 80002c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80002c4:	6838      	ldr	r0, [r7, #0]
 80002c6:	00c2      	lsls	r2, r0, #3
 80002c8:	460a      	mov	r2, r1
 80002ca:	2300      	movs	r3, #0
 80002cc:	4692      	mov	sl, r2
 80002ce:	469b      	mov	fp, r3
 80002d0:	f04f 0200 	mov.w	r2, #0
 80002d4:	f04f 0300 	mov.w	r3, #0
 80002d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80002dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80002e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80002e4:	460b      	mov	r3, r1
 80002e6:	3307      	adds	r3, #7
 80002e8:	08db      	lsrs	r3, r3, #3
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	ebad 0d03 	sub.w	sp, sp, r3
 80002f0:	ab02      	add	r3, sp, #8
 80002f2:	3300      	adds	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
        strncpy(first_part, usernames[index], max_chars_per_line);  // Copy the first part
 80002f6:	4a53      	ldr	r2, [pc, #332]	@ (8000444 <show_account_details+0x1e0>)
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fe:	6a3a      	ldr	r2, [r7, #32]
 8000300:	4619      	mov	r1, r3
 8000302:	69b8      	ldr	r0, [r7, #24]
 8000304:	f002 f9a8 	bl	8002658 <strncpy>
        first_part[max_chars_per_line] = '\0';
 8000308:	69ba      	ldr	r2, [r7, #24]
 800030a:	6a3b      	ldr	r3, [r7, #32]
 800030c:	4413      	add	r3, r2
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
        ssd1306_WriteString(first_part, Font_6x8, White);  // Write first part
 8000312:	4b4d      	ldr	r3, [pc, #308]	@ (8000448 <show_account_details+0x1e4>)
 8000314:	2201      	movs	r2, #1
 8000316:	9200      	str	r2, [sp, #0]
 8000318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800031a:	69b8      	ldr	r0, [r7, #24]
 800031c:	f000 fc3e 	bl	8000b9c <ssd1306_WriteString>

        ssd1306_SetCursor(x_position, 16);  // Move to the next line for the rest
 8000320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2110      	movs	r1, #16
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fc5e 	bl	8000be8 <ssd1306_SetCursor>
        ssd1306_WriteString(usernames[index] + max_chars_per_line, Font_6x8, White);
 800032c:	4a45      	ldr	r2, [pc, #276]	@ (8000444 <show_account_details+0x1e0>)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000334:	6a3b      	ldr	r3, [r7, #32]
 8000336:	18d0      	adds	r0, r2, r3
 8000338:	4b43      	ldr	r3, [pc, #268]	@ (8000448 <show_account_details+0x1e4>)
 800033a:	2201      	movs	r2, #1
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000340:	f000 fc2c 	bl	8000b9c <ssd1306_WriteString>
 8000344:	46b5      	mov	sp, r6
 8000346:	e009      	b.n	800035c <show_account_details+0xf8>
    } else {
        // Username fits on one line
        ssd1306_WriteString(usernames[index], Font_6x8, White);
 8000348:	4a3e      	ldr	r2, [pc, #248]	@ (8000444 <show_account_details+0x1e0>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000350:	4b3d      	ldr	r3, [pc, #244]	@ (8000448 <show_account_details+0x1e4>)
 8000352:	2201      	movs	r2, #1
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000358:	f000 fc20 	bl	8000b9c <ssd1306_WriteString>
    }

    // --- Display Password ---
    ssd1306_SetCursor(x_position, 32);  // Leave an empty line before the password
 800035c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800035e:	b2db      	uxtb	r3, r3
 8000360:	2120      	movs	r1, #32
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fc40 	bl	8000be8 <ssd1306_SetCursor>
    if (strlen(passwords[index]) > max_chars_per_line) {
 8000368:	4a38      	ldr	r2, [pc, #224]	@ (800044c <show_account_details+0x1e8>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff feeb 	bl	800014c <strlen>
 8000376:	4602      	mov	r2, r0
 8000378:	6a3b      	ldr	r3, [r7, #32]
 800037a:	429a      	cmp	r2, r3
 800037c:	d951      	bls.n	8000422 <show_account_details+0x1be>
 800037e:	466b      	mov	r3, sp
 8000380:	461e      	mov	r6, r3
        // Split the password into two lines if it's too long
        char first_part[max_chars_per_line + 1];
 8000382:	6a3b      	ldr	r3, [r7, #32]
 8000384:	1c59      	adds	r1, r3, #1
 8000386:	1e4b      	subs	r3, r1, #1
 8000388:	617b      	str	r3, [r7, #20]
 800038a:	460a      	mov	r2, r1
 800038c:	2300      	movs	r3, #0
 800038e:	4690      	mov	r8, r2
 8000390:	4699      	mov	r9, r3
 8000392:	f04f 0200 	mov.w	r2, #0
 8000396:	f04f 0300 	mov.w	r3, #0
 800039a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800039e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80003a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80003a6:	460a      	mov	r2, r1
 80003a8:	2300      	movs	r3, #0
 80003aa:	4614      	mov	r4, r2
 80003ac:	461d      	mov	r5, r3
 80003ae:	f04f 0200 	mov.w	r2, #0
 80003b2:	f04f 0300 	mov.w	r3, #0
 80003b6:	00eb      	lsls	r3, r5, #3
 80003b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80003bc:	00e2      	lsls	r2, r4, #3
 80003be:	460b      	mov	r3, r1
 80003c0:	3307      	adds	r3, #7
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	ebad 0d03 	sub.w	sp, sp, r3
 80003ca:	ab02      	add	r3, sp, #8
 80003cc:	3300      	adds	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
        strncpy(first_part, passwords[index], max_chars_per_line);  // Copy the first part
 80003d0:	4a1e      	ldr	r2, [pc, #120]	@ (800044c <show_account_details+0x1e8>)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d8:	6a3a      	ldr	r2, [r7, #32]
 80003da:	4619      	mov	r1, r3
 80003dc:	6938      	ldr	r0, [r7, #16]
 80003de:	f002 f93b 	bl	8002658 <strncpy>
        first_part[max_chars_per_line] = '\0';
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	4413      	add	r3, r2
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
        ssd1306_WriteString(first_part, Font_6x8, White);  // Write first part
 80003ec:	4b16      	ldr	r3, [pc, #88]	@ (8000448 <show_account_details+0x1e4>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	9200      	str	r2, [sp, #0]
 80003f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003f4:	6938      	ldr	r0, [r7, #16]
 80003f6:	f000 fbd1 	bl	8000b9c <ssd1306_WriteString>

        ssd1306_SetCursor(x_position, 40);  // Move to the next line for the rest
 80003fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	2128      	movs	r1, #40	@ 0x28
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fbf1 	bl	8000be8 <ssd1306_SetCursor>
        ssd1306_WriteString(passwords[index] + max_chars_per_line, Font_6x8, White);
 8000406:	4a11      	ldr	r2, [pc, #68]	@ (800044c <show_account_details+0x1e8>)
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800040e:	6a3b      	ldr	r3, [r7, #32]
 8000410:	18d0      	adds	r0, r2, r3
 8000412:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <show_account_details+0x1e4>)
 8000414:	2201      	movs	r2, #1
 8000416:	9200      	str	r2, [sp, #0]
 8000418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800041a:	f000 fbbf 	bl	8000b9c <ssd1306_WriteString>
 800041e:	46b5      	mov	sp, r6
 8000420:	e009      	b.n	8000436 <show_account_details+0x1d2>
    } else {
        // Password fits on one line
        ssd1306_WriteString(passwords[index], Font_6x8, White);
 8000422:	4a0a      	ldr	r2, [pc, #40]	@ (800044c <show_account_details+0x1e8>)
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800042a:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <show_account_details+0x1e4>)
 800042c:	2201      	movs	r2, #1
 800042e:	9200      	str	r2, [sp, #0]
 8000430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000432:	f000 fbb3 	bl	8000b9c <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();  // Send buffer to display
 8000436:	f000 faa7 	bl	8000988 <ssd1306_UpdateScreen>
}
 800043a:	bf00      	nop
 800043c:	372c      	adds	r7, #44	@ 0x2c
 800043e:	46bd      	mov	sp, r7
 8000440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000444:	2000000c 	.word	0x2000000c
 8000448:	08004aa4 	.word	0x08004aa4
 800044c:	20000018 	.word	0x20000018

08000450 <check_buttons>:

/* Check the state of buttons and navigate the menu */
void check_buttons() {
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    if (debounce_button(GPIOA, GPIO_PIN_4)) {
 8000454:	2110      	movs	r1, #16
 8000456:	4814      	ldr	r0, [pc, #80]	@ (80004a8 <check_buttons+0x58>)
 8000458:	f000 f82a 	bl	80004b0 <debounce_button>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d007      	beq.n	8000472 <check_buttons+0x22>
        if (current_state == STATE_MENU) {
 8000462:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <check_buttons+0x5c>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d11c      	bne.n	80004a4 <check_buttons+0x54>
            navigate_menu(1);  // Move up in the list
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff feb6 	bl	80001dc <navigate_menu>
            navigate_menu(-1);   // Move down in the list
        }
    } else if (debounce_button(GPIOA, GPIO_PIN_6)) {
        handle_enter_button();  // Toggle between the menu and account details
    }
}
 8000470:	e018      	b.n	80004a4 <check_buttons+0x54>
    } else if (debounce_button(GPIOA, GPIO_PIN_5)) {
 8000472:	2120      	movs	r1, #32
 8000474:	480c      	ldr	r0, [pc, #48]	@ (80004a8 <check_buttons+0x58>)
 8000476:	f000 f81b 	bl	80004b0 <debounce_button>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d008      	beq.n	8000492 <check_buttons+0x42>
        if (current_state == STATE_MENU) {
 8000480:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <check_buttons+0x5c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d10d      	bne.n	80004a4 <check_buttons+0x54>
            navigate_menu(-1);   // Move down in the list
 8000488:	f04f 30ff 	mov.w	r0, #4294967295
 800048c:	f7ff fea6 	bl	80001dc <navigate_menu>
}
 8000490:	e008      	b.n	80004a4 <check_buttons+0x54>
    } else if (debounce_button(GPIOA, GPIO_PIN_6)) {
 8000492:	2140      	movs	r1, #64	@ 0x40
 8000494:	4804      	ldr	r0, [pc, #16]	@ (80004a8 <check_buttons+0x58>)
 8000496:	f000 f80b 	bl	80004b0 <debounce_button>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <check_buttons+0x54>
        handle_enter_button();  // Toggle between the menu and account details
 80004a0:	f7ff fec2 	bl	8000228 <handle_enter_button>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40010800 	.word	0x40010800
 80004ac:	200000f4 	.word	0x200000f4

080004b0 <debounce_button>:

/* Debounce button presses */
uint8_t debounce_button(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	807b      	strh	r3, [r7, #2]
    if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 80004bc:	887b      	ldrh	r3, [r7, #2]
 80004be:	4619      	mov	r1, r3
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f000 ffc7 	bl	8001454 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d10c      	bne.n	80004e6 <debounce_button+0x36>
        HAL_Delay(DEBOUNCE_DELAY);  // Wait for debounce time
 80004cc:	2032      	movs	r0, #50	@ 0x32
 80004ce:	f000 fd35 	bl	8000f3c <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 80004d2:	887b      	ldrh	r3, [r7, #2]
 80004d4:	4619      	mov	r1, r3
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f000 ffbc 	bl	8001454 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d101      	bne.n	80004e6 <debounce_button+0x36>
            return 1;  // Button is confirmed pressed
 80004e2:	2301      	movs	r3, #1
 80004e4:	e000      	b.n	80004e8 <debounce_button+0x38>
        }
    }
    return 0;  // Button is not pressed
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <display_login_screen>:

/* Display the login screen */
void display_login_screen() {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);  // Clear the screen
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 fa2e 	bl	8000958 <ssd1306_Fill>

    ssd1306_SetCursor(2, 0);
 80004fc:	2100      	movs	r1, #0
 80004fe:	2002      	movs	r0, #2
 8000500:	f000 fb72 	bl	8000be8 <ssd1306_SetCursor>
    ssd1306_WriteString("Enter PIN:", Font_11x18, White);
 8000504:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <display_login_screen+0x88>)
 8000506:	2201      	movs	r2, #1
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800050c:	481b      	ldr	r0, [pc, #108]	@ (800057c <display_login_screen+0x8c>)
 800050e:	f000 fb45 	bl	8000b9c <ssd1306_WriteString>

    // Display the PIN digits
    char pin_display[10];
    sprintf(pin_display, "%d %d %d", pin_input[0], pin_input[1], pin_input[2]);
 8000512:	4b1b      	ldr	r3, [pc, #108]	@ (8000580 <display_login_screen+0x90>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <display_login_screen+0x90>)
 8000518:	6859      	ldr	r1, [r3, #4]
 800051a:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <display_login_screen+0x90>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	1d38      	adds	r0, r7, #4
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	460b      	mov	r3, r1
 8000524:	4917      	ldr	r1, [pc, #92]	@ (8000584 <display_login_screen+0x94>)
 8000526:	f002 f855 	bl	80025d4 <siprintf>

    ssd1306_SetCursor(2, 24);
 800052a:	2118      	movs	r1, #24
 800052c:	2002      	movs	r0, #2
 800052e:	f000 fb5b 	bl	8000be8 <ssd1306_SetCursor>
    ssd1306_WriteString(pin_display, Font_11x18, White);
 8000532:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <display_login_screen+0x88>)
 8000534:	1d38      	adds	r0, r7, #4
 8000536:	2201      	movs	r2, #1
 8000538:	9200      	str	r2, [sp, #0]
 800053a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800053c:	f000 fb2e 	bl	8000b9c <ssd1306_WriteString>

    // Underline the current digit
    ssd1306_SetCursor(2 + pin_index * 24, 44);  // Adjust position based on digit index
 8000540:	4b11      	ldr	r3, [pc, #68]	@ (8000588 <display_login_screen+0x98>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	0052      	lsls	r2, r2, #1
 800054a:	4413      	add	r3, r2
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	3302      	adds	r3, #2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	212c      	movs	r1, #44	@ 0x2c
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fb46 	bl	8000be8 <ssd1306_SetCursor>
    ssd1306_WriteString("^", Font_11x18, White);
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <display_login_screen+0x88>)
 800055e:	2201      	movs	r2, #1
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000564:	4809      	ldr	r0, [pc, #36]	@ (800058c <display_login_screen+0x9c>)
 8000566:	f000 fb19 	bl	8000b9c <ssd1306_WriteString>

    ssd1306_UpdateScreen();  // Send buffer to display
 800056a:	f000 fa0d 	bl	8000988 <ssd1306_UpdateScreen>
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	08004abc 	.word	0x08004abc
 800057c:	08002fd0 	.word	0x08002fd0
 8000580:	200000f8 	.word	0x200000f8
 8000584:	08002fdc 	.word	0x08002fdc
 8000588:	20000104 	.word	0x20000104
 800058c:	08002fe8 	.word	0x08002fe8

08000590 <handle_login_buttons>:

/* Handle button inputs on the login screen */
void handle_login_buttons() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    if (debounce_button(GPIOA, GPIO_PIN_4)) {
 8000594:	2110      	movs	r1, #16
 8000596:	4831      	ldr	r0, [pc, #196]	@ (800065c <handle_login_buttons+0xcc>)
 8000598:	f7ff ff8a 	bl	80004b0 <debounce_button>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d018      	beq.n	80005d4 <handle_login_buttons+0x44>
        // Increase current digit
        pin_input[pin_index] = (pin_input[pin_index] + 1) % 10;  // Digits 0-9
 80005a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <handle_login_buttons+0xd0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000664 <handle_login_buttons+0xd4>)
 80005a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ac:	1c59      	adds	r1, r3, #1
 80005ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <handle_login_buttons+0xd0>)
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <handle_login_buttons+0xd8>)
 80005b4:	fb83 2301 	smull	r2, r3, r3, r1
 80005b8:	109a      	asrs	r2, r3, #2
 80005ba:	17cb      	asrs	r3, r1, #31
 80005bc:	1ad2      	subs	r2, r2, r3
 80005be:	4613      	mov	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	1aca      	subs	r2, r1, r3
 80005c8:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <handle_login_buttons+0xd4>)
 80005ca:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        display_login_screen();
 80005ce:	f7ff ff8f 	bl	80004f0 <display_login_screen>
            pin_input[2] = 0;
            pin_index = 0;
            display_login_screen();
        }
    }
}
 80005d2:	e041      	b.n	8000658 <handle_login_buttons+0xc8>
    } else if (debounce_button(GPIOA, GPIO_PIN_5)) {
 80005d4:	2120      	movs	r1, #32
 80005d6:	4821      	ldr	r0, [pc, #132]	@ (800065c <handle_login_buttons+0xcc>)
 80005d8:	f7ff ff6a 	bl	80004b0 <debounce_button>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d010      	beq.n	8000604 <handle_login_buttons+0x74>
        pin_index = (pin_index + 1) % 3;  // Wrap around 0-2
 80005e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <handle_login_buttons+0xd0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1c59      	adds	r1, r3, #1
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <handle_login_buttons+0xdc>)
 80005ea:	fb83 3201 	smull	r3, r2, r3, r1
 80005ee:	17cb      	asrs	r3, r1, #31
 80005f0:	1ad2      	subs	r2, r2, r3
 80005f2:	4613      	mov	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	1aca      	subs	r2, r1, r3
 80005fa:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <handle_login_buttons+0xd0>)
 80005fc:	601a      	str	r2, [r3, #0]
        display_login_screen();
 80005fe:	f7ff ff77 	bl	80004f0 <display_login_screen>
}
 8000602:	e029      	b.n	8000658 <handle_login_buttons+0xc8>
    } else if (debounce_button(GPIOA, GPIO_PIN_6)) {
 8000604:	2140      	movs	r1, #64	@ 0x40
 8000606:	4815      	ldr	r0, [pc, #84]	@ (800065c <handle_login_buttons+0xcc>)
 8000608:	f7ff ff52 	bl	80004b0 <debounce_button>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d022      	beq.n	8000658 <handle_login_buttons+0xc8>
        if (pin_input[0] == correct_pin[0] && pin_input[1] == correct_pin[1] && pin_input[2] == correct_pin[2]) {
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <handle_login_buttons+0xd4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2201      	movs	r2, #1
 8000618:	4293      	cmp	r3, r2
 800061a:	d10f      	bne.n	800063c <handle_login_buttons+0xac>
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <handle_login_buttons+0xd4>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2202      	movs	r2, #2
 8000622:	4293      	cmp	r3, r2
 8000624:	d10a      	bne.n	800063c <handle_login_buttons+0xac>
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <handle_login_buttons+0xd4>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	2203      	movs	r2, #3
 800062c:	4293      	cmp	r3, r2
 800062e:	d105      	bne.n	800063c <handle_login_buttons+0xac>
            current_state = STATE_MENU;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <handle_login_buttons+0xe0>)
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
            display_menu();
 8000636:	f7ff fd91 	bl	800015c <display_menu>
}
 800063a:	e00d      	b.n	8000658 <handle_login_buttons+0xc8>
            pin_input[0] = 0;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <handle_login_buttons+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
            pin_input[1] = 0;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <handle_login_buttons+0xd4>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
            pin_input[2] = 0;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <handle_login_buttons+0xd4>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
            pin_index = 0;
 800064e:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <handle_login_buttons+0xd0>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
            display_login_screen();
 8000654:	f7ff ff4c 	bl	80004f0 <display_login_screen>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40010800 	.word	0x40010800
 8000660:	20000104 	.word	0x20000104
 8000664:	200000f8 	.word	0x200000f8
 8000668:	66666667 	.word	0x66666667
 800066c:	55555556 	.word	0x55555556
 8000670:	200000f4 	.word	0x200000f4

08000674 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fbfe 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f818 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f880 	bl	8000784 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000684:	f000 f850 	bl	8000728 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  ssd1306_Init();  // Initialize the OLED display
 8000688:	f000 f8fc 	bl	8000884 <ssd1306_Init>
  display_login_screen();  // Show the login screen
 800068c:	f7ff ff30 	bl	80004f0 <display_login_screen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (current_state == STATE_LOGIN) {
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <main+0x38>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d102      	bne.n	800069e <main+0x2a>
        handle_login_buttons();  // Handle login input
 8000698:	f7ff ff7a 	bl	8000590 <handle_login_buttons>
 800069c:	e001      	b.n	80006a2 <main+0x2e>
    } else {
        check_buttons();  // Poll buttons for menu navigation
 800069e:	f7ff fed7 	bl	8000450 <check_buttons>
    }
    HAL_Delay(200);   // Add delay to avoid button bouncing
 80006a2:	20c8      	movs	r0, #200	@ 0xc8
 80006a4:	f000 fc4a 	bl	8000f3c <HAL_Delay>
    if (current_state == STATE_LOGIN) {
 80006a8:	e7f2      	b.n	8000690 <main+0x1c>
 80006aa:	bf00      	nop
 80006ac:	200000f4 	.word	0x200000f4

080006b0 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b090      	sub	sp, #64	@ 0x40
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2228      	movs	r2, #40	@ 0x28
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ffc2 	bl	8002648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	2310      	movs	r3, #16
 80006dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006de:	2300      	movs	r3, #0
 80006e0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fb78 	bl	8001ddc <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x46>
    Error_Handler();
 80006f2:	f000 f889 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fde6 	bl	80022e0 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x6e>
    Error_Handler();
 800071a:	f000 f875 	bl	8000808 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3740      	adds	r7, #64	@ 0x40
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f000 fe8d 	bl	8001484 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
    Error_Handler();
 8000770:	f000 f84a 	bl	8000808 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000009c 	.word	0x2000009c
 800077c:	40005400 	.word	0x40005400
 8000780:	00061a80 	.word	0x00061a80

08000784 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_GPIO_Init+0x7c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <MX_GPIO_Init+0x7c>)
 800079e:	f043 0320 	orr.w	r3, r3, #32
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_GPIO_Init+0x7c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0320 	and.w	r3, r3, #32
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_GPIO_Init+0x7c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_GPIO_Init+0x7c>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_GPIO_Init+0x7c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <MX_GPIO_Init+0x7c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000800 <MX_GPIO_Init+0x7c>)
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_GPIO_Init+0x7c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0308 	and.w	r3, r3, #8
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007e0:	2370      	movs	r3, #112	@ 0x70
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;  // Enable pull-down resistors to prevent floating pins
 80007e8:	2302      	movs	r3, #2
 80007ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_GPIO_Init+0x80>)
 80007f4:	f000 fcaa 	bl	800114c <HAL_GPIO_Init>
}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800

08000808 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  __disable_irq();
  while (1) {
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af04      	add	r7, sp, #16
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	9302      	str	r3, [sp, #8]
 8000830:	2301      	movs	r3, #1
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	2200      	movs	r2, #0
 800083c:	2178      	movs	r1, #120	@ 0x78
 800083e:	4803      	ldr	r0, [pc, #12]	@ (800084c <ssd1306_WriteCommand+0x2c>)
 8000840:	f000 ff64 	bl	800170c <HAL_I2C_Mem_Write>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000009c 	.word	0x2000009c

08000850 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af04      	add	r7, sp, #16
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b29b      	uxth	r3, r3
 800085e:	f04f 32ff 	mov.w	r2, #4294967295
 8000862:	9202      	str	r2, [sp, #8]
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	2240      	movs	r2, #64	@ 0x40
 800086e:	2178      	movs	r1, #120	@ 0x78
 8000870:	4803      	ldr	r0, [pc, #12]	@ (8000880 <ssd1306_WriteData+0x30>)
 8000872:	f000 ff4b 	bl	800170c <HAL_I2C_Mem_Write>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000009c 	.word	0x2000009c

08000884 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000888:	f7ff ffc4 	bl	8000814 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800088c:	2064      	movs	r0, #100	@ 0x64
 800088e:	f000 fb55 	bl	8000f3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f9d4 	bl	8000c40 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000898:	2020      	movs	r0, #32
 800089a:	f7ff ffc1 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff ffbe 	bl	8000820 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008a4:	20b0      	movs	r0, #176	@ 0xb0
 80008a6:	f7ff ffbb 	bl	8000820 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80008aa:	20c8      	movs	r0, #200	@ 0xc8
 80008ac:	f7ff ffb8 	bl	8000820 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ffb5 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80008b6:	2010      	movs	r0, #16
 80008b8:	f7ff ffb2 	bl	8000820 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80008bc:	2040      	movs	r0, #64	@ 0x40
 80008be:	f7ff ffaf 	bl	8000820 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80008c2:	20ff      	movs	r0, #255	@ 0xff
 80008c4:	f000 f9a8 	bl	8000c18 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80008c8:	20a1      	movs	r0, #161	@ 0xa1
 80008ca:	f7ff ffa9 	bl	8000820 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80008ce:	20a6      	movs	r0, #166	@ 0xa6
 80008d0:	f7ff ffa6 	bl	8000820 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80008d4:	20a8      	movs	r0, #168	@ 0xa8
 80008d6:	f7ff ffa3 	bl	8000820 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80008da:	203f      	movs	r0, #63	@ 0x3f
 80008dc:	f7ff ffa0 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008e0:	20a4      	movs	r0, #164	@ 0xa4
 80008e2:	f7ff ff9d 	bl	8000820 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80008e6:	20d3      	movs	r0, #211	@ 0xd3
 80008e8:	f7ff ff9a 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff ff97 	bl	8000820 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008f2:	20d5      	movs	r0, #213	@ 0xd5
 80008f4:	f7ff ff94 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008f8:	20f0      	movs	r0, #240	@ 0xf0
 80008fa:	f7ff ff91 	bl	8000820 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008fe:	20d9      	movs	r0, #217	@ 0xd9
 8000900:	f7ff ff8e 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000904:	2022      	movs	r0, #34	@ 0x22
 8000906:	f7ff ff8b 	bl	8000820 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800090a:	20da      	movs	r0, #218	@ 0xda
 800090c:	f7ff ff88 	bl	8000820 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000910:	2012      	movs	r0, #18
 8000912:	f7ff ff85 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000916:	20db      	movs	r0, #219	@ 0xdb
 8000918:	f7ff ff82 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800091c:	2020      	movs	r0, #32
 800091e:	f7ff ff7f 	bl	8000820 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000922:	208d      	movs	r0, #141	@ 0x8d
 8000924:	f7ff ff7c 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000928:	2014      	movs	r0, #20
 800092a:	f7ff ff79 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800092e:	2001      	movs	r0, #1
 8000930:	f000 f986 	bl	8000c40 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000934:	2000      	movs	r0, #0
 8000936:	f000 f80f 	bl	8000958 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800093a:	f000 f825 	bl	8000988 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <ssd1306_Init+0xd0>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <ssd1306_Init+0xd0>)
 8000946:	2200      	movs	r2, #0
 8000948:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800094a:	4b02      	ldr	r3, [pc, #8]	@ (8000954 <ssd1306_Init+0xd0>)
 800094c:	2201      	movs	r2, #1
 800094e:	711a      	strb	r2, [r3, #4]
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000508 	.word	0x20000508

08000958 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <ssd1306_Fill+0x14>
 8000968:	2300      	movs	r3, #0
 800096a:	e000      	b.n	800096e <ssd1306_Fill+0x16>
 800096c:	23ff      	movs	r3, #255	@ 0xff
 800096e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000972:	4619      	mov	r1, r3
 8000974:	4803      	ldr	r0, [pc, #12]	@ (8000984 <ssd1306_Fill+0x2c>)
 8000976:	f001 fe67 	bl	8002648 <memset>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000108 	.word	0x20000108

08000988 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800098e:	2300      	movs	r3, #0
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	e016      	b.n	80009c2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	3b50      	subs	r3, #80	@ 0x50
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff40 	bl	8000820 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff3d 	bl	8000820 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80009a6:	2010      	movs	r0, #16
 80009a8:	f7ff ff3a 	bl	8000820 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	01db      	lsls	r3, r3, #7
 80009b0:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <ssd1306_UpdateScreen+0x4c>)
 80009b2:	4413      	add	r3, r2
 80009b4:	2180      	movs	r1, #128	@ 0x80
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff4a 	bl	8000850 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	3301      	adds	r3, #1
 80009c0:	71fb      	strb	r3, [r7, #7]
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d9e5      	bls.n	8000994 <ssd1306_UpdateScreen+0xc>
    }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000108 	.word	0x20000108

080009d8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	460b      	mov	r3, r1
 80009e4:	71bb      	strb	r3, [r7, #6]
 80009e6:	4613      	mov	r3, r2
 80009e8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db3d      	blt.n	8000a6e <ssd1306_DrawPixel+0x96>
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80009f6:	d83a      	bhi.n	8000a6e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009f8:	797b      	ldrb	r3, [r7, #5]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d11a      	bne.n	8000a34 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	b2d8      	uxtb	r0, r3
 8000a06:	4603      	mov	r3, r0
 8000a08:	01db      	lsls	r3, r3, #7
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a78 <ssd1306_DrawPixel+0xa0>)
 8000a0e:	5cd3      	ldrb	r3, [r2, r3]
 8000a10:	b25a      	sxtb	r2, r3
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b259      	sxtb	r1, r3
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	4603      	mov	r3, r0
 8000a28:	01db      	lsls	r3, r3, #7
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b2c9      	uxtb	r1, r1
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <ssd1306_DrawPixel+0xa0>)
 8000a30:	54d1      	strb	r1, [r2, r3]
 8000a32:	e01d      	b.n	8000a70 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	b2d8      	uxtb	r0, r3
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	01db      	lsls	r3, r3, #7
 8000a40:	4413      	add	r3, r2
 8000a42:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <ssd1306_DrawPixel+0xa0>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	b25a      	sxtb	r2, r3
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	2101      	movs	r1, #1
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	b259      	sxtb	r1, r3
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	4603      	mov	r3, r0
 8000a62:	01db      	lsls	r3, r3, #7
 8000a64:	4413      	add	r3, r2
 8000a66:	b2c9      	uxtb	r1, r1
 8000a68:	4a03      	ldr	r2, [pc, #12]	@ (8000a78 <ssd1306_DrawPixel+0xa0>)
 8000a6a:	54d1      	strb	r1, [r2, r3]
 8000a6c:	e000      	b.n	8000a70 <ssd1306_DrawPixel+0x98>
        return;
 8000a6e:	bf00      	nop
    }
}
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000108 	.word	0x20000108

08000a7c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b089      	sub	sp, #36	@ 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4604      	mov	r4, r0
 8000a84:	4638      	mov	r0, r7
 8000a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b1f      	cmp	r3, #31
 8000a92:	d902      	bls.n	8000a9a <ssd1306_WriteChar+0x1e>
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a98:	d901      	bls.n	8000a9e <ssd1306_WriteChar+0x22>
        return 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e077      	b.n	8000b8e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <ssd1306_WriteChar+0x11c>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	783b      	ldrb	r3, [r7, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	2b80      	cmp	r3, #128	@ 0x80
 8000aaa:	dc06      	bgt.n	8000aba <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000aac:	4b3a      	ldr	r3, [pc, #232]	@ (8000b98 <ssd1306_WriteChar+0x11c>)
 8000aae:	885b      	ldrh	r3, [r3, #2]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	787b      	ldrb	r3, [r7, #1]
 8000ab4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000ab6:	2b40      	cmp	r3, #64	@ 0x40
 8000ab8:	dd01      	ble.n	8000abe <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e067      	b.n	8000b8e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	e04e      	b.n	8000b62 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	3b20      	subs	r3, #32
 8000aca:	7879      	ldrb	r1, [r7, #1]
 8000acc:	fb01 f303 	mul.w	r3, r1, r3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	440b      	add	r3, r1
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	e036      	b.n	8000b52 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d013      	beq.n	8000b1c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000af4:	4b28      	ldr	r3, [pc, #160]	@ (8000b98 <ssd1306_WriteChar+0x11c>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	b2d8      	uxtb	r0, r3
 8000b02:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <ssd1306_WriteChar+0x11c>)
 8000b04:	885b      	ldrh	r3, [r3, #2]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000b14:	4619      	mov	r1, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <ssd1306_DrawPixel>
 8000b1a:	e017      	b.n	8000b4c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <ssd1306_WriteChar+0x11c>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	b2d8      	uxtb	r0, r3
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <ssd1306_WriteChar+0x11c>)
 8000b2c:	885b      	ldrh	r3, [r3, #2]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4413      	add	r3, r2
 8000b36:	b2d9      	uxtb	r1, r3
 8000b38:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bf0c      	ite	eq
 8000b40:	2301      	moveq	r3, #1
 8000b42:	2300      	movne	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	f7ff ff46 	bl	80009d8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	783b      	ldrb	r3, [r7, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d3c3      	bcc.n	8000ae4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	787b      	ldrb	r3, [r7, #1]
 8000b64:	461a      	mov	r2, r3
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d3ab      	bcc.n	8000ac4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <ssd1306_WriteChar+0x11c>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d005      	beq.n	8000b82 <ssd1306_WriteChar+0x106>
 8000b76:	68b9      	ldr	r1, [r7, #8]
 8000b78:	7bfa      	ldrb	r2, [r7, #15]
 8000b7a:	3a20      	subs	r2, #32
 8000b7c:	440a      	add	r2, r1
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	e000      	b.n	8000b84 <ssd1306_WriteChar+0x108>
 8000b82:	783a      	ldrb	r2, [r7, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <ssd1306_WriteChar+0x11c>)
 8000b8a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	@ 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000508 	.word	0x20000508

08000b9c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	4638      	mov	r0, r7
 8000ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000baa:	e013      	b.n	8000bd4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	7818      	ldrb	r0, [r3, #0]
 8000bb0:	7e3b      	ldrb	r3, [r7, #24]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb8:	f7ff ff60 	bl	8000a7c <ssd1306_WriteChar>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d002      	beq.n	8000bce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	e008      	b.n	8000be0 <ssd1306_WriteString+0x44>
        }
        str++;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1e7      	bne.n	8000bac <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	781b      	ldrb	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <ssd1306_SetCursor+0x2c>)
 8000bfe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <ssd1306_SetCursor+0x2c>)
 8000c06:	805a      	strh	r2, [r3, #2]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000508 	.word	0x20000508

08000c18 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000c22:	2381      	movs	r3, #129	@ 0x81
 8000c24:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fdf9 	bl	8000820 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fdf5 	bl	8000820 <ssd1306_WriteCommand>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d005      	beq.n	8000c5c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000c50:	23af      	movs	r3, #175	@ 0xaf
 8000c52:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <ssd1306_SetDisplayOn+0x38>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	715a      	strb	r2, [r3, #5]
 8000c5a:	e004      	b.n	8000c66 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000c5c:	23ae      	movs	r3, #174	@ 0xae
 8000c5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <ssd1306_SetDisplayOn+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fdd9 	bl	8000820 <ssd1306_WriteCommand>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000508 	.word	0x20000508

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_MspInit+0x5c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_MspInit+0x60>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_MspInit+0x60>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <HAL_I2C_MspInit+0x70>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d123      	bne.n	8000d48 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_I2C_MspInit+0x74>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <HAL_I2C_MspInit+0x74>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_I2C_MspInit+0x74>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d18:	23c0      	movs	r3, #192	@ 0xc0
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <HAL_I2C_MspInit+0x78>)
 8000d2c:	f000 fa0e 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_I2C_MspInit+0x74>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_I2C_MspInit+0x74>)
 8000d36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d3a:	61d3      	str	r3, [r2, #28]
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_I2C_MspInit+0x74>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40005400 	.word	0x40005400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010c00 	.word	0x40010c00

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 f8aa 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f001 fc4c 	bl	8002680 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20005000 	.word	0x20005000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000510 	.word	0x20000510
 8000e1c:	20000660 	.word	0x20000660

08000e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff fff8 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480b      	ldr	r0, [pc, #44]	@ (8000e60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e32:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e34:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e48:	4c09      	ldr	r4, [pc, #36]	@ (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f001 fc19 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff fc0b 	bl	8000674 <main>
  bx lr
 8000e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e68:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8000e6c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e70:	20000660 	.word	0x20000660

08000e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_2_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_Init+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <HAL_Init+0x28>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f92b 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fef2 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f935 	bl	8001132 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f90b 	bl	80010fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000024 	.word	0x20000024
 8000efc:	2000002c 	.word	0x2000002c
 8000f00:	20000028 	.word	0x20000028

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a03      	ldr	r2, [pc, #12]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	2000002c 	.word	0x2000002c
 8000f24:	20000514 	.word	0x20000514

08000f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	@ (8000f38 <HAL_GetTick+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	20000514 	.word	0x20000514

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff fff0 	bl	8000f28 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffe0 	bl	8000f28 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000002c 	.word	0x2000002c

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	@ (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	@ 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f7ff ff90 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff49 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff5e 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff90 	bl	800103c <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5f 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffb0 	bl	80010a0 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b08b      	sub	sp, #44	@ 0x2c
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e169      	b.n	8001434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001160:	2201      	movs	r2, #1
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8158 	bne.w	800142e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a9a      	ldr	r2, [pc, #616]	@ (80013ec <HAL_GPIO_Init+0x2a0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d05e      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 8001188:	4a98      	ldr	r2, [pc, #608]	@ (80013ec <HAL_GPIO_Init+0x2a0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d875      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 800118e:	4a98      	ldr	r2, [pc, #608]	@ (80013f0 <HAL_GPIO_Init+0x2a4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d058      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 8001194:	4a96      	ldr	r2, [pc, #600]	@ (80013f0 <HAL_GPIO_Init+0x2a4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d86f      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 800119a:	4a96      	ldr	r2, [pc, #600]	@ (80013f4 <HAL_GPIO_Init+0x2a8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d052      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011a0:	4a94      	ldr	r2, [pc, #592]	@ (80013f4 <HAL_GPIO_Init+0x2a8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d869      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011a6:	4a94      	ldr	r2, [pc, #592]	@ (80013f8 <HAL_GPIO_Init+0x2ac>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d04c      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011ac:	4a92      	ldr	r2, [pc, #584]	@ (80013f8 <HAL_GPIO_Init+0x2ac>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d863      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011b2:	4a92      	ldr	r2, [pc, #584]	@ (80013fc <HAL_GPIO_Init+0x2b0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d046      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011b8:	4a90      	ldr	r2, [pc, #576]	@ (80013fc <HAL_GPIO_Init+0x2b0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d85d      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d82a      	bhi.n	8001218 <HAL_GPIO_Init+0xcc>
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d859      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011c6:	a201      	add	r2, pc, #4	@ (adr r2, 80011cc <HAL_GPIO_Init+0x80>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	08001247 	.word	0x08001247
 80011d0:	08001221 	.word	0x08001221
 80011d4:	08001233 	.word	0x08001233
 80011d8:	08001275 	.word	0x08001275
 80011dc:	0800127b 	.word	0x0800127b
 80011e0:	0800127b 	.word	0x0800127b
 80011e4:	0800127b 	.word	0x0800127b
 80011e8:	0800127b 	.word	0x0800127b
 80011ec:	0800127b 	.word	0x0800127b
 80011f0:	0800127b 	.word	0x0800127b
 80011f4:	0800127b 	.word	0x0800127b
 80011f8:	0800127b 	.word	0x0800127b
 80011fc:	0800127b 	.word	0x0800127b
 8001200:	0800127b 	.word	0x0800127b
 8001204:	0800127b 	.word	0x0800127b
 8001208:	0800127b 	.word	0x0800127b
 800120c:	0800127b 	.word	0x0800127b
 8001210:	08001229 	.word	0x08001229
 8001214:	0800123d 	.word	0x0800123d
 8001218:	4a79      	ldr	r2, [pc, #484]	@ (8001400 <HAL_GPIO_Init+0x2b4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121e:	e02c      	b.n	800127a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e029      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	3304      	adds	r3, #4
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e024      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	3308      	adds	r3, #8
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e01f      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	330c      	adds	r3, #12
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e01a      	b.n	800127c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124e:	2304      	movs	r3, #4
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e013      	b.n	800127c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d105      	bne.n	8001268 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125c:	2308      	movs	r3, #8
 800125e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	611a      	str	r2, [r3, #16]
          break;
 8001266:	e009      	b.n	800127c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001268:	2308      	movs	r3, #8
 800126a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	615a      	str	r2, [r3, #20]
          break;
 8001272:	e003      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x130>
          break;
 800127a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2bff      	cmp	r3, #255	@ 0xff
 8001280:	d801      	bhi.n	8001286 <HAL_GPIO_Init+0x13a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	e001      	b.n	800128a <HAL_GPIO_Init+0x13e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3304      	adds	r3, #4
 800128a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2bff      	cmp	r3, #255	@ 0xff
 8001290:	d802      	bhi.n	8001298 <HAL_GPIO_Init+0x14c>
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	e002      	b.n	800129e <HAL_GPIO_Init+0x152>
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	3b08      	subs	r3, #8
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	210f      	movs	r1, #15
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	6a39      	ldr	r1, [r7, #32]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80b1 	beq.w	800142e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <HAL_GPIO_Init+0x2b8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001404 <HAL_GPIO_Init+0x2b8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001404 <HAL_GPIO_Init+0x2b8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e4:	4a48      	ldr	r2, [pc, #288]	@ (8001408 <HAL_GPIO_Init+0x2bc>)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a40      	ldr	r2, [pc, #256]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_GPIO_Init+0x1ec>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3f      	ldr	r2, [pc, #252]	@ (8001410 <HAL_GPIO_Init+0x2c4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00d      	beq.n	8001334 <HAL_GPIO_Init+0x1e8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a3e      	ldr	r2, [pc, #248]	@ (8001414 <HAL_GPIO_Init+0x2c8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <HAL_GPIO_Init+0x1e4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a3d      	ldr	r2, [pc, #244]	@ (8001418 <HAL_GPIO_Init+0x2cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_GPIO_Init+0x1e0>
 8001328:	2303      	movs	r3, #3
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 800132c:	2304      	movs	r3, #4
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001338:	2300      	movs	r3, #0
 800133a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800134a:	492f      	ldr	r1, [pc, #188]	@ (8001408 <HAL_GPIO_Init+0x2bc>)
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	492c      	ldr	r1, [pc, #176]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	608b      	str	r3, [r1, #8]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	4928      	ldr	r1, [pc, #160]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	4922      	ldr	r1, [pc, #136]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	60cb      	str	r3, [r1, #12]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	491e      	ldr	r1, [pc, #120]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4918      	ldr	r1, [pc, #96]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4914      	ldr	r1, [pc, #80]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d021      	beq.n	8001420 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	490e      	ldr	r1, [pc, #56]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e021      	b.n	800142e <HAL_GPIO_Init+0x2e2>
 80013ea:	bf00      	nop
 80013ec:	10320000 	.word	0x10320000
 80013f0:	10310000 	.word	0x10310000
 80013f4:	10220000 	.word	0x10220000
 80013f8:	10210000 	.word	0x10210000
 80013fc:	10120000 	.word	0x10120000
 8001400:	10110000 	.word	0x10110000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	40010800 	.word	0x40010800
 8001410:	40010c00 	.word	0x40010c00
 8001414:	40011000 	.word	0x40011000
 8001418:	40011400 	.word	0x40011400
 800141c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_GPIO_Init+0x304>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	43db      	mvns	r3, r3
 8001428:	4909      	ldr	r1, [pc, #36]	@ (8001450 <HAL_GPIO_Init+0x304>)
 800142a:	4013      	ands	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	3301      	adds	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f ae8e 	bne.w	8001160 <HAL_GPIO_Init+0x14>
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	372c      	adds	r7, #44	@ 0x2c
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
	...

08001484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e12b      	b.n	80016ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fc18 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	@ 0x24
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014e8:	f001 f842 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80014ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a81      	ldr	r2, [pc, #516]	@ (80016f8 <HAL_I2C_Init+0x274>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d807      	bhi.n	8001508 <HAL_I2C_Init+0x84>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a80      	ldr	r2, [pc, #512]	@ (80016fc <HAL_I2C_Init+0x278>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	bf94      	ite	ls
 8001500:	2301      	movls	r3, #1
 8001502:	2300      	movhi	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	e006      	b.n	8001516 <HAL_I2C_Init+0x92>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a7d      	ldr	r2, [pc, #500]	@ (8001700 <HAL_I2C_Init+0x27c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	bf94      	ite	ls
 8001510:	2301      	movls	r3, #1
 8001512:	2300      	movhi	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0e7      	b.n	80016ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4a78      	ldr	r2, [pc, #480]	@ (8001704 <HAL_I2C_Init+0x280>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9b      	lsrs	r3, r3, #18
 8001528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a6a      	ldr	r2, [pc, #424]	@ (80016f8 <HAL_I2C_Init+0x274>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d802      	bhi.n	8001558 <HAL_I2C_Init+0xd4>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3301      	adds	r3, #1
 8001556:	e009      	b.n	800156c <HAL_I2C_Init+0xe8>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	4a69      	ldr	r2, [pc, #420]	@ (8001708 <HAL_I2C_Init+0x284>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	099b      	lsrs	r3, r3, #6
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	430b      	orrs	r3, r1
 8001572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800157e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	495c      	ldr	r1, [pc, #368]	@ (80016f8 <HAL_I2C_Init+0x274>)
 8001588:	428b      	cmp	r3, r1
 800158a:	d819      	bhi.n	80015c0 <HAL_I2C_Init+0x13c>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e59      	subs	r1, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fbb1 f3f3 	udiv	r3, r1, r3
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015a0:	400b      	ands	r3, r1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00a      	beq.n	80015bc <HAL_I2C_Init+0x138>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1e59      	subs	r1, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ba:	e051      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 80015bc:	2304      	movs	r3, #4
 80015be:	e04f      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <HAL_I2C_Init+0x168>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	e012      	b.n	8001612 <HAL_I2C_Init+0x18e>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e58      	subs	r0, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	0099      	lsls	r1, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Init+0x196>
 8001616:	2301      	movs	r3, #1
 8001618:	e022      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10e      	bne.n	8001640 <HAL_I2C_Init+0x1bc>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e58      	subs	r0, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6859      	ldr	r1, [r3, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	440b      	add	r3, r1
 8001630:	fbb0 f3f3 	udiv	r3, r0, r3
 8001634:	3301      	adds	r3, #1
 8001636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800163e:	e00f      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	6809      	ldr	r1, [r1, #0]
 8001664:	4313      	orrs	r3, r2
 8001666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800168e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6911      	ldr	r1, [r2, #16]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68d2      	ldr	r2, [r2, #12]
 800169a:	4311      	orrs	r1, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2220      	movs	r2, #32
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	000186a0 	.word	0x000186a0
 80016fc:	001e847f 	.word	0x001e847f
 8001700:	003d08ff 	.word	0x003d08ff
 8001704:	431bde83 	.word	0x431bde83
 8001708:	10624dd3 	.word	0x10624dd3

0800170c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	817b      	strh	r3, [r7, #10]
 800171e:	460b      	mov	r3, r1
 8001720:	813b      	strh	r3, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001726:	f7ff fbff 	bl	8000f28 <HAL_GetTick>
 800172a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b20      	cmp	r3, #32
 8001736:	f040 80d9 	bne.w	80018ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2319      	movs	r3, #25
 8001740:	2201      	movs	r2, #1
 8001742:	496d      	ldr	r1, [pc, #436]	@ (80018f8 <HAL_I2C_Mem_Write+0x1ec>)
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f971 	bl	8001a2c <I2C_WaitOnFlagUntilTimeout>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
 8001752:	e0cc      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_I2C_Mem_Write+0x56>
 800175e:	2302      	movs	r3, #2
 8001760:	e0c5      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d007      	beq.n	8001788 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2221      	movs	r2, #33	@ 0x21
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2240      	movs	r2, #64	@ 0x40
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a4d      	ldr	r2, [pc, #308]	@ (80018fc <HAL_I2C_Mem_Write+0x1f0>)
 80017c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017ca:	88f8      	ldrh	r0, [r7, #6]
 80017cc:	893a      	ldrh	r2, [r7, #8]
 80017ce:	8979      	ldrh	r1, [r7, #10]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4603      	mov	r3, r0
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f890 	bl	8001900 <I2C_RequestMemoryWrite>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d052      	beq.n	800188c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e081      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fa36 	bl	8001c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00d      	beq.n	8001816 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d107      	bne.n	8001812 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001810:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e06b      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b04      	cmp	r3, #4
 8001852:	d11b      	bne.n	800188c <HAL_I2C_Mem_Write+0x180>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d017      	beq.n	800188c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1aa      	bne.n	80017ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fa29 	bl	8001cf0 <I2C_WaitOnBTFFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00d      	beq.n	80018c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d107      	bne.n	80018bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e016      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e000      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018ec:	2302      	movs	r3, #2
  }
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	00100002 	.word	0x00100002
 80018fc:	ffff0000 	.word	0xffff0000

08001900 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af02      	add	r7, sp, #8
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	4608      	mov	r0, r1
 800190a:	4611      	mov	r1, r2
 800190c:	461a      	mov	r2, r3
 800190e:	4603      	mov	r3, r0
 8001910:	817b      	strh	r3, [r7, #10]
 8001912:	460b      	mov	r3, r1
 8001914:	813b      	strh	r3, [r7, #8]
 8001916:	4613      	mov	r3, r2
 8001918:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2200      	movs	r2, #0
 8001932:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f878 	bl	8001a2c <I2C_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00d      	beq.n	800195e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001950:	d103      	bne.n	800195a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e05f      	b.n	8001a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800195e:	897b      	ldrh	r3, [r7, #10]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800196c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	492d      	ldr	r1, [pc, #180]	@ (8001a28 <I2C_RequestMemoryWrite+0x128>)
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f8d3 	bl	8001b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e04c      	b.n	8001a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800199a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f95e 	bl	8001c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00d      	beq.n	80019c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d107      	bne.n	80019c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e02b      	b.n	8001a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019cc:	893b      	ldrh	r3, [r7, #8]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	e021      	b.n	8001a1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019d8:	893b      	ldrh	r3, [r7, #8]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	b29b      	uxth	r3, r3
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e8:	6a39      	ldr	r1, [r7, #32]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f938 	bl	8001c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00d      	beq.n	8001a12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d107      	bne.n	8001a0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e005      	b.n	8001a1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a12:	893b      	ldrh	r3, [r7, #8]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	00010002 	.word	0x00010002

08001a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a3c:	e048      	b.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d044      	beq.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a46:	f7ff fa6f 	bl	8000f28 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d302      	bcc.n	8001a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d139      	bne.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	0c1b      	lsrs	r3, r3, #16
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d10d      	bne.n	8001a82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4013      	ands	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	e00c      	b.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d116      	bne.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e023      	b.n	8001b18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10d      	bne.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	e00c      	b.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4013      	ands	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d093      	beq.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b2e:	e071      	b.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3e:	d123      	bne.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b74:	f043 0204 	orr.w	r2, r3, #4
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e067      	b.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8e:	d041      	beq.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b90:	f7ff f9ca 	bl	8000f28 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d302      	bcc.n	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d136      	bne.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10c      	bne.n	8001bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	e00b      	b.n	8001be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d016      	beq.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f043 0220 	orr.w	r2, r3, #32
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e021      	b.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10c      	bne.n	8001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	43da      	mvns	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e00b      	b.n	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4013      	ands	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f af6d 	bne.w	8001b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c6c:	e034      	b.n	8001cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f886 	bl	8001d80 <I2C_IsAcknowledgeFailed>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e034      	b.n	8001ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d028      	beq.n	8001cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c86:	f7ff f94f 	bl	8000f28 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d302      	bcc.n	8001c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d11d      	bne.n	8001cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	2b80      	cmp	r3, #128	@ 0x80
 8001ca8:	d016      	beq.n	8001cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e007      	b.n	8001ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce2:	2b80      	cmp	r3, #128	@ 0x80
 8001ce4:	d1c3      	bne.n	8001c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cfc:	e034      	b.n	8001d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f83e 	bl	8001d80 <I2C_IsAcknowledgeFailed>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e034      	b.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d028      	beq.n	8001d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d16:	f7ff f907 	bl	8000f28 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d302      	bcc.n	8001d2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d11d      	bne.n	8001d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d016      	beq.n	8001d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e007      	b.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d1c3      	bne.n	8001cfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d96:	d11b      	bne.n	8001dd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001da0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e272      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8087 	beq.w	8001f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfc:	4b92      	ldr	r3, [pc, #584]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d00c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e08:	4b8f      	ldr	r3, [pc, #572]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d112      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
 8001e14:	4b8c      	ldr	r3, [pc, #560]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e20:	d10b      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	4b89      	ldr	r3, [pc, #548]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x12c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d168      	bne.n	8001f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e24c      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x76>
 8001e44:	4b80      	ldr	r3, [pc, #512]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a7f      	ldr	r2, [pc, #508]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x98>
 8001e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b78      	ldr	r3, [pc, #480]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a77      	ldr	r2, [pc, #476]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xbc>
 8001e7e:	4b72      	ldr	r3, [pc, #456]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a71      	ldr	r2, [pc, #452]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e98:	4b6b      	ldr	r3, [pc, #428]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b68      	ldr	r3, [pc, #416]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a67      	ldr	r2, [pc, #412]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f836 	bl	8000f28 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f832 	bl	8000f28 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	@ 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e200      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe4>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f822 	bl	8000f28 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f81e 	bl	8000f28 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	@ 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1ec      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b53      	ldr	r3, [pc, #332]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x10c>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f16:	4b4c      	ldr	r3, [pc, #304]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f22:	4b49      	ldr	r3, [pc, #292]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x18c>
 8001f2e:	4b46      	ldr	r3, [pc, #280]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b43      	ldr	r3, [pc, #268]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1c0      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4939      	ldr	r1, [pc, #228]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_RCC_OscConfig+0x270>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe ffd7 	bl	8000f28 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7fe ffd3 	bl	8000f28 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1a1      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4927      	ldr	r1, [pc, #156]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_RCC_OscConfig+0x270>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ffb6 	bl	8000f28 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7fe ffb2 	bl	8000f28 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e180      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d03a      	beq.n	8002060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d019      	beq.n	8002026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff2:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe ff96 	bl	8000f28 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe ff92 	bl	8000f28 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e160      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f000 faba 	bl	8002598 <RCC_Delay>
 8002024:	e01c      	b.n	8002060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_RCC_OscConfig+0x274>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7fe ff7c 	bl	8000f28 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002032:	e00f      	b.n	8002054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7fe ff78 	bl	8000f28 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d908      	bls.n	8002054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e146      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	42420000 	.word	0x42420000
 8002050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	4b92      	ldr	r3, [pc, #584]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e9      	bne.n	8002034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80a6 	beq.w	80021ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b8b      	ldr	r3, [pc, #556]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b88      	ldr	r3, [pc, #544]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a87      	ldr	r2, [pc, #540]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	61d3      	str	r3, [r2, #28]
 800208a:	4b85      	ldr	r3, [pc, #532]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b82      	ldr	r3, [pc, #520]	@ (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b7f      	ldr	r3, [pc, #508]	@ (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7e      	ldr	r2, [pc, #504]	@ (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7fe ff39 	bl	8000f28 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe ff35 	bl	8000f28 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	@ 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e103      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b75      	ldr	r3, [pc, #468]	@ (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x312>
 80020e0:	4b6f      	ldr	r3, [pc, #444]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a6e      	ldr	r2, [pc, #440]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	e02d      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x334>
 80020f6:	4b6a      	ldr	r3, [pc, #424]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a69      	ldr	r2, [pc, #420]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	4b67      	ldr	r3, [pc, #412]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a66      	ldr	r2, [pc, #408]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	e01c      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x356>
 8002118:	4b61      	ldr	r3, [pc, #388]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a60      	ldr	r2, [pc, #384]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	4b5e      	ldr	r3, [pc, #376]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a5d      	ldr	r2, [pc, #372]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 8002132:	4b5b      	ldr	r3, [pc, #364]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a5a      	ldr	r2, [pc, #360]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a57      	ldr	r2, [pc, #348]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7fe fee9 	bl	8000f28 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe fee5 	bl	8000f28 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b1      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	4b4b      	ldr	r3, [pc, #300]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ee      	beq.n	800215a <HAL_RCC_OscConfig+0x37e>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fed3 	bl	8000f28 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fecf 	bl	8000f28 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e09b      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	4b40      	ldr	r3, [pc, #256]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b3c      	ldr	r3, [pc, #240]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a3b      	ldr	r2, [pc, #236]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c4:	4b36      	ldr	r3, [pc, #216]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d061      	beq.n	8002294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d146      	bne.n	8002266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b33      	ldr	r3, [pc, #204]	@ (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fea3 	bl	8000f28 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fe9f 	bl	8000f28 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e06d      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800220c:	d108      	bne.n	8002220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4921      	ldr	r1, [pc, #132]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002220:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a19      	ldr	r1, [r3, #32]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	430b      	orrs	r3, r1
 8002232:	491b      	ldr	r1, [pc, #108]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fe73 	bl	8000f28 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe fe6f 	bl	8000f28 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e03d      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x46a>
 8002264:	e035      	b.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fe5c 	bl	8000f28 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fe58 	bl	8000f28 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e026      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x498>
 8002292:	e01e      	b.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e019      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <HAL_RCC_OscConfig+0x500>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d0      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b6a      	ldr	r3, [pc, #424]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d910      	bls.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b67      	ldr	r3, [pc, #412]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4965      	ldr	r1, [pc, #404]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a58      	ldr	r2, [pc, #352]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800235e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d040      	beq.n	8002400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e073      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3d      	ldr	r3, [pc, #244]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06b      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b39      	ldr	r3, [pc, #228]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4936      	ldr	r1, [pc, #216]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fdaa 	bl	8000f28 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe fda6 	bl	8000f28 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e053      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d210      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4922      	ldr	r1, [pc, #136]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245a:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	@ (80024a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	@ (80024ac <HAL_RCC_ClockConfig+0x1cc>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_ClockConfig+0x1d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fd08 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08004ac8 	.word	0x08004ac8
 80024ac:	20000024 	.word	0x20000024
 80024b0:	20000028 	.word	0x20000028

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x30>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x36>
 80024e2:	e027      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	e027      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a17      	ldr	r2, [pc, #92]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0c5b      	lsrs	r3, r3, #17
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e004      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	613b      	str	r3, [r7, #16]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	613b      	str	r3, [r7, #16]
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	693b      	ldr	r3, [r7, #16]
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	007a1200 	.word	0x007a1200
 8002550:	08004ae0 	.word	0x08004ae0
 8002554:	08004af0 	.word	0x08004af0
 8002558:	003d0900 	.word	0x003d0900

0800255c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b02      	ldr	r3, [pc, #8]	@ (800256c <HAL_RCC_GetHCLKFreq+0x10>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	20000024 	.word	0x20000024

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002574:	f7ff fff2 	bl	800255c <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4903      	ldr	r1, [pc, #12]	@ (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	08004ad8 	.word	0x08004ad8

08002598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <RCC_Delay+0x34>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <RCC_Delay+0x38>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a5b      	lsrs	r3, r3, #9
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b4:	bf00      	nop
  }
  while (Delay --);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <RCC_Delay+0x1c>
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000024 	.word	0x20000024
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <siprintf>:
 80025d4:	b40e      	push	{r1, r2, r3}
 80025d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80025da:	b500      	push	{lr}
 80025dc:	b09c      	sub	sp, #112	@ 0x70
 80025de:	ab1d      	add	r3, sp, #116	@ 0x74
 80025e0:	9002      	str	r0, [sp, #8]
 80025e2:	9006      	str	r0, [sp, #24]
 80025e4:	9107      	str	r1, [sp, #28]
 80025e6:	9104      	str	r1, [sp, #16]
 80025e8:	4808      	ldr	r0, [pc, #32]	@ (800260c <siprintf+0x38>)
 80025ea:	4909      	ldr	r1, [pc, #36]	@ (8002610 <siprintf+0x3c>)
 80025ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80025f0:	9105      	str	r1, [sp, #20]
 80025f2:	6800      	ldr	r0, [r0, #0]
 80025f4:	a902      	add	r1, sp, #8
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	f000 f9ce 	bl	8002998 <_svfiprintf_r>
 80025fc:	2200      	movs	r2, #0
 80025fe:	9b02      	ldr	r3, [sp, #8]
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	b01c      	add	sp, #112	@ 0x70
 8002604:	f85d eb04 	ldr.w	lr, [sp], #4
 8002608:	b003      	add	sp, #12
 800260a:	4770      	bx	lr
 800260c:	20000030 	.word	0x20000030
 8002610:	ffff0208 	.word	0xffff0208

08002614 <memmove>:
 8002614:	4288      	cmp	r0, r1
 8002616:	b510      	push	{r4, lr}
 8002618:	eb01 0402 	add.w	r4, r1, r2
 800261c:	d902      	bls.n	8002624 <memmove+0x10>
 800261e:	4284      	cmp	r4, r0
 8002620:	4623      	mov	r3, r4
 8002622:	d807      	bhi.n	8002634 <memmove+0x20>
 8002624:	1e43      	subs	r3, r0, #1
 8002626:	42a1      	cmp	r1, r4
 8002628:	d008      	beq.n	800263c <memmove+0x28>
 800262a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800262e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002632:	e7f8      	b.n	8002626 <memmove+0x12>
 8002634:	4601      	mov	r1, r0
 8002636:	4402      	add	r2, r0
 8002638:	428a      	cmp	r2, r1
 800263a:	d100      	bne.n	800263e <memmove+0x2a>
 800263c:	bd10      	pop	{r4, pc}
 800263e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002646:	e7f7      	b.n	8002638 <memmove+0x24>

08002648 <memset>:
 8002648:	4603      	mov	r3, r0
 800264a:	4402      	add	r2, r0
 800264c:	4293      	cmp	r3, r2
 800264e:	d100      	bne.n	8002652 <memset+0xa>
 8002650:	4770      	bx	lr
 8002652:	f803 1b01 	strb.w	r1, [r3], #1
 8002656:	e7f9      	b.n	800264c <memset+0x4>

08002658 <strncpy>:
 8002658:	4603      	mov	r3, r0
 800265a:	b510      	push	{r4, lr}
 800265c:	3901      	subs	r1, #1
 800265e:	b132      	cbz	r2, 800266e <strncpy+0x16>
 8002660:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002664:	3a01      	subs	r2, #1
 8002666:	f803 4b01 	strb.w	r4, [r3], #1
 800266a:	2c00      	cmp	r4, #0
 800266c:	d1f7      	bne.n	800265e <strncpy+0x6>
 800266e:	2100      	movs	r1, #0
 8002670:	441a      	add	r2, r3
 8002672:	4293      	cmp	r3, r2
 8002674:	d100      	bne.n	8002678 <strncpy+0x20>
 8002676:	bd10      	pop	{r4, pc}
 8002678:	f803 1b01 	strb.w	r1, [r3], #1
 800267c:	e7f9      	b.n	8002672 <strncpy+0x1a>
	...

08002680 <__errno>:
 8002680:	4b01      	ldr	r3, [pc, #4]	@ (8002688 <__errno+0x8>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000030 	.word	0x20000030

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	2600      	movs	r6, #0
 8002690:	4d0c      	ldr	r5, [pc, #48]	@ (80026c4 <__libc_init_array+0x38>)
 8002692:	4c0d      	ldr	r4, [pc, #52]	@ (80026c8 <__libc_init_array+0x3c>)
 8002694:	1b64      	subs	r4, r4, r5
 8002696:	10a4      	asrs	r4, r4, #2
 8002698:	42a6      	cmp	r6, r4
 800269a:	d109      	bne.n	80026b0 <__libc_init_array+0x24>
 800269c:	f000 fc5e 	bl	8002f5c <_init>
 80026a0:	2600      	movs	r6, #0
 80026a2:	4d0a      	ldr	r5, [pc, #40]	@ (80026cc <__libc_init_array+0x40>)
 80026a4:	4c0a      	ldr	r4, [pc, #40]	@ (80026d0 <__libc_init_array+0x44>)
 80026a6:	1b64      	subs	r4, r4, r5
 80026a8:	10a4      	asrs	r4, r4, #2
 80026aa:	42a6      	cmp	r6, r4
 80026ac:	d105      	bne.n	80026ba <__libc_init_array+0x2e>
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b4:	4798      	blx	r3
 80026b6:	3601      	adds	r6, #1
 80026b8:	e7ee      	b.n	8002698 <__libc_init_array+0xc>
 80026ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80026be:	4798      	blx	r3
 80026c0:	3601      	adds	r6, #1
 80026c2:	e7f2      	b.n	80026aa <__libc_init_array+0x1e>
 80026c4:	08004b30 	.word	0x08004b30
 80026c8:	08004b30 	.word	0x08004b30
 80026cc:	08004b30 	.word	0x08004b30
 80026d0:	08004b34 	.word	0x08004b34

080026d4 <__retarget_lock_acquire_recursive>:
 80026d4:	4770      	bx	lr

080026d6 <__retarget_lock_release_recursive>:
 80026d6:	4770      	bx	lr

080026d8 <memcpy>:
 80026d8:	440a      	add	r2, r1
 80026da:	4291      	cmp	r1, r2
 80026dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80026e0:	d100      	bne.n	80026e4 <memcpy+0xc>
 80026e2:	4770      	bx	lr
 80026e4:	b510      	push	{r4, lr}
 80026e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026ea:	4291      	cmp	r1, r2
 80026ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026f0:	d1f9      	bne.n	80026e6 <memcpy+0xe>
 80026f2:	bd10      	pop	{r4, pc}

080026f4 <_free_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4605      	mov	r5, r0
 80026f8:	2900      	cmp	r1, #0
 80026fa:	d040      	beq.n	800277e <_free_r+0x8a>
 80026fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002700:	1f0c      	subs	r4, r1, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	bfb8      	it	lt
 8002706:	18e4      	addlt	r4, r4, r3
 8002708:	f000 f8de 	bl	80028c8 <__malloc_lock>
 800270c:	4a1c      	ldr	r2, [pc, #112]	@ (8002780 <_free_r+0x8c>)
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	b933      	cbnz	r3, 8002720 <_free_r+0x2c>
 8002712:	6063      	str	r3, [r4, #4]
 8002714:	6014      	str	r4, [r2, #0]
 8002716:	4628      	mov	r0, r5
 8002718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800271c:	f000 b8da 	b.w	80028d4 <__malloc_unlock>
 8002720:	42a3      	cmp	r3, r4
 8002722:	d908      	bls.n	8002736 <_free_r+0x42>
 8002724:	6820      	ldr	r0, [r4, #0]
 8002726:	1821      	adds	r1, r4, r0
 8002728:	428b      	cmp	r3, r1
 800272a:	bf01      	itttt	eq
 800272c:	6819      	ldreq	r1, [r3, #0]
 800272e:	685b      	ldreq	r3, [r3, #4]
 8002730:	1809      	addeq	r1, r1, r0
 8002732:	6021      	streq	r1, [r4, #0]
 8002734:	e7ed      	b.n	8002712 <_free_r+0x1e>
 8002736:	461a      	mov	r2, r3
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	b10b      	cbz	r3, 8002740 <_free_r+0x4c>
 800273c:	42a3      	cmp	r3, r4
 800273e:	d9fa      	bls.n	8002736 <_free_r+0x42>
 8002740:	6811      	ldr	r1, [r2, #0]
 8002742:	1850      	adds	r0, r2, r1
 8002744:	42a0      	cmp	r0, r4
 8002746:	d10b      	bne.n	8002760 <_free_r+0x6c>
 8002748:	6820      	ldr	r0, [r4, #0]
 800274a:	4401      	add	r1, r0
 800274c:	1850      	adds	r0, r2, r1
 800274e:	4283      	cmp	r3, r0
 8002750:	6011      	str	r1, [r2, #0]
 8002752:	d1e0      	bne.n	8002716 <_free_r+0x22>
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4408      	add	r0, r1
 800275a:	6010      	str	r0, [r2, #0]
 800275c:	6053      	str	r3, [r2, #4]
 800275e:	e7da      	b.n	8002716 <_free_r+0x22>
 8002760:	d902      	bls.n	8002768 <_free_r+0x74>
 8002762:	230c      	movs	r3, #12
 8002764:	602b      	str	r3, [r5, #0]
 8002766:	e7d6      	b.n	8002716 <_free_r+0x22>
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	1821      	adds	r1, r4, r0
 800276c:	428b      	cmp	r3, r1
 800276e:	bf01      	itttt	eq
 8002770:	6819      	ldreq	r1, [r3, #0]
 8002772:	685b      	ldreq	r3, [r3, #4]
 8002774:	1809      	addeq	r1, r1, r0
 8002776:	6021      	streq	r1, [r4, #0]
 8002778:	6063      	str	r3, [r4, #4]
 800277a:	6054      	str	r4, [r2, #4]
 800277c:	e7cb      	b.n	8002716 <_free_r+0x22>
 800277e:	bd38      	pop	{r3, r4, r5, pc}
 8002780:	2000065c 	.word	0x2000065c

08002784 <sbrk_aligned>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	4e0f      	ldr	r6, [pc, #60]	@ (80027c4 <sbrk_aligned+0x40>)
 8002788:	460c      	mov	r4, r1
 800278a:	6831      	ldr	r1, [r6, #0]
 800278c:	4605      	mov	r5, r0
 800278e:	b911      	cbnz	r1, 8002796 <sbrk_aligned+0x12>
 8002790:	f000 fb90 	bl	8002eb4 <_sbrk_r>
 8002794:	6030      	str	r0, [r6, #0]
 8002796:	4621      	mov	r1, r4
 8002798:	4628      	mov	r0, r5
 800279a:	f000 fb8b 	bl	8002eb4 <_sbrk_r>
 800279e:	1c43      	adds	r3, r0, #1
 80027a0:	d103      	bne.n	80027aa <sbrk_aligned+0x26>
 80027a2:	f04f 34ff 	mov.w	r4, #4294967295
 80027a6:	4620      	mov	r0, r4
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
 80027aa:	1cc4      	adds	r4, r0, #3
 80027ac:	f024 0403 	bic.w	r4, r4, #3
 80027b0:	42a0      	cmp	r0, r4
 80027b2:	d0f8      	beq.n	80027a6 <sbrk_aligned+0x22>
 80027b4:	1a21      	subs	r1, r4, r0
 80027b6:	4628      	mov	r0, r5
 80027b8:	f000 fb7c 	bl	8002eb4 <_sbrk_r>
 80027bc:	3001      	adds	r0, #1
 80027be:	d1f2      	bne.n	80027a6 <sbrk_aligned+0x22>
 80027c0:	e7ef      	b.n	80027a2 <sbrk_aligned+0x1e>
 80027c2:	bf00      	nop
 80027c4:	20000658 	.word	0x20000658

080027c8 <_malloc_r>:
 80027c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027cc:	1ccd      	adds	r5, r1, #3
 80027ce:	f025 0503 	bic.w	r5, r5, #3
 80027d2:	3508      	adds	r5, #8
 80027d4:	2d0c      	cmp	r5, #12
 80027d6:	bf38      	it	cc
 80027d8:	250c      	movcc	r5, #12
 80027da:	2d00      	cmp	r5, #0
 80027dc:	4606      	mov	r6, r0
 80027de:	db01      	blt.n	80027e4 <_malloc_r+0x1c>
 80027e0:	42a9      	cmp	r1, r5
 80027e2:	d904      	bls.n	80027ee <_malloc_r+0x26>
 80027e4:	230c      	movs	r3, #12
 80027e6:	6033      	str	r3, [r6, #0]
 80027e8:	2000      	movs	r0, #0
 80027ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028c4 <_malloc_r+0xfc>
 80027f2:	f000 f869 	bl	80028c8 <__malloc_lock>
 80027f6:	f8d8 3000 	ldr.w	r3, [r8]
 80027fa:	461c      	mov	r4, r3
 80027fc:	bb44      	cbnz	r4, 8002850 <_malloc_r+0x88>
 80027fe:	4629      	mov	r1, r5
 8002800:	4630      	mov	r0, r6
 8002802:	f7ff ffbf 	bl	8002784 <sbrk_aligned>
 8002806:	1c43      	adds	r3, r0, #1
 8002808:	4604      	mov	r4, r0
 800280a:	d158      	bne.n	80028be <_malloc_r+0xf6>
 800280c:	f8d8 4000 	ldr.w	r4, [r8]
 8002810:	4627      	mov	r7, r4
 8002812:	2f00      	cmp	r7, #0
 8002814:	d143      	bne.n	800289e <_malloc_r+0xd6>
 8002816:	2c00      	cmp	r4, #0
 8002818:	d04b      	beq.n	80028b2 <_malloc_r+0xea>
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	4639      	mov	r1, r7
 800281e:	4630      	mov	r0, r6
 8002820:	eb04 0903 	add.w	r9, r4, r3
 8002824:	f000 fb46 	bl	8002eb4 <_sbrk_r>
 8002828:	4581      	cmp	r9, r0
 800282a:	d142      	bne.n	80028b2 <_malloc_r+0xea>
 800282c:	6821      	ldr	r1, [r4, #0]
 800282e:	4630      	mov	r0, r6
 8002830:	1a6d      	subs	r5, r5, r1
 8002832:	4629      	mov	r1, r5
 8002834:	f7ff ffa6 	bl	8002784 <sbrk_aligned>
 8002838:	3001      	adds	r0, #1
 800283a:	d03a      	beq.n	80028b2 <_malloc_r+0xea>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	442b      	add	r3, r5
 8002840:	6023      	str	r3, [r4, #0]
 8002842:	f8d8 3000 	ldr.w	r3, [r8]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	bb62      	cbnz	r2, 80028a4 <_malloc_r+0xdc>
 800284a:	f8c8 7000 	str.w	r7, [r8]
 800284e:	e00f      	b.n	8002870 <_malloc_r+0xa8>
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	1b52      	subs	r2, r2, r5
 8002854:	d420      	bmi.n	8002898 <_malloc_r+0xd0>
 8002856:	2a0b      	cmp	r2, #11
 8002858:	d917      	bls.n	800288a <_malloc_r+0xc2>
 800285a:	1961      	adds	r1, r4, r5
 800285c:	42a3      	cmp	r3, r4
 800285e:	6025      	str	r5, [r4, #0]
 8002860:	bf18      	it	ne
 8002862:	6059      	strne	r1, [r3, #4]
 8002864:	6863      	ldr	r3, [r4, #4]
 8002866:	bf08      	it	eq
 8002868:	f8c8 1000 	streq.w	r1, [r8]
 800286c:	5162      	str	r2, [r4, r5]
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	4630      	mov	r0, r6
 8002872:	f000 f82f 	bl	80028d4 <__malloc_unlock>
 8002876:	f104 000b 	add.w	r0, r4, #11
 800287a:	1d23      	adds	r3, r4, #4
 800287c:	f020 0007 	bic.w	r0, r0, #7
 8002880:	1ac2      	subs	r2, r0, r3
 8002882:	bf1c      	itt	ne
 8002884:	1a1b      	subne	r3, r3, r0
 8002886:	50a3      	strne	r3, [r4, r2]
 8002888:	e7af      	b.n	80027ea <_malloc_r+0x22>
 800288a:	6862      	ldr	r2, [r4, #4]
 800288c:	42a3      	cmp	r3, r4
 800288e:	bf0c      	ite	eq
 8002890:	f8c8 2000 	streq.w	r2, [r8]
 8002894:	605a      	strne	r2, [r3, #4]
 8002896:	e7eb      	b.n	8002870 <_malloc_r+0xa8>
 8002898:	4623      	mov	r3, r4
 800289a:	6864      	ldr	r4, [r4, #4]
 800289c:	e7ae      	b.n	80027fc <_malloc_r+0x34>
 800289e:	463c      	mov	r4, r7
 80028a0:	687f      	ldr	r7, [r7, #4]
 80028a2:	e7b6      	b.n	8002812 <_malloc_r+0x4a>
 80028a4:	461a      	mov	r2, r3
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	42a3      	cmp	r3, r4
 80028aa:	d1fb      	bne.n	80028a4 <_malloc_r+0xdc>
 80028ac:	2300      	movs	r3, #0
 80028ae:	6053      	str	r3, [r2, #4]
 80028b0:	e7de      	b.n	8002870 <_malloc_r+0xa8>
 80028b2:	230c      	movs	r3, #12
 80028b4:	4630      	mov	r0, r6
 80028b6:	6033      	str	r3, [r6, #0]
 80028b8:	f000 f80c 	bl	80028d4 <__malloc_unlock>
 80028bc:	e794      	b.n	80027e8 <_malloc_r+0x20>
 80028be:	6005      	str	r5, [r0, #0]
 80028c0:	e7d6      	b.n	8002870 <_malloc_r+0xa8>
 80028c2:	bf00      	nop
 80028c4:	2000065c 	.word	0x2000065c

080028c8 <__malloc_lock>:
 80028c8:	4801      	ldr	r0, [pc, #4]	@ (80028d0 <__malloc_lock+0x8>)
 80028ca:	f7ff bf03 	b.w	80026d4 <__retarget_lock_acquire_recursive>
 80028ce:	bf00      	nop
 80028d0:	20000654 	.word	0x20000654

080028d4 <__malloc_unlock>:
 80028d4:	4801      	ldr	r0, [pc, #4]	@ (80028dc <__malloc_unlock+0x8>)
 80028d6:	f7ff befe 	b.w	80026d6 <__retarget_lock_release_recursive>
 80028da:	bf00      	nop
 80028dc:	20000654 	.word	0x20000654

080028e0 <__ssputs_r>:
 80028e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	461f      	mov	r7, r3
 80028e6:	688e      	ldr	r6, [r1, #8]
 80028e8:	4682      	mov	sl, r0
 80028ea:	42be      	cmp	r6, r7
 80028ec:	460c      	mov	r4, r1
 80028ee:	4690      	mov	r8, r2
 80028f0:	680b      	ldr	r3, [r1, #0]
 80028f2:	d82d      	bhi.n	8002950 <__ssputs_r+0x70>
 80028f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80028f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80028fc:	d026      	beq.n	800294c <__ssputs_r+0x6c>
 80028fe:	6965      	ldr	r5, [r4, #20]
 8002900:	6909      	ldr	r1, [r1, #16]
 8002902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002906:	eba3 0901 	sub.w	r9, r3, r1
 800290a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800290e:	1c7b      	adds	r3, r7, #1
 8002910:	444b      	add	r3, r9
 8002912:	106d      	asrs	r5, r5, #1
 8002914:	429d      	cmp	r5, r3
 8002916:	bf38      	it	cc
 8002918:	461d      	movcc	r5, r3
 800291a:	0553      	lsls	r3, r2, #21
 800291c:	d527      	bpl.n	800296e <__ssputs_r+0x8e>
 800291e:	4629      	mov	r1, r5
 8002920:	f7ff ff52 	bl	80027c8 <_malloc_r>
 8002924:	4606      	mov	r6, r0
 8002926:	b360      	cbz	r0, 8002982 <__ssputs_r+0xa2>
 8002928:	464a      	mov	r2, r9
 800292a:	6921      	ldr	r1, [r4, #16]
 800292c:	f7ff fed4 	bl	80026d8 <memcpy>
 8002930:	89a3      	ldrh	r3, [r4, #12]
 8002932:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800293a:	81a3      	strh	r3, [r4, #12]
 800293c:	6126      	str	r6, [r4, #16]
 800293e:	444e      	add	r6, r9
 8002940:	6026      	str	r6, [r4, #0]
 8002942:	463e      	mov	r6, r7
 8002944:	6165      	str	r5, [r4, #20]
 8002946:	eba5 0509 	sub.w	r5, r5, r9
 800294a:	60a5      	str	r5, [r4, #8]
 800294c:	42be      	cmp	r6, r7
 800294e:	d900      	bls.n	8002952 <__ssputs_r+0x72>
 8002950:	463e      	mov	r6, r7
 8002952:	4632      	mov	r2, r6
 8002954:	4641      	mov	r1, r8
 8002956:	6820      	ldr	r0, [r4, #0]
 8002958:	f7ff fe5c 	bl	8002614 <memmove>
 800295c:	2000      	movs	r0, #0
 800295e:	68a3      	ldr	r3, [r4, #8]
 8002960:	1b9b      	subs	r3, r3, r6
 8002962:	60a3      	str	r3, [r4, #8]
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	4433      	add	r3, r6
 8002968:	6023      	str	r3, [r4, #0]
 800296a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800296e:	462a      	mov	r2, r5
 8002970:	f000 fabe 	bl	8002ef0 <_realloc_r>
 8002974:	4606      	mov	r6, r0
 8002976:	2800      	cmp	r0, #0
 8002978:	d1e0      	bne.n	800293c <__ssputs_r+0x5c>
 800297a:	4650      	mov	r0, sl
 800297c:	6921      	ldr	r1, [r4, #16]
 800297e:	f7ff feb9 	bl	80026f4 <_free_r>
 8002982:	230c      	movs	r3, #12
 8002984:	f8ca 3000 	str.w	r3, [sl]
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	f04f 30ff 	mov.w	r0, #4294967295
 800298e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002992:	81a3      	strh	r3, [r4, #12]
 8002994:	e7e9      	b.n	800296a <__ssputs_r+0x8a>
	...

08002998 <_svfiprintf_r>:
 8002998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299c:	4698      	mov	r8, r3
 800299e:	898b      	ldrh	r3, [r1, #12]
 80029a0:	4607      	mov	r7, r0
 80029a2:	061b      	lsls	r3, r3, #24
 80029a4:	460d      	mov	r5, r1
 80029a6:	4614      	mov	r4, r2
 80029a8:	b09d      	sub	sp, #116	@ 0x74
 80029aa:	d510      	bpl.n	80029ce <_svfiprintf_r+0x36>
 80029ac:	690b      	ldr	r3, [r1, #16]
 80029ae:	b973      	cbnz	r3, 80029ce <_svfiprintf_r+0x36>
 80029b0:	2140      	movs	r1, #64	@ 0x40
 80029b2:	f7ff ff09 	bl	80027c8 <_malloc_r>
 80029b6:	6028      	str	r0, [r5, #0]
 80029b8:	6128      	str	r0, [r5, #16]
 80029ba:	b930      	cbnz	r0, 80029ca <_svfiprintf_r+0x32>
 80029bc:	230c      	movs	r3, #12
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	b01d      	add	sp, #116	@ 0x74
 80029c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ca:	2340      	movs	r3, #64	@ 0x40
 80029cc:	616b      	str	r3, [r5, #20]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80029d2:	2320      	movs	r3, #32
 80029d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80029d8:	2330      	movs	r3, #48	@ 0x30
 80029da:	f04f 0901 	mov.w	r9, #1
 80029de:	f8cd 800c 	str.w	r8, [sp, #12]
 80029e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002b7c <_svfiprintf_r+0x1e4>
 80029e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029ea:	4623      	mov	r3, r4
 80029ec:	469a      	mov	sl, r3
 80029ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029f2:	b10a      	cbz	r2, 80029f8 <_svfiprintf_r+0x60>
 80029f4:	2a25      	cmp	r2, #37	@ 0x25
 80029f6:	d1f9      	bne.n	80029ec <_svfiprintf_r+0x54>
 80029f8:	ebba 0b04 	subs.w	fp, sl, r4
 80029fc:	d00b      	beq.n	8002a16 <_svfiprintf_r+0x7e>
 80029fe:	465b      	mov	r3, fp
 8002a00:	4622      	mov	r2, r4
 8002a02:	4629      	mov	r1, r5
 8002a04:	4638      	mov	r0, r7
 8002a06:	f7ff ff6b 	bl	80028e0 <__ssputs_r>
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	f000 80a7 	beq.w	8002b5e <_svfiprintf_r+0x1c6>
 8002a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a12:	445a      	add	r2, fp
 8002a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a16:	f89a 3000 	ldrb.w	r3, [sl]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 809f 	beq.w	8002b5e <_svfiprintf_r+0x1c6>
 8002a20:	2300      	movs	r3, #0
 8002a22:	f04f 32ff 	mov.w	r2, #4294967295
 8002a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a2a:	f10a 0a01 	add.w	sl, sl, #1
 8002a2e:	9304      	str	r3, [sp, #16]
 8002a30:	9307      	str	r3, [sp, #28]
 8002a32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a36:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a38:	4654      	mov	r4, sl
 8002a3a:	2205      	movs	r2, #5
 8002a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a40:	484e      	ldr	r0, [pc, #312]	@ (8002b7c <_svfiprintf_r+0x1e4>)
 8002a42:	f000 fa47 	bl	8002ed4 <memchr>
 8002a46:	9a04      	ldr	r2, [sp, #16]
 8002a48:	b9d8      	cbnz	r0, 8002a82 <_svfiprintf_r+0xea>
 8002a4a:	06d0      	lsls	r0, r2, #27
 8002a4c:	bf44      	itt	mi
 8002a4e:	2320      	movmi	r3, #32
 8002a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a54:	0711      	lsls	r1, r2, #28
 8002a56:	bf44      	itt	mi
 8002a58:	232b      	movmi	r3, #43	@ 0x2b
 8002a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a64:	d015      	beq.n	8002a92 <_svfiprintf_r+0xfa>
 8002a66:	4654      	mov	r4, sl
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f04f 0c0a 	mov.w	ip, #10
 8002a6e:	9a07      	ldr	r2, [sp, #28]
 8002a70:	4621      	mov	r1, r4
 8002a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a76:	3b30      	subs	r3, #48	@ 0x30
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	d94b      	bls.n	8002b14 <_svfiprintf_r+0x17c>
 8002a7c:	b1b0      	cbz	r0, 8002aac <_svfiprintf_r+0x114>
 8002a7e:	9207      	str	r2, [sp, #28]
 8002a80:	e014      	b.n	8002aac <_svfiprintf_r+0x114>
 8002a82:	eba0 0308 	sub.w	r3, r0, r8
 8002a86:	fa09 f303 	lsl.w	r3, r9, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	46a2      	mov	sl, r4
 8002a8e:	9304      	str	r3, [sp, #16]
 8002a90:	e7d2      	b.n	8002a38 <_svfiprintf_r+0xa0>
 8002a92:	9b03      	ldr	r3, [sp, #12]
 8002a94:	1d19      	adds	r1, r3, #4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	9103      	str	r1, [sp, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bfbb      	ittet	lt
 8002a9e:	425b      	neglt	r3, r3
 8002aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8002aa4:	9307      	strge	r3, [sp, #28]
 8002aa6:	9307      	strlt	r3, [sp, #28]
 8002aa8:	bfb8      	it	lt
 8002aaa:	9204      	strlt	r2, [sp, #16]
 8002aac:	7823      	ldrb	r3, [r4, #0]
 8002aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ab0:	d10a      	bne.n	8002ac8 <_svfiprintf_r+0x130>
 8002ab2:	7863      	ldrb	r3, [r4, #1]
 8002ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ab6:	d132      	bne.n	8002b1e <_svfiprintf_r+0x186>
 8002ab8:	9b03      	ldr	r3, [sp, #12]
 8002aba:	3402      	adds	r4, #2
 8002abc:	1d1a      	adds	r2, r3, #4
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	9203      	str	r2, [sp, #12]
 8002ac2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ac6:	9305      	str	r3, [sp, #20]
 8002ac8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002b80 <_svfiprintf_r+0x1e8>
 8002acc:	2203      	movs	r2, #3
 8002ace:	4650      	mov	r0, sl
 8002ad0:	7821      	ldrb	r1, [r4, #0]
 8002ad2:	f000 f9ff 	bl	8002ed4 <memchr>
 8002ad6:	b138      	cbz	r0, 8002ae8 <_svfiprintf_r+0x150>
 8002ad8:	2240      	movs	r2, #64	@ 0x40
 8002ada:	9b04      	ldr	r3, [sp, #16]
 8002adc:	eba0 000a 	sub.w	r0, r0, sl
 8002ae0:	4082      	lsls	r2, r0
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	3401      	adds	r4, #1
 8002ae6:	9304      	str	r3, [sp, #16]
 8002ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aec:	2206      	movs	r2, #6
 8002aee:	4825      	ldr	r0, [pc, #148]	@ (8002b84 <_svfiprintf_r+0x1ec>)
 8002af0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002af4:	f000 f9ee 	bl	8002ed4 <memchr>
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d036      	beq.n	8002b6a <_svfiprintf_r+0x1d2>
 8002afc:	4b22      	ldr	r3, [pc, #136]	@ (8002b88 <_svfiprintf_r+0x1f0>)
 8002afe:	bb1b      	cbnz	r3, 8002b48 <_svfiprintf_r+0x1b0>
 8002b00:	9b03      	ldr	r3, [sp, #12]
 8002b02:	3307      	adds	r3, #7
 8002b04:	f023 0307 	bic.w	r3, r3, #7
 8002b08:	3308      	adds	r3, #8
 8002b0a:	9303      	str	r3, [sp, #12]
 8002b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b0e:	4433      	add	r3, r6
 8002b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b12:	e76a      	b.n	80029ea <_svfiprintf_r+0x52>
 8002b14:	460c      	mov	r4, r1
 8002b16:	2001      	movs	r0, #1
 8002b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b1c:	e7a8      	b.n	8002a70 <_svfiprintf_r+0xd8>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f04f 0c0a 	mov.w	ip, #10
 8002b24:	4619      	mov	r1, r3
 8002b26:	3401      	adds	r4, #1
 8002b28:	9305      	str	r3, [sp, #20]
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b30:	3a30      	subs	r2, #48	@ 0x30
 8002b32:	2a09      	cmp	r2, #9
 8002b34:	d903      	bls.n	8002b3e <_svfiprintf_r+0x1a6>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0c6      	beq.n	8002ac8 <_svfiprintf_r+0x130>
 8002b3a:	9105      	str	r1, [sp, #20]
 8002b3c:	e7c4      	b.n	8002ac8 <_svfiprintf_r+0x130>
 8002b3e:	4604      	mov	r4, r0
 8002b40:	2301      	movs	r3, #1
 8002b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b46:	e7f0      	b.n	8002b2a <_svfiprintf_r+0x192>
 8002b48:	ab03      	add	r3, sp, #12
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	462a      	mov	r2, r5
 8002b4e:	4638      	mov	r0, r7
 8002b50:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <_svfiprintf_r+0x1f4>)
 8002b52:	a904      	add	r1, sp, #16
 8002b54:	f3af 8000 	nop.w
 8002b58:	1c42      	adds	r2, r0, #1
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	d1d6      	bne.n	8002b0c <_svfiprintf_r+0x174>
 8002b5e:	89ab      	ldrh	r3, [r5, #12]
 8002b60:	065b      	lsls	r3, r3, #25
 8002b62:	f53f af2d 	bmi.w	80029c0 <_svfiprintf_r+0x28>
 8002b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b68:	e72c      	b.n	80029c4 <_svfiprintf_r+0x2c>
 8002b6a:	ab03      	add	r3, sp, #12
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	462a      	mov	r2, r5
 8002b70:	4638      	mov	r0, r7
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <_svfiprintf_r+0x1f4>)
 8002b74:	a904      	add	r1, sp, #16
 8002b76:	f000 f87d 	bl	8002c74 <_printf_i>
 8002b7a:	e7ed      	b.n	8002b58 <_svfiprintf_r+0x1c0>
 8002b7c:	08004af2 	.word	0x08004af2
 8002b80:	08004af8 	.word	0x08004af8
 8002b84:	08004afc 	.word	0x08004afc
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	080028e1 	.word	0x080028e1

08002b90 <_printf_common>:
 8002b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b94:	4616      	mov	r6, r2
 8002b96:	4698      	mov	r8, r3
 8002b98:	688a      	ldr	r2, [r1, #8]
 8002b9a:	690b      	ldr	r3, [r1, #16]
 8002b9c:	4607      	mov	r7, r0
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	bfb8      	it	lt
 8002ba2:	4613      	movlt	r3, r2
 8002ba4:	6033      	str	r3, [r6, #0]
 8002ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002baa:	460c      	mov	r4, r1
 8002bac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002bb0:	b10a      	cbz	r2, 8002bb6 <_printf_common+0x26>
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	6033      	str	r3, [r6, #0]
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	0699      	lsls	r1, r3, #26
 8002bba:	bf42      	ittt	mi
 8002bbc:	6833      	ldrmi	r3, [r6, #0]
 8002bbe:	3302      	addmi	r3, #2
 8002bc0:	6033      	strmi	r3, [r6, #0]
 8002bc2:	6825      	ldr	r5, [r4, #0]
 8002bc4:	f015 0506 	ands.w	r5, r5, #6
 8002bc8:	d106      	bne.n	8002bd8 <_printf_common+0x48>
 8002bca:	f104 0a19 	add.w	sl, r4, #25
 8002bce:	68e3      	ldr	r3, [r4, #12]
 8002bd0:	6832      	ldr	r2, [r6, #0]
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	42ab      	cmp	r3, r5
 8002bd6:	dc2b      	bgt.n	8002c30 <_printf_common+0xa0>
 8002bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	3b00      	subs	r3, #0
 8002be0:	bf18      	it	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	0692      	lsls	r2, r2, #26
 8002be6:	d430      	bmi.n	8002c4a <_printf_common+0xba>
 8002be8:	4641      	mov	r1, r8
 8002bea:	4638      	mov	r0, r7
 8002bec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bf0:	47c8      	blx	r9
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	d023      	beq.n	8002c3e <_printf_common+0xae>
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	6922      	ldr	r2, [r4, #16]
 8002bfa:	f003 0306 	and.w	r3, r3, #6
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf14      	ite	ne
 8002c02:	2500      	movne	r5, #0
 8002c04:	6833      	ldreq	r3, [r6, #0]
 8002c06:	f04f 0600 	mov.w	r6, #0
 8002c0a:	bf08      	it	eq
 8002c0c:	68e5      	ldreq	r5, [r4, #12]
 8002c0e:	f104 041a 	add.w	r4, r4, #26
 8002c12:	bf08      	it	eq
 8002c14:	1aed      	subeq	r5, r5, r3
 8002c16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c1a:	bf08      	it	eq
 8002c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bfc4      	itt	gt
 8002c24:	1a9b      	subgt	r3, r3, r2
 8002c26:	18ed      	addgt	r5, r5, r3
 8002c28:	42b5      	cmp	r5, r6
 8002c2a:	d11a      	bne.n	8002c62 <_printf_common+0xd2>
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	e008      	b.n	8002c42 <_printf_common+0xb2>
 8002c30:	2301      	movs	r3, #1
 8002c32:	4652      	mov	r2, sl
 8002c34:	4641      	mov	r1, r8
 8002c36:	4638      	mov	r0, r7
 8002c38:	47c8      	blx	r9
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d103      	bne.n	8002c46 <_printf_common+0xb6>
 8002c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c46:	3501      	adds	r5, #1
 8002c48:	e7c1      	b.n	8002bce <_printf_common+0x3e>
 8002c4a:	2030      	movs	r0, #48	@ 0x30
 8002c4c:	18e1      	adds	r1, r4, r3
 8002c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c58:	4422      	add	r2, r4
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c60:	e7c2      	b.n	8002be8 <_printf_common+0x58>
 8002c62:	2301      	movs	r3, #1
 8002c64:	4622      	mov	r2, r4
 8002c66:	4641      	mov	r1, r8
 8002c68:	4638      	mov	r0, r7
 8002c6a:	47c8      	blx	r9
 8002c6c:	3001      	adds	r0, #1
 8002c6e:	d0e6      	beq.n	8002c3e <_printf_common+0xae>
 8002c70:	3601      	adds	r6, #1
 8002c72:	e7d9      	b.n	8002c28 <_printf_common+0x98>

08002c74 <_printf_i>:
 8002c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c78:	7e0f      	ldrb	r7, [r1, #24]
 8002c7a:	4691      	mov	r9, r2
 8002c7c:	2f78      	cmp	r7, #120	@ 0x78
 8002c7e:	4680      	mov	r8, r0
 8002c80:	460c      	mov	r4, r1
 8002c82:	469a      	mov	sl, r3
 8002c84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c8a:	d807      	bhi.n	8002c9c <_printf_i+0x28>
 8002c8c:	2f62      	cmp	r7, #98	@ 0x62
 8002c8e:	d80a      	bhi.n	8002ca6 <_printf_i+0x32>
 8002c90:	2f00      	cmp	r7, #0
 8002c92:	f000 80d3 	beq.w	8002e3c <_printf_i+0x1c8>
 8002c96:	2f58      	cmp	r7, #88	@ 0x58
 8002c98:	f000 80ba 	beq.w	8002e10 <_printf_i+0x19c>
 8002c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ca4:	e03a      	b.n	8002d1c <_printf_i+0xa8>
 8002ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002caa:	2b15      	cmp	r3, #21
 8002cac:	d8f6      	bhi.n	8002c9c <_printf_i+0x28>
 8002cae:	a101      	add	r1, pc, #4	@ (adr r1, 8002cb4 <_printf_i+0x40>)
 8002cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cb4:	08002d0d 	.word	0x08002d0d
 8002cb8:	08002d21 	.word	0x08002d21
 8002cbc:	08002c9d 	.word	0x08002c9d
 8002cc0:	08002c9d 	.word	0x08002c9d
 8002cc4:	08002c9d 	.word	0x08002c9d
 8002cc8:	08002c9d 	.word	0x08002c9d
 8002ccc:	08002d21 	.word	0x08002d21
 8002cd0:	08002c9d 	.word	0x08002c9d
 8002cd4:	08002c9d 	.word	0x08002c9d
 8002cd8:	08002c9d 	.word	0x08002c9d
 8002cdc:	08002c9d 	.word	0x08002c9d
 8002ce0:	08002e23 	.word	0x08002e23
 8002ce4:	08002d4b 	.word	0x08002d4b
 8002ce8:	08002ddd 	.word	0x08002ddd
 8002cec:	08002c9d 	.word	0x08002c9d
 8002cf0:	08002c9d 	.word	0x08002c9d
 8002cf4:	08002e45 	.word	0x08002e45
 8002cf8:	08002c9d 	.word	0x08002c9d
 8002cfc:	08002d4b 	.word	0x08002d4b
 8002d00:	08002c9d 	.word	0x08002c9d
 8002d04:	08002c9d 	.word	0x08002c9d
 8002d08:	08002de5 	.word	0x08002de5
 8002d0c:	6833      	ldr	r3, [r6, #0]
 8002d0e:	1d1a      	adds	r2, r3, #4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6032      	str	r2, [r6, #0]
 8002d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e09e      	b.n	8002e5e <_printf_i+0x1ea>
 8002d20:	6833      	ldr	r3, [r6, #0]
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	1d19      	adds	r1, r3, #4
 8002d26:	6031      	str	r1, [r6, #0]
 8002d28:	0606      	lsls	r6, r0, #24
 8002d2a:	d501      	bpl.n	8002d30 <_printf_i+0xbc>
 8002d2c:	681d      	ldr	r5, [r3, #0]
 8002d2e:	e003      	b.n	8002d38 <_printf_i+0xc4>
 8002d30:	0645      	lsls	r5, r0, #25
 8002d32:	d5fb      	bpl.n	8002d2c <_printf_i+0xb8>
 8002d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	da03      	bge.n	8002d44 <_printf_i+0xd0>
 8002d3c:	232d      	movs	r3, #45	@ 0x2d
 8002d3e:	426d      	negs	r5, r5
 8002d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d44:	230a      	movs	r3, #10
 8002d46:	4859      	ldr	r0, [pc, #356]	@ (8002eac <_printf_i+0x238>)
 8002d48:	e011      	b.n	8002d6e <_printf_i+0xfa>
 8002d4a:	6821      	ldr	r1, [r4, #0]
 8002d4c:	6833      	ldr	r3, [r6, #0]
 8002d4e:	0608      	lsls	r0, r1, #24
 8002d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d54:	d402      	bmi.n	8002d5c <_printf_i+0xe8>
 8002d56:	0649      	lsls	r1, r1, #25
 8002d58:	bf48      	it	mi
 8002d5a:	b2ad      	uxthmi	r5, r5
 8002d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d5e:	6033      	str	r3, [r6, #0]
 8002d60:	bf14      	ite	ne
 8002d62:	230a      	movne	r3, #10
 8002d64:	2308      	moveq	r3, #8
 8002d66:	4851      	ldr	r0, [pc, #324]	@ (8002eac <_printf_i+0x238>)
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d6e:	6866      	ldr	r6, [r4, #4]
 8002d70:	2e00      	cmp	r6, #0
 8002d72:	bfa8      	it	ge
 8002d74:	6821      	ldrge	r1, [r4, #0]
 8002d76:	60a6      	str	r6, [r4, #8]
 8002d78:	bfa4      	itt	ge
 8002d7a:	f021 0104 	bicge.w	r1, r1, #4
 8002d7e:	6021      	strge	r1, [r4, #0]
 8002d80:	b90d      	cbnz	r5, 8002d86 <_printf_i+0x112>
 8002d82:	2e00      	cmp	r6, #0
 8002d84:	d04b      	beq.n	8002e1e <_printf_i+0x1aa>
 8002d86:	4616      	mov	r6, r2
 8002d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8002d90:	5dc7      	ldrb	r7, [r0, r7]
 8002d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d96:	462f      	mov	r7, r5
 8002d98:	42bb      	cmp	r3, r7
 8002d9a:	460d      	mov	r5, r1
 8002d9c:	d9f4      	bls.n	8002d88 <_printf_i+0x114>
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d10b      	bne.n	8002dba <_printf_i+0x146>
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	07df      	lsls	r7, r3, #31
 8002da6:	d508      	bpl.n	8002dba <_printf_i+0x146>
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	6861      	ldr	r1, [r4, #4]
 8002dac:	4299      	cmp	r1, r3
 8002dae:	bfde      	ittt	le
 8002db0:	2330      	movle	r3, #48	@ 0x30
 8002db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002db6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002dba:	1b92      	subs	r2, r2, r6
 8002dbc:	6122      	str	r2, [r4, #16]
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	f8cd a000 	str.w	sl, [sp]
 8002dc8:	aa03      	add	r2, sp, #12
 8002dca:	f7ff fee1 	bl	8002b90 <_printf_common>
 8002dce:	3001      	adds	r0, #1
 8002dd0:	d14a      	bne.n	8002e68 <_printf_i+0x1f4>
 8002dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd6:	b004      	add	sp, #16
 8002dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	f043 0320 	orr.w	r3, r3, #32
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	2778      	movs	r7, #120	@ 0x78
 8002de6:	4832      	ldr	r0, [pc, #200]	@ (8002eb0 <_printf_i+0x23c>)
 8002de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	6831      	ldr	r1, [r6, #0]
 8002df0:	061f      	lsls	r7, r3, #24
 8002df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002df6:	d402      	bmi.n	8002dfe <_printf_i+0x18a>
 8002df8:	065f      	lsls	r7, r3, #25
 8002dfa:	bf48      	it	mi
 8002dfc:	b2ad      	uxthmi	r5, r5
 8002dfe:	6031      	str	r1, [r6, #0]
 8002e00:	07d9      	lsls	r1, r3, #31
 8002e02:	bf44      	itt	mi
 8002e04:	f043 0320 	orrmi.w	r3, r3, #32
 8002e08:	6023      	strmi	r3, [r4, #0]
 8002e0a:	b11d      	cbz	r5, 8002e14 <_printf_i+0x1a0>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	e7ab      	b.n	8002d68 <_printf_i+0xf4>
 8002e10:	4826      	ldr	r0, [pc, #152]	@ (8002eac <_printf_i+0x238>)
 8002e12:	e7e9      	b.n	8002de8 <_printf_i+0x174>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	f023 0320 	bic.w	r3, r3, #32
 8002e1a:	6023      	str	r3, [r4, #0]
 8002e1c:	e7f6      	b.n	8002e0c <_printf_i+0x198>
 8002e1e:	4616      	mov	r6, r2
 8002e20:	e7bd      	b.n	8002d9e <_printf_i+0x12a>
 8002e22:	6833      	ldr	r3, [r6, #0]
 8002e24:	6825      	ldr	r5, [r4, #0]
 8002e26:	1d18      	adds	r0, r3, #4
 8002e28:	6961      	ldr	r1, [r4, #20]
 8002e2a:	6030      	str	r0, [r6, #0]
 8002e2c:	062e      	lsls	r6, r5, #24
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	d501      	bpl.n	8002e36 <_printf_i+0x1c2>
 8002e32:	6019      	str	r1, [r3, #0]
 8002e34:	e002      	b.n	8002e3c <_printf_i+0x1c8>
 8002e36:	0668      	lsls	r0, r5, #25
 8002e38:	d5fb      	bpl.n	8002e32 <_printf_i+0x1be>
 8002e3a:	8019      	strh	r1, [r3, #0]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	4616      	mov	r6, r2
 8002e40:	6123      	str	r3, [r4, #16]
 8002e42:	e7bc      	b.n	8002dbe <_printf_i+0x14a>
 8002e44:	6833      	ldr	r3, [r6, #0]
 8002e46:	2100      	movs	r1, #0
 8002e48:	1d1a      	adds	r2, r3, #4
 8002e4a:	6032      	str	r2, [r6, #0]
 8002e4c:	681e      	ldr	r6, [r3, #0]
 8002e4e:	6862      	ldr	r2, [r4, #4]
 8002e50:	4630      	mov	r0, r6
 8002e52:	f000 f83f 	bl	8002ed4 <memchr>
 8002e56:	b108      	cbz	r0, 8002e5c <_printf_i+0x1e8>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	6060      	str	r0, [r4, #4]
 8002e5c:	6863      	ldr	r3, [r4, #4]
 8002e5e:	6123      	str	r3, [r4, #16]
 8002e60:	2300      	movs	r3, #0
 8002e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e66:	e7aa      	b.n	8002dbe <_printf_i+0x14a>
 8002e68:	4632      	mov	r2, r6
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	6923      	ldr	r3, [r4, #16]
 8002e70:	47d0      	blx	sl
 8002e72:	3001      	adds	r0, #1
 8002e74:	d0ad      	beq.n	8002dd2 <_printf_i+0x15e>
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	079b      	lsls	r3, r3, #30
 8002e7a:	d413      	bmi.n	8002ea4 <_printf_i+0x230>
 8002e7c:	68e0      	ldr	r0, [r4, #12]
 8002e7e:	9b03      	ldr	r3, [sp, #12]
 8002e80:	4298      	cmp	r0, r3
 8002e82:	bfb8      	it	lt
 8002e84:	4618      	movlt	r0, r3
 8002e86:	e7a6      	b.n	8002dd6 <_printf_i+0x162>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	4632      	mov	r2, r6
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	4640      	mov	r0, r8
 8002e90:	47d0      	blx	sl
 8002e92:	3001      	adds	r0, #1
 8002e94:	d09d      	beq.n	8002dd2 <_printf_i+0x15e>
 8002e96:	3501      	adds	r5, #1
 8002e98:	68e3      	ldr	r3, [r4, #12]
 8002e9a:	9903      	ldr	r1, [sp, #12]
 8002e9c:	1a5b      	subs	r3, r3, r1
 8002e9e:	42ab      	cmp	r3, r5
 8002ea0:	dcf2      	bgt.n	8002e88 <_printf_i+0x214>
 8002ea2:	e7eb      	b.n	8002e7c <_printf_i+0x208>
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	f104 0619 	add.w	r6, r4, #25
 8002eaa:	e7f5      	b.n	8002e98 <_printf_i+0x224>
 8002eac:	08004b03 	.word	0x08004b03
 8002eb0:	08004b14 	.word	0x08004b14

08002eb4 <_sbrk_r>:
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	4d05      	ldr	r5, [pc, #20]	@ (8002ed0 <_sbrk_r+0x1c>)
 8002eba:	4604      	mov	r4, r0
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	602b      	str	r3, [r5, #0]
 8002ec0:	f7fd ff78 	bl	8000db4 <_sbrk>
 8002ec4:	1c43      	adds	r3, r0, #1
 8002ec6:	d102      	bne.n	8002ece <_sbrk_r+0x1a>
 8002ec8:	682b      	ldr	r3, [r5, #0]
 8002eca:	b103      	cbz	r3, 8002ece <_sbrk_r+0x1a>
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
 8002ed0:	20000650 	.word	0x20000650

08002ed4 <memchr>:
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	b2c9      	uxtb	r1, r1
 8002eda:	4402      	add	r2, r0
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	d101      	bne.n	8002ee6 <memchr+0x12>
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	e003      	b.n	8002eee <memchr+0x1a>
 8002ee6:	7804      	ldrb	r4, [r0, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	428c      	cmp	r4, r1
 8002eec:	d1f6      	bne.n	8002edc <memchr+0x8>
 8002eee:	bd10      	pop	{r4, pc}

08002ef0 <_realloc_r>:
 8002ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef4:	4680      	mov	r8, r0
 8002ef6:	4615      	mov	r5, r2
 8002ef8:	460c      	mov	r4, r1
 8002efa:	b921      	cbnz	r1, 8002f06 <_realloc_r+0x16>
 8002efc:	4611      	mov	r1, r2
 8002efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	f7ff bc61 	b.w	80027c8 <_malloc_r>
 8002f06:	b92a      	cbnz	r2, 8002f14 <_realloc_r+0x24>
 8002f08:	f7ff fbf4 	bl	80026f4 <_free_r>
 8002f0c:	2400      	movs	r4, #0
 8002f0e:	4620      	mov	r0, r4
 8002f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f14:	f000 f81a 	bl	8002f4c <_malloc_usable_size_r>
 8002f18:	4285      	cmp	r5, r0
 8002f1a:	4606      	mov	r6, r0
 8002f1c:	d802      	bhi.n	8002f24 <_realloc_r+0x34>
 8002f1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002f22:	d8f4      	bhi.n	8002f0e <_realloc_r+0x1e>
 8002f24:	4629      	mov	r1, r5
 8002f26:	4640      	mov	r0, r8
 8002f28:	f7ff fc4e 	bl	80027c8 <_malloc_r>
 8002f2c:	4607      	mov	r7, r0
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d0ec      	beq.n	8002f0c <_realloc_r+0x1c>
 8002f32:	42b5      	cmp	r5, r6
 8002f34:	462a      	mov	r2, r5
 8002f36:	4621      	mov	r1, r4
 8002f38:	bf28      	it	cs
 8002f3a:	4632      	movcs	r2, r6
 8002f3c:	f7ff fbcc 	bl	80026d8 <memcpy>
 8002f40:	4621      	mov	r1, r4
 8002f42:	4640      	mov	r0, r8
 8002f44:	f7ff fbd6 	bl	80026f4 <_free_r>
 8002f48:	463c      	mov	r4, r7
 8002f4a:	e7e0      	b.n	8002f0e <_realloc_r+0x1e>

08002f4c <_malloc_usable_size_r>:
 8002f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f50:	1f18      	subs	r0, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bfbc      	itt	lt
 8002f56:	580b      	ldrlt	r3, [r1, r0]
 8002f58:	18c0      	addlt	r0, r0, r3
 8002f5a:	4770      	bx	lr

08002f5c <_init>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	bf00      	nop
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr

08002f68 <_fini>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	bf00      	nop
 8002f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	469e      	mov	lr, r3
 8002f72:	4770      	bx	lr
